
Door Locker - CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001962  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00001962  000019f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800186  00800186  00001b1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000388  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032f8  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001341  00000000  00000000  00005208  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020e5  00000000  00000000  00006549  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a2c  00000000  00000000  00008630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000133a  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000247e  00000000  00000000  0000a396  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000c814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__vector_3>
      10:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__vector_4>
      14:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__vector_5>
      18:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_6>
      1c:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__vector_7>
      20:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__vector_8>
      24:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
      8a:	0c 94 af 0c 	jmp	0x195e	; 0x195e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <timerInit>:

static system_error_t timerInit()
{
	system_error_t error = SYSTEM_SUCCESS;

	timer.timer_number = TIMER0;
      92:	e4 e9       	ldi	r30, 0x94	; 148
      94:	f1 e0       	ldi	r31, 0x01	; 1
      96:	11 82       	std	Z+1, r1	; 0x01
	timer.mode = TIMER_NORMAL_MODE ;
      98:	12 82       	std	Z+2, r1	; 0x02
	timer.preScaler = F_CPU_1024;
      9a:	85 e0       	ldi	r24, 0x05	; 5
      9c:	80 83       	st	Z, r24
	timer.tick_seconds = 5;
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	a0 ea       	ldi	r26, 0xA0	; 160
      a4:	b0 e4       	ldi	r27, 0x40	; 64
      a6:	83 83       	std	Z+3, r24	; 0x03
      a8:	94 83       	std	Z+4, r25	; 0x04
      aa:	a5 83       	std	Z+5, r26	; 0x05
      ac:	b6 83       	std	Z+6, r27	; 0x06

	if (TIMER_STATE_SUCCESS != mcal_timer_init(&timer))
      ae:	cf 01       	movw	r24, r30
      b0:	0e 94 46 05 	call	0xa8c	; 0xa8c <mcal_timer_init>
      b4:	88 23       	and	r24, r24
      b6:	11 f0       	breq	.+4      	; 0xbc <timerInit+0x2a>
	{
		error = SYSTEM_FAIL;
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	08 95       	ret
	}
	else
	{
		error = SYSTEM_SUCCESS;
      bc:	80 e0       	ldi	r24, 0x00	; 0
	}

	return error;
}
      be:	08 95       	ret

000000c0 <buzzerInit>:

static system_error_t buzzerInit()
{
	system_error_t error = SYSTEM_SUCCESS;

	buzzer.base_addr = BASE_C;
      c0:	e0 ea       	ldi	r30, 0xA0	; 160
      c2:	f1 e0       	ldi	r31, 0x01	; 1
      c4:	83 e3       	ldi	r24, 0x33	; 51
      c6:	80 83       	st	Z, r24
	buzzer.pin_num = 3;
      c8:	83 e0       	ldi	r24, 0x03	; 3
      ca:	81 83       	std	Z+1, r24	; 0x01
	buzzer.wiring = BUZZER_CURRENT_SOURCING;
      cc:	12 82       	std	Z+2, r1	; 0x02

	hal_buzzer_init(&buzzer);
      ce:	cf 01       	movw	r24, r30
      d0:	0e 94 a3 01 	call	0x346	; 0x346 <hal_buzzer_init>
	timerInit();
      d4:	0e 94 49 00 	call	0x92	; 0x92 <timerInit>

	return error;
}
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	08 95       	ret

000000dc <servoMotorInit>:

static system_error_t servoMotorInit()
{
	system_error_t error = SYSTEM_SUCCESS;

	servo.channel->channel_port = BASE_B;
      dc:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <servo>
      e0:	f0 91 a4 01 	lds	r31, 0x01A4	; 0x8001a4 <servo+0x1>
      e4:	86 e3       	ldi	r24, 0x36	; 54
      e6:	81 83       	std	Z+1, r24	; 0x01
	servo.channel->channel_pin = 3;
      e8:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <servo>
      ec:	f0 91 a4 01 	lds	r31, 0x01A4	; 0x8001a4 <servo+0x1>
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	80 83       	st	Z, r24

	hal_servo_motor_init(&servo);
      f4:	83 ea       	ldi	r24, 0xA3	; 163
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	0e 94 07 03 	call	0x60e	; 0x60e <hal_servo_motor_init>
	return error;
}
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	08 95       	ret

00000100 <systemInit>:

	/* Initialize Services */
	//logger_init(LOGGER_ALL);

	/* Initialize hardware devices */
	error = buzzerInit();
     100:	0e 94 60 00 	call	0xc0	; 0xc0 <buzzerInit>
	error = servoMotorInit();
     104:	0e 94 6e 00 	call	0xdc	; 0xdc <servoMotorInit>
	hal_eeprom_init();
     108:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <hal_eeprom_init>

	/* Initialize Managers */
	error = ms_manager_init();
     10c:	0e 94 9c 09 	call	0x1338	; 0x1338 <ms_manager_init>

	return error;
}
     110:	08 95       	ret

00000112 <checkDefaultPassword>:

/*************************************************************************/
/*                           System Functions                            */
/*************************************************************************/
static void checkDefaultPassword()
{
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	1f 92       	push	r1
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
	u8_t passwordExistance = 0;
     11c:	19 82       	std	Y+1, r1	; 0x01
	hal_eeprom_readByte(PASSWORD_LOCATION_FLAG,&passwordExistance);
     11e:	be 01       	movw	r22, r28
     120:	6f 5f       	subi	r22, 0xFF	; 255
     122:	7f 4f       	sbci	r23, 0xFF	; 255
     124:	89 e0       	ldi	r24, 0x09	; 9
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	0e 94 45 02 	call	0x48a	; 0x48a <hal_eeprom_readByte>
	if (PASSWORD_EXICTED ==  passwordExistance)
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	88 30       	cpi	r24, 0x08	; 8
     130:	19 f4       	brne	.+6      	; 0x138 <checkDefaultPassword+0x26>
	{
		ms_manager_send_data(PASSWORD_EXICTED);
     132:	0e 94 c8 09 	call	0x1390	; 0x1390 <ms_manager_send_data>
     136:	03 c0       	rjmp	.+6      	; 0x13e <checkDefaultPassword+0x2c>
	}
	else
	{
		ms_manager_send_data(PASSWORD_NOT_EXICTED);
     138:	89 e0       	ldi	r24, 0x09	; 9
     13a:	0e 94 c8 09 	call	0x1390	; 0x1390 <ms_manager_send_data>
	}

	state = HALT_STATE;
     13e:	84 e6       	ldi	r24, 0x64	; 100
     140:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <state>
}
     144:	0f 90       	pop	r0
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <validatePassword>:
	state = HALT_STATE;

}

static void validatePassword()
{
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	28 97       	sbiw	r28, 0x08	; 8
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
	u8_t password[PASSWORD_LENGTH] = {0};
     164:	19 82       	std	Y+1, r1	; 0x01
     166:	1a 82       	std	Y+2, r1	; 0x02
     168:	1b 82       	std	Y+3, r1	; 0x03
     16a:	1c 82       	std	Y+4, r1	; 0x04
	u8_t originalPassword[PASSWORD_LENGTH] = {0};
     16c:	1d 82       	std	Y+5, r1	; 0x05
     16e:	1e 82       	std	Y+6, r1	; 0x06
     170:	1f 82       	std	Y+7, r1	; 0x07
     172:	18 86       	std	Y+8, r1	; 0x08

	/* Receive password */
	ms_manager_receive_string(password);
     174:	ce 01       	movw	r24, r28
     176:	01 96       	adiw	r24, 0x01	; 1
     178:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <ms_manager_receive_string>

	/* get password from EEPROM */
	for (int i =0; i<PASSWORD_LENGTH; i++)
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	10 e0       	ldi	r17, 0x00	; 0
     180:	0b c0       	rjmp	.+22     	; 0x198 <validatePassword+0x4c>
	{
		hal_eeprom_readByte(0x00+(i+1),&originalPassword[i]);
     182:	65 e0       	ldi	r22, 0x05	; 5
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	6c 0f       	add	r22, r28
     188:	7d 1f       	adc	r23, r29
     18a:	60 0f       	add	r22, r16
     18c:	71 1f       	adc	r23, r17
     18e:	0f 5f       	subi	r16, 0xFF	; 255
     190:	1f 4f       	sbci	r17, 0xFF	; 255
     192:	c8 01       	movw	r24, r16
     194:	0e 94 45 02 	call	0x48a	; 0x48a <hal_eeprom_readByte>

	/* Receive password */
	ms_manager_receive_string(password);

	/* get password from EEPROM */
	for (int i =0; i<PASSWORD_LENGTH; i++)
     198:	04 30       	cpi	r16, 0x04	; 4
     19a:	11 05       	cpc	r17, r1
     19c:	94 f3       	brlt	.-28     	; 0x182 <validatePassword+0x36>
	{
		hal_eeprom_readByte(0x00+(i+1),&originalPassword[i]);
	}

	if(std_strcmp(password,originalPassword) == 0)
     19e:	be 01       	movw	r22, r28
     1a0:	6b 5f       	subi	r22, 0xFB	; 251
     1a2:	7f 4f       	sbci	r23, 0xFF	; 255
     1a4:	ce 01       	movw	r24, r28
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <std_strcmp>
     1ac:	89 2b       	or	r24, r25
     1ae:	21 f4       	brne	.+8      	; 0x1b8 <validatePassword+0x6c>
	{
		ms_manager_send_data(PASSWORD_RIGHT);
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	0e 94 c8 09 	call	0x1390	; 0x1390 <ms_manager_send_data>
     1b6:	03 c0       	rjmp	.+6      	; 0x1be <validatePassword+0x72>
	}
	else
	{
		ms_manager_send_data(PASSWORD_WRONG);
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	0e 94 c8 09 	call	0x1390	; 0x1390 <ms_manager_send_data>
	}

	state = HALT_STATE;
     1be:	84 e6       	ldi	r24, 0x64	; 100
     1c0:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <state>
}
     1c4:	28 96       	adiw	r28, 0x08	; 8
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	08 95       	ret

000001da <startPasswordFlashing>:

	state = HALT_STATE;
}

static void startPasswordFlashing()
{
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <startPasswordFlashing+0x6>
     1e0:	00 d0       	rcall	.+0      	; 0x1e2 <startPasswordFlashing+0x8>
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
	u8_t password[PASSWORD_LENGTH] = {0};
     1e6:	19 82       	std	Y+1, r1	; 0x01
     1e8:	1a 82       	std	Y+2, r1	; 0x02
     1ea:	1b 82       	std	Y+3, r1	; 0x03
     1ec:	1c 82       	std	Y+4, r1	; 0x04

	ms_manager_receive_string(password);
     1ee:	ce 01       	movw	r24, r28
     1f0:	01 96       	adiw	r24, 0x01	; 1
     1f2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <ms_manager_receive_string>

	/* save password in eeprom */
	hal_eeprom_writeByte(0x01,password[0]);
     1f6:	69 81       	ldd	r22, Y+1	; 0x01
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <hal_eeprom_writeByte>
	delay_ms(10);
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	80 e2       	ldi	r24, 0x20	; 32
     206:	91 e4       	ldi	r25, 0x41	; 65
     208:	0e 94 09 0a 	call	0x1412	; 0x1412 <delay_ms>

	hal_eeprom_writeByte(0x02,password[1]);
     20c:	6a 81       	ldd	r22, Y+2	; 0x02
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 e5 01 	call	0x3ca	; 0x3ca <hal_eeprom_writeByte>
	delay_ms(10);
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	80 e2       	ldi	r24, 0x20	; 32
     21c:	91 e4       	ldi	r25, 0x41	; 65
     21e:	0e 94 09 0a 	call	0x1412	; 0x1412 <delay_ms>

	hal_eeprom_writeByte(0x03,password[2]);
     222:	6b 81       	ldd	r22, Y+3	; 0x03
     224:	83 e0       	ldi	r24, 0x03	; 3
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 e5 01 	call	0x3ca	; 0x3ca <hal_eeprom_writeByte>
	delay_ms(10);
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	80 e2       	ldi	r24, 0x20	; 32
     232:	91 e4       	ldi	r25, 0x41	; 65
     234:	0e 94 09 0a 	call	0x1412	; 0x1412 <delay_ms>

	hal_eeprom_writeByte(0x04,password[3]);
     238:	6c 81       	ldd	r22, Y+4	; 0x04
     23a:	84 e0       	ldi	r24, 0x04	; 4
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <hal_eeprom_writeByte>
	delay_ms(10);
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	80 e2       	ldi	r24, 0x20	; 32
     248:	91 e4       	ldi	r25, 0x41	; 65
     24a:	0e 94 09 0a 	call	0x1412	; 0x1412 <delay_ms>

	/*write password exist flag */
	hal_eeprom_writeByte(PASSWORD_LOCATION_FLAG,PASSWORD_EXICTED);
     24e:	68 e0       	ldi	r22, 0x08	; 8
     250:	89 e0       	ldi	r24, 0x09	; 9
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 e5 01 	call	0x3ca	; 0x3ca <hal_eeprom_writeByte>
	delay_ms(10);
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	80 e2       	ldi	r24, 0x20	; 32
     25e:	91 e4       	ldi	r25, 0x41	; 65
     260:	0e 94 09 0a 	call	0x1412	; 0x1412 <delay_ms>

	state = HALT_STATE;
     264:	84 e6       	ldi	r24, 0x64	; 100
     266:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <state>

}
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <startAlarmSystem>:
	state = HALT_STATE;
}

static void startAlarmSystem()
{
	timer_setCallBack(releaseSystem);
     278:	8d e4       	ldi	r24, 0x4D	; 77
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	0e 94 0b 07 	call	0xe16	; 0xe16 <timer_setCallBack>

	mcal_timer_start(&timer);
     280:	84 e9       	ldi	r24, 0x94	; 148
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <mcal_timer_start>
	hal_buzzer_set_state(&buzzer,HIGH);
     288:	61 e0       	ldi	r22, 0x01	; 1
     28a:	80 ea       	ldi	r24, 0xA0	; 160
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 b3 01 	call	0x366	; 0x366 <hal_buzzer_set_state>

	state = HALT_STATE;
     292:	84 e6       	ldi	r24, 0x64	; 100
     294:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <state>
     298:	08 95       	ret

0000029a <releaseSystem>:
/*                            Timer Callback                             */
/*************************************************************************/

static void releaseSystem()
{
	mcal_timer_stop(&timer);
     29a:	84 e9       	ldi	r24, 0x94	; 148
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	0e 94 bb 06 	call	0xd76	; 0xd76 <mcal_timer_stop>
	hal_buzzer_set_state(&buzzer,LOW);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	80 ea       	ldi	r24, 0xA0	; 160
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	0e 94 b3 01 	call	0x366	; 0x366 <hal_buzzer_set_state>
	state = HALT_STATE;
     2ac:	84 e6       	ldi	r24, 0x64	; 100
     2ae:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <state>
     2b2:	08 95       	ret

000002b4 <motorOpen>:
	state = HALT_STATE;
}

static void motorOpen()
{
	timer_setCallBack(closeMotor);
     2b4:	8b e6       	ldi	r24, 0x6B	; 107
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	0e 94 0b 07 	call	0xe16	; 0xe16 <timer_setCallBack>

	mcal_timer_start(&timer);
     2bc:	84 e9       	ldi	r24, 0x94	; 148
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <mcal_timer_start>
	hal_servo_motor_set_degree(&servo,180);
     2c4:	64 eb       	ldi	r22, 0xB4	; 180
     2c6:	83 ea       	ldi	r24, 0xA3	; 163
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <hal_servo_motor_set_degree>
	state = HALT_STATE;
     2ce:	84 e6       	ldi	r24, 0x64	; 100
     2d0:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <state>
     2d4:	08 95       	ret

000002d6 <closeMotor>:
	state = HALT_STATE;
}

static void closeMotor()
{
	mcal_timer_stop(&timer);
     2d6:	84 e9       	ldi	r24, 0x94	; 148
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0e 94 bb 06 	call	0xd76	; 0xd76 <mcal_timer_stop>
	hal_servo_motor_set_degree(&servo,0);
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	83 ea       	ldi	r24, 0xA3	; 163
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <hal_servo_motor_set_degree>
	state = HALT_STATE;
     2e8:	84 e6       	ldi	r24, 0x64	; 100
     2ea:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <state>
     2ee:	08 95       	ret

000002f0 <main>:
/*                               Main Program                            */
/*************************************************************************/

int main(void)
{
	state = HALT_STATE;
     2f0:	84 e6       	ldi	r24, 0x64	; 100
     2f2:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <state>
	systemInit();
     2f6:	0e 94 80 00 	call	0x100	; 0x100 <systemInit>

	while(1)
	{
		ms_manager_receive_data(&state);
     2fa:	8f e9       	ldi	r24, 0x9F	; 159
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <ms_manager_receive_data>

		switch(state)
     302:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <state>
     306:	85 30       	cpi	r24, 0x05	; 5
     308:	79 f0       	breq	.+30     	; 0x328 <main+0x38>
     30a:	28 f4       	brcc	.+10     	; 0x316 <main+0x26>
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	79 f0       	breq	.+30     	; 0x32e <main+0x3e>
     310:	84 30       	cpi	r24, 0x04	; 4
     312:	81 f0       	breq	.+32     	; 0x334 <main+0x44>
     314:	f2 cf       	rjmp	.-28     	; 0x2fa <main+0xa>
     316:	8b 30       	cpi	r24, 0x0B	; 11
     318:	99 f0       	breq	.+38     	; 0x340 <main+0x50>
     31a:	8c 30       	cpi	r24, 0x0C	; 12
     31c:	71 f0       	breq	.+28     	; 0x33a <main+0x4a>
     31e:	8a 30       	cpi	r24, 0x0A	; 10
     320:	61 f7       	brne	.-40     	; 0x2fa <main+0xa>
		{

		case CHECK_PASS_EXCISTANCE_STATE:
		{
			checkDefaultPassword();
     322:	0e 94 89 00 	call	0x112	; 0x112 <checkDefaultPassword>
			break;
     326:	e9 cf       	rjmp	.-46     	; 0x2fa <main+0xa>
		}

		case START_DEFAULT_PASS_STATE:
		{
			startPasswordFlashing();
     328:	0e 94 ed 00 	call	0x1da	; 0x1da <startPasswordFlashing>
			break;
     32c:	e6 cf       	rjmp	.-52     	; 0x2fa <main+0xa>
		}

		case START_STATE:
		{
			validatePassword();
     32e:	0e 94 a6 00 	call	0x14c	; 0x14c <validatePassword>
			break;
     332:	e3 cf       	rjmp	.-58     	; 0x2fa <main+0xa>
		}

		case START_NEW_PASS_STATE:
		{
			startPasswordFlashing();
     334:	0e 94 ed 00 	call	0x1da	; 0x1da <startPasswordFlashing>
			break;
     338:	e0 cf       	rjmp	.-64     	; 0x2fa <main+0xa>
		}

		case ALARM_STATE:
		{
			startAlarmSystem();
     33a:	0e 94 3c 01 	call	0x278	; 0x278 <startAlarmSystem>
			break;
     33e:	dd cf       	rjmp	.-70     	; 0x2fa <main+0xa>
		}

		case OPEN_LOCK_STATE:
		{
			motorOpen();
     340:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <motorOpen>
			break;
     344:	da cf       	rjmp	.-76     	; 0x2fa <main+0xa>

00000346 <hal_buzzer_init>:

buzzer_error_t hal_buzzer_init(buzzer_t *the_buzzer)
{
	buzzer_error_t error = BUZZER_GPIO_STATE_SUCCESS;

	if (the_buzzer->wiring == BUZZER_CURRENT_SOURCING ||
     346:	fc 01       	movw	r30, r24
     348:	22 81       	ldd	r18, Z+2	; 0x02
     34a:	22 30       	cpi	r18, 0x02	; 2
     34c:	40 f4       	brcc	.+16     	; 0x35e <hal_buzzer_init+0x18>
			the_buzzer->wiring == BUZZER_CURRENT_SINKING)
	{
		if (GPIO_STATE_SUCCESS == mcal_gpio_pin_init(
     34e:	42 e0       	ldi	r20, 0x02	; 2
     350:	61 81       	ldd	r22, Z+1	; 0x01
     352:	80 81       	ld	r24, Z
     354:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <mcal_gpio_pin_init>
     358:	81 11       	cpse	r24, r1
     35a:	03 c0       	rjmp	.+6      	; 0x362 <hal_buzzer_init+0x1c>
     35c:	08 95       	ret
			error = BUZZER_GPIO_STATE_ERROR;
		}
	}
	else
	{
		error = BUZZER_GPIO_INVALID_CURRENT;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	08 95       	ret
		{
			/* buzzer initialized */
		}
		else
		{
			error = BUZZER_GPIO_STATE_ERROR;
     362:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		error = BUZZER_GPIO_INVALID_CURRENT;
	}
	return error;
}
     364:	08 95       	ret

00000366 <hal_buzzer_set_state>:

buzzer_error_t hal_buzzer_set_state(buzzer_t *the_buzzer, u8_t value)
{
	buzzer_error_t error = BUZZER_GPIO_STATE_SUCCESS;

	if (the_buzzer->wiring == BUZZER_CURRENT_SOURCING)
     366:	fc 01       	movw	r30, r24
     368:	22 81       	ldd	r18, Z+2	; 0x02
     36a:	21 11       	cpse	r18, r1
     36c:	08 c0       	rjmp	.+16     	; 0x37e <hal_buzzer_set_state+0x18>
	{
		if (GPIO_STATE_SUCCESS == mcal_gpio_pin_write(
     36e:	46 2f       	mov	r20, r22
     370:	61 81       	ldd	r22, Z+1	; 0x01
     372:	80 81       	ld	r24, Z
     374:	0e 94 21 04 	call	0x842	; 0x842 <mcal_gpio_pin_write>
     378:	81 11       	cpse	r24, r1
     37a:	0e c0       	rjmp	.+28     	; 0x398 <hal_buzzer_set_state+0x32>
     37c:	08 95       	ret
		else
		{
			error = BUZZER_GPIO_STATE_ERROR;
		}
	}
	else if (the_buzzer->wiring == BUZZER_CURRENT_SINKING)
     37e:	21 30       	cpi	r18, 0x01	; 1
     380:	69 f4       	brne	.+26     	; 0x39c <hal_buzzer_set_state+0x36>
	{
		if (GPIO_STATE_SUCCESS == mcal_gpio_pin_write(
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	61 11       	cpse	r22, r1
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	fc 01       	movw	r30, r24
     38a:	61 81       	ldd	r22, Z+1	; 0x01
     38c:	80 81       	ld	r24, Z
     38e:	0e 94 21 04 	call	0x842	; 0x842 <mcal_gpio_pin_write>
     392:	81 11       	cpse	r24, r1
     394:	05 c0       	rjmp	.+10     	; 0x3a0 <hal_buzzer_set_state+0x3a>
     396:	08 95       	ret
		{
			/* buzzer value is written */
		}
		else
		{
			error = BUZZER_GPIO_STATE_ERROR;
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	08 95       	ret
			error = BUZZER_GPIO_STATE_ERROR;
		}
	}
	else
	{
		error = BUZZER_GPIO_INVALID_CURRENT;
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	08 95       	ret
		{
			/* buzzer value is written */
		}
		else
		{
			error = BUZZER_GPIO_STATE_ERROR;
     3a0:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		error = BUZZER_GPIO_INVALID_CURRENT;
	}
	return error;
}
     3a2:	08 95       	ret

000003a4 <hal_eeprom_init>:


#include "eeprom.h"

eeprom_error_t hal_eeprom_init(void)
{
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	1f 92       	push	r1
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	eeprom_error_t error = EEPROM_SUCCESS;

	i2c_t i2c;
	i2c.bitRate = RATE_100KB;
     3ae:	19 82       	std	Y+1, r1	; 0x01

	/* just initialize the I2C(TWI) module inside the MC */
	if (I2C_STATE_SUCCESS == mcal_TWI_init(&i2c))
     3b0:	ce 01       	movw	r24, r28
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <mcal_TWI_init>
     3b8:	81 11       	cpse	r24, r1
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <hal_eeprom_init+0x1c>

#include "eeprom.h"

eeprom_error_t hal_eeprom_init(void)
{
	eeprom_error_t error = EEPROM_SUCCESS;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <hal_eeprom_init+0x1e>
	{
		/* i2c initialized */
	}
	else
	{
		error = EEPROM_FAIL;
     3c0:	80 e0       	ldi	r24, 0x00	; 0
	}
	return error;
}
     3c2:	0f 90       	pop	r0
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <hal_eeprom_writeByte>:

eeprom_error_t hal_eeprom_writeByte(u16_t u16addr, u8_t u8data)
{
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	1f 92       	push	r1
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	8c 01       	movw	r16, r24
     3dc:	f6 2e       	mov	r15, r22
	eeprom_error_t error = EEPROM_SUCCESS;
	u8_t status = 0;
     3de:	19 82       	std	Y+1, r1	; 0x01

	/* Send the Start Bit */
	if (I2C_STATE_SUCCESS == mcal_TWI_start())
     3e0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <mcal_TWI_start>
     3e4:	81 11       	cpse	r24, r1
     3e6:	39 c0       	rjmp	.+114    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
	{
		mcal_TWI_getStatus(&status);
     3e8:	ce 01       	movw	r24, r28
     3ea:	01 96       	adiw	r24, 0x01	; 1
     3ec:	0e 94 9b 04 	call	0x936	; 0x936 <mcal_TWI_getStatus>

		if (status == TW_START)
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	88 30       	cpi	r24, 0x08	; 8
     3f4:	a1 f5       	brne	.+104    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
		{
			/* Send the device address, we need to get A8 A9 A10 address bits from the
			 * memory location address and R/W=0 (write) */
			if (I2C_STATE_SUCCESS == mcal_TWI_write((u8_t)(0xA0 | ((u16addr & 0x0700)>>7))))
     3f6:	c8 01       	movw	r24, r16
     3f8:	88 27       	eor	r24, r24
     3fa:	97 70       	andi	r25, 0x07	; 7
     3fc:	88 0f       	add	r24, r24
     3fe:	89 2f       	mov	r24, r25
     400:	88 1f       	adc	r24, r24
     402:	99 0b       	sbc	r25, r25
     404:	91 95       	neg	r25
     406:	80 6a       	ori	r24, 0xA0	; 160
     408:	0e 94 81 04 	call	0x902	; 0x902 <mcal_TWI_write>
     40c:	81 11       	cpse	r24, r1
     40e:	29 c0       	rjmp	.+82     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
			{
				mcal_TWI_getStatus(&status);
     410:	ce 01       	movw	r24, r28
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	0e 94 9b 04 	call	0x936	; 0x936 <mcal_TWI_getStatus>
				if ( status == TW_MT_SLA_W_ACK )
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	88 31       	cpi	r24, 0x18	; 24
     41c:	21 f5       	brne	.+72     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
				{
					/* Send the required memory location address */
					if(I2C_STATE_SUCCESS == mcal_TWI_write((u8_t)(u16addr)))
     41e:	80 2f       	mov	r24, r16
     420:	0e 94 81 04 	call	0x902	; 0x902 <mcal_TWI_write>
     424:	81 11       	cpse	r24, r1
     426:	21 c0       	rjmp	.+66     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
					{
						mcal_TWI_getStatus(&status);
     428:	ce 01       	movw	r24, r28
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	0e 94 9b 04 	call	0x936	; 0x936 <mcal_TWI_getStatus>
						if( status ==  TW_MT_DATA_ACK)
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	88 32       	cpi	r24, 0x28	; 40
     434:	e1 f4       	brne	.+56     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
						{
							/* write byte to eeprom */
							if(I2C_STATE_SUCCESS == mcal_TWI_write(u8data))
     436:	8f 2d       	mov	r24, r15
     438:	0e 94 81 04 	call	0x902	; 0x902 <mcal_TWI_write>
     43c:	81 11       	cpse	r24, r1
     43e:	19 c0       	rjmp	.+50     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
							{
								mcal_TWI_getStatus(&status);
     440:	ce 01       	movw	r24, r28
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	0e 94 9b 04 	call	0x936	; 0x936 <mcal_TWI_getStatus>
								if ( status == TW_MT_DATA_ACK )
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	88 32       	cpi	r24, 0x28	; 40
     44c:	a1 f4       	brne	.+40     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
								{
									/* Send the Stop Bit */
									if (I2C_STATE_SUCCESS == mcal_TWI_stop())
     44e:	0e 94 76 04 	call	0x8ec	; 0x8ec <mcal_TWI_stop>
     452:	81 11       	cpse	r24, r1
     454:	12 c0       	rjmp	.+36     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
	return error;
}

eeprom_error_t hal_eeprom_writeByte(u16_t u16addr, u8_t u8data)
{
	eeprom_error_t error = EEPROM_SUCCESS;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	11 c0       	rjmp	.+34     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			error = EEPROM_FAIL;
		}
	}
	else
	{
		error = EEPROM_FAIL;
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0f c0       	rjmp	.+30     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			}

		}
		else
		{
			error = EEPROM_FAIL;
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	0d c0       	rjmp	.+26     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
				}
			}

			else
			{
				error = EEPROM_FAIL;
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	0b c0       	rjmp	.+22     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
						error = EEPROM_FAIL;
					}
				}
				else
				{
					error = EEPROM_FAIL;
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	09 c0       	rjmp	.+18     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
							error = EEPROM_FAIL;
						}
					}
					else
					{
						error = EEPROM_FAIL;
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	07 c0       	rjmp	.+14     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
								error = EEPROM_FAIL;
							}
						}
						else
						{
							error = EEPROM_FAIL;
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	05 c0       	rjmp	.+10     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
									error=EEPROM_FAIL;
								}
							}
							else
							{
								error = EEPROM_FAIL;
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	03 c0       	rjmp	.+6      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
										error = EEPROM_FAIL;
									}
								}
								else
								{
									error=EEPROM_FAIL;
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	01 c0       	rjmp	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
									{
										/* EEPROM write success */
									}
									else
									{
										error = EEPROM_FAIL;
     47a:	80 e0       	ldi	r24, 0x00	; 0
	{
		error = EEPROM_FAIL;
	}
	return error;

}
     47c:	0f 90       	pop	r0
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	ff 90       	pop	r15
     488:	08 95       	ret

0000048a <hal_eeprom_readByte>:
eeprom_error_t hal_eeprom_readByte(u16_t u16addr, u8_t *u8data)
{
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	1f 92       	push	r1
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	8c 01       	movw	r16, r24
     4a2:	7b 01       	movw	r14, r22
	eeprom_error_t error = EEPROM_SUCCESS;
	u8_t status = 0;
     4a4:	19 82       	std	Y+1, r1	; 0x01

	/* Send the Start Bit */
	if (I2C_STATE_SUCCESS == mcal_TWI_start())
     4a6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <mcal_TWI_start>
     4aa:	81 11       	cpse	r24, r1
     4ac:	54 c0       	rjmp	.+168    	; 0x556 <hal_eeprom_readByte+0xcc>
	{
		mcal_TWI_getStatus(&status);
     4ae:	ce 01       	movw	r24, r28
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	0e 94 9b 04 	call	0x936	; 0x936 <mcal_TWI_getStatus>
		if (status == TW_START)
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	88 30       	cpi	r24, 0x08	; 8
     4ba:	09 f0       	breq	.+2      	; 0x4be <hal_eeprom_readByte+0x34>
     4bc:	4e c0       	rjmp	.+156    	; 0x55a <hal_eeprom_readByte+0xd0>
		{
			/* Send the device address, we need to get A8 A9 A10 address bits from the
			 * memory location address and R/W=0 (write) */
			if (I2C_STATE_SUCCESS == mcal_TWI_write((u8_t)((0xA0) | ((u16addr & 0x0700)>>7))))
     4be:	68 01       	movw	r12, r16
     4c0:	cc 24       	eor	r12, r12
     4c2:	87 e0       	ldi	r24, 0x07	; 7
     4c4:	d8 22       	and	r13, r24
     4c6:	cc 0c       	add	r12, r12
     4c8:	cd 2c       	mov	r12, r13
     4ca:	cc 1c       	adc	r12, r12
     4cc:	dd 08       	sbc	r13, r13
     4ce:	d1 94       	neg	r13
     4d0:	8c 2d       	mov	r24, r12
     4d2:	80 6a       	ori	r24, 0xA0	; 160
     4d4:	0e 94 81 04 	call	0x902	; 0x902 <mcal_TWI_write>
     4d8:	81 11       	cpse	r24, r1
     4da:	41 c0       	rjmp	.+130    	; 0x55e <hal_eeprom_readByte+0xd4>
			{
				mcal_TWI_getStatus(&status);
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	0e 94 9b 04 	call	0x936	; 0x936 <mcal_TWI_getStatus>
				if(status == TW_MT_SLA_W_ACK)
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	88 31       	cpi	r24, 0x18	; 24
     4e8:	e1 f5       	brne	.+120    	; 0x562 <hal_eeprom_readByte+0xd8>
				{
					/* write byte to eeprom */
					if(I2C_STATE_SUCCESS == mcal_TWI_write((u8_t)(u16addr)))
     4ea:	80 2f       	mov	r24, r16
     4ec:	0e 94 81 04 	call	0x902	; 0x902 <mcal_TWI_write>
     4f0:	81 11       	cpse	r24, r1
     4f2:	39 c0       	rjmp	.+114    	; 0x566 <hal_eeprom_readByte+0xdc>
					{
						mcal_TWI_getStatus(&status);
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	0e 94 9b 04 	call	0x936	; 0x936 <mcal_TWI_getStatus>
						if(status == TW_MT_DATA_ACK)
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	88 32       	cpi	r24, 0x28	; 40
     500:	a1 f5       	brne	.+104    	; 0x56a <hal_eeprom_readByte+0xe0>
						{
							/* Send the Repeated Start Bit */
							if (I2C_STATE_SUCCESS == mcal_TWI_start())
     502:	0e 94 68 04 	call	0x8d0	; 0x8d0 <mcal_TWI_start>
     506:	81 11       	cpse	r24, r1
     508:	32 c0       	rjmp	.+100    	; 0x56e <hal_eeprom_readByte+0xe4>
							{
								mcal_TWI_getStatus(&status);
     50a:	ce 01       	movw	r24, r28
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	0e 94 9b 04 	call	0x936	; 0x936 <mcal_TWI_getStatus>
								if(status == TW_REP_START )
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	80 31       	cpi	r24, 0x10	; 16
     516:	69 f5       	brne	.+90     	; 0x572 <hal_eeprom_readByte+0xe8>
								{
									/* Send the device address, we need to get A8 A9 A10 address bits from the
									 * memory location address and R/W=1 (Read) */
									if(I2C_STATE_SUCCESS == mcal_TWI_write((u8_t)((0xA0) | ((u16addr & 0x0700)>>7) | 1)))
     518:	8c 2d       	mov	r24, r12
     51a:	81 6a       	ori	r24, 0xA1	; 161
     51c:	0e 94 81 04 	call	0x902	; 0x902 <mcal_TWI_write>
     520:	81 11       	cpse	r24, r1
     522:	29 c0       	rjmp	.+82     	; 0x576 <hal_eeprom_readByte+0xec>
									{
										mcal_TWI_getStatus(&status);
     524:	ce 01       	movw	r24, r28
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	0e 94 9b 04 	call	0x936	; 0x936 <mcal_TWI_getStatus>
										if(status ==TW_MT_SLA_R_ACK )
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	80 34       	cpi	r24, 0x40	; 64
     530:	21 f5       	brne	.+72     	; 0x57a <hal_eeprom_readByte+0xf0>
										{

											/* Read Byte from Memory without send ACK */
											if (I2C_STATE_SUCCESS == mcal_TWI_readWithNACK(u8data))
     532:	c7 01       	movw	r24, r14
     534:	0e 94 8d 04 	call	0x91a	; 0x91a <mcal_TWI_readWithNACK>
     538:	81 11       	cpse	r24, r1
     53a:	21 c0       	rjmp	.+66     	; 0x57e <hal_eeprom_readByte+0xf4>
											{
												mcal_TWI_getStatus(&status);
     53c:	ce 01       	movw	r24, r28
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	0e 94 9b 04 	call	0x936	; 0x936 <mcal_TWI_getStatus>
												if(status ==TW_MR_DATA_NACK )
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	88 35       	cpi	r24, 0x58	; 88
     548:	e1 f4       	brne	.+56     	; 0x582 <hal_eeprom_readByte+0xf8>
												{
													/* Send the Stop Bit */
													if (I2C_STATE_SUCCESS == mcal_TWI_stop())
     54a:	0e 94 76 04 	call	0x8ec	; 0x8ec <mcal_TWI_stop>
     54e:	81 11       	cpse	r24, r1
     550:	1a c0       	rjmp	.+52     	; 0x586 <hal_eeprom_readByte+0xfc>
	return error;

}
eeprom_error_t hal_eeprom_readByte(u16_t u16addr, u8_t *u8data)
{
	eeprom_error_t error = EEPROM_SUCCESS;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	19 c0       	rjmp	.+50     	; 0x588 <hal_eeprom_readByte+0xfe>
		}

	}
	else
	{
		error = EEPROM_FAIL;
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	17 c0       	rjmp	.+46     	; 0x588 <hal_eeprom_readByte+0xfe>
			}

		}
		else
		{
			error=EEPROM_FAIL;
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	15 c0       	rjmp	.+42     	; 0x588 <hal_eeprom_readByte+0xfe>
					error = EEPROM_FAIL;
				}
			}
			else
			{
				error= EEPROM_FAIL;
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	13 c0       	rjmp	.+38     	; 0x588 <hal_eeprom_readByte+0xfe>
					}

				}
				else
				{
					error = EEPROM_FAIL;
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	11 c0       	rjmp	.+34     	; 0x588 <hal_eeprom_readByte+0xfe>
						}

					}
					else
					{
						error = EEPROM_FAIL;
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	0f c0       	rjmp	.+30     	; 0x588 <hal_eeprom_readByte+0xfe>


						}
						else
						{
							error = EEPROM_FAIL;
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0d c0       	rjmp	.+26     	; 0x588 <hal_eeprom_readByte+0xfe>
								}

							}
							else
							{
								error = EEPROM_FAIL;
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0b c0       	rjmp	.+22     	; 0x588 <hal_eeprom_readByte+0xfe>
									}

								}
								else
								{
									error = EEPROM_FAIL;
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	09 c0       	rjmp	.+18     	; 0x588 <hal_eeprom_readByte+0xfe>
											error = EEPROM_FAIL;
										}
									}
									else
									{
										error = EEPROM_FAIL;
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	07 c0       	rjmp	.+14     	; 0x588 <hal_eeprom_readByte+0xfe>
											}

										}
										else
										{
											error = EEPROM_FAIL;
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	05 c0       	rjmp	.+10     	; 0x588 <hal_eeprom_readByte+0xfe>
												}

											}
											else
											{
												error = EEPROM_FAIL;
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	03 c0       	rjmp	.+6      	; 0x588 <hal_eeprom_readByte+0xfe>
														error = EEPROM_FAIL;
													}
												}
												else
												{
													error = EEPROM_FAIL;
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	01 c0       	rjmp	.+2      	; 0x588 <hal_eeprom_readByte+0xfe>
													{
														/* EEPROM read success */
													}
													else
													{
														error = EEPROM_FAIL;
     586:	80 e0       	ldi	r24, 0x00	; 0
	{
		error = EEPROM_FAIL;
	}

	return error;
}
     588:	0f 90       	pop	r0
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	08 95       	ret

0000059c <map>:
}



static u32_t map(u32_t x, u32_t in_min, u32_t in_max, u32_t out_min, u32_t out_max)
{
     59c:	4f 92       	push	r4
     59e:	5f 92       	push	r5
     5a0:	6f 92       	push	r6
     5a2:	7f 92       	push	r7
     5a4:	af 92       	push	r10
     5a6:	bf 92       	push	r11
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	29 01       	movw	r4, r18
     5be:	3a 01       	movw	r6, r20
	return ((x  * (out_max - out_min)) / (in_max - in_min)) + out_min;
     5c0:	29 89       	ldd	r18, Y+17	; 0x11
     5c2:	3a 89       	ldd	r19, Y+18	; 0x12
     5c4:	4b 89       	ldd	r20, Y+19	; 0x13
     5c6:	5c 89       	ldd	r21, Y+20	; 0x14
     5c8:	2a 19       	sub	r18, r10
     5ca:	3b 09       	sbc	r19, r11
     5cc:	4c 09       	sbc	r20, r12
     5ce:	5d 09       	sbc	r21, r13
     5d0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__mulsi3>
     5d4:	a8 01       	movw	r20, r16
     5d6:	97 01       	movw	r18, r14
     5d8:	24 19       	sub	r18, r4
     5da:	35 09       	sbc	r19, r5
     5dc:	46 09       	sbc	r20, r6
     5de:	57 09       	sbc	r21, r7
     5e0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__udivmodsi4>
     5e4:	c6 01       	movw	r24, r12
     5e6:	b5 01       	movw	r22, r10
     5e8:	62 0f       	add	r22, r18
     5ea:	73 1f       	adc	r23, r19
     5ec:	84 1f       	adc	r24, r20
     5ee:	95 1f       	adc	r25, r21
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	bf 90       	pop	r11
     602:	af 90       	pop	r10
     604:	7f 90       	pop	r7
     606:	6f 90       	pop	r6
     608:	5f 90       	pop	r5
     60a:	4f 90       	pop	r4
     60c:	08 95       	ret

0000060e <hal_servo_motor_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

servo_motor_error_t hal_servo_motor_init(servo_motor_t *motor)
{
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	ec 01       	movw	r28, r24
	servo_motor_error_t error = SERVO_MOTOR_STATE_SUCCESS;

	if (GPIO_STATE_SUCCESS == mcal_pwm_initialization(motor->channel))
     614:	88 81       	ld	r24, Y
     616:	99 81       	ldd	r25, Y+1	; 0x01
     618:	0e 94 a1 04 	call	0x942	; 0x942 <mcal_pwm_initialization>
     61c:	81 11       	cpse	r24, r1
     61e:	46 c0       	rjmp	.+140    	; 0x6ac <hal_servo_motor_init+0x9e>
		  61Hz and that's by setting prescaller to 64 that why
		  we won't assign a Top value here
		 */


		switch(motor->channel->channel_pin)
     620:	e8 81       	ld	r30, Y
     622:	f9 81       	ldd	r31, Y+1	; 0x01
     624:	80 81       	ld	r24, Z
     626:	84 30       	cpi	r24, 0x04	; 4
     628:	b9 f0       	breq	.+46     	; 0x658 <hal_servo_motor_init+0x4a>
     62a:	18 f4       	brcc	.+6      	; 0x632 <hal_servo_motor_init+0x24>
     62c:	83 30       	cpi	r24, 0x03	; 3
     62e:	31 f0       	breq	.+12     	; 0x63c <hal_servo_motor_init+0x2e>
     630:	3f c0       	rjmp	.+126    	; 0x6b0 <hal_servo_motor_init+0xa2>
     632:	85 30       	cpi	r24, 0x05	; 5
     634:	f9 f0       	breq	.+62     	; 0x674 <hal_servo_motor_init+0x66>
     636:	87 30       	cpi	r24, 0x07	; 7
     638:	59 f1       	breq	.+86     	; 0x690 <hal_servo_motor_init+0x82>
     63a:	3a c0       	rjmp	.+116    	; 0x6b0 <hal_servo_motor_init+0xa2>
		{
		// PB3
		case CHANNEL_1_PIN :
		{
			timer_min_duty = (256 * SERVO_MIN_PERIOD) / SERVO_PERIOD;
     63c:	86 e0       	ldi	r24, 0x06	; 6
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <timer_min_duty+0x1>
     644:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <timer_min_duty>
			timer_max_duty = (256 * SERVO_MAX_PERIOD) / SERVO_PERIOD;
     648:	80 e2       	ldi	r24, 0x20	; 32
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__data_end+0x1>
     650:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
			timer_max_duty = (256 * SERVO_MAX_PERIOD) / SERVO_PERIOD;
			break;
		}
		}

		return error;
     654:	80 e0       	ldi	r24, 0x00	; 0
		// PB3
		case CHANNEL_1_PIN :
		{
			timer_min_duty = (256 * SERVO_MIN_PERIOD) / SERVO_PERIOD;
			timer_max_duty = (256 * SERVO_MAX_PERIOD) / SERVO_PERIOD;
			break;
     656:	2d c0       	rjmp	.+90     	; 0x6b2 <hal_servo_motor_init+0xa4>
		}

		// PD4
		case CHANNEL_2_PIN :
		{
			timer_min_duty = (65536 * SERVO_MIN_PERIOD) / SERVO_PERIOD;
     658:	86 e6       	ldi	r24, 0x66	; 102
     65a:	96 e0       	ldi	r25, 0x06	; 6
     65c:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <timer_min_duty+0x1>
     660:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <timer_min_duty>
			timer_max_duty = (65536 * SERVO_MAX_PERIOD) / SERVO_PERIOD;
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e2       	ldi	r25, 0x20	; 32
     668:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__data_end+0x1>
     66c:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
			timer_max_duty = (256 * SERVO_MAX_PERIOD) / SERVO_PERIOD;
			break;
		}
		}

		return error;
     670:	80 e0       	ldi	r24, 0x00	; 0
		// PD4
		case CHANNEL_2_PIN :
		{
			timer_min_duty = (65536 * SERVO_MIN_PERIOD) / SERVO_PERIOD;
			timer_max_duty = (65536 * SERVO_MAX_PERIOD) / SERVO_PERIOD;
			break;
     672:	1f c0       	rjmp	.+62     	; 0x6b2 <hal_servo_motor_init+0xa4>
		}

		// PD5
		case CHANNEL_3_PIN :
		{
			timer_min_duty = (65536 * SERVO_MIN_PERIOD) / SERVO_PERIOD;
     674:	86 e6       	ldi	r24, 0x66	; 102
     676:	96 e0       	ldi	r25, 0x06	; 6
     678:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <timer_min_duty+0x1>
     67c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <timer_min_duty>
			timer_max_duty = (65536 * SERVO_MAX_PERIOD) / SERVO_PERIOD;
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e2       	ldi	r25, 0x20	; 32
     684:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__data_end+0x1>
     688:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
			timer_max_duty = (256 * SERVO_MAX_PERIOD) / SERVO_PERIOD;
			break;
		}
		}

		return error;
     68c:	80 e0       	ldi	r24, 0x00	; 0
		// PD5
		case CHANNEL_3_PIN :
		{
			timer_min_duty = (65536 * SERVO_MIN_PERIOD) / SERVO_PERIOD;
			timer_max_duty = (65536 * SERVO_MAX_PERIOD) / SERVO_PERIOD;
			break;
     68e:	11 c0       	rjmp	.+34     	; 0x6b2 <hal_servo_motor_init+0xa4>
		}

		// PD7
		case CHANNEL_4_PIN :
		{
			timer_min_duty = (256 * SERVO_MIN_PERIOD) / SERVO_PERIOD;
     690:	86 e0       	ldi	r24, 0x06	; 6
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <timer_min_duty+0x1>
     698:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <timer_min_duty>
			timer_max_duty = (256 * SERVO_MAX_PERIOD) / SERVO_PERIOD;
     69c:	80 e2       	ldi	r24, 0x20	; 32
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__data_end+0x1>
     6a4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
			break;
		}
		}

		return error;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
		// PD7
		case CHANNEL_4_PIN :
		{
			timer_min_duty = (256 * SERVO_MIN_PERIOD) / SERVO_PERIOD;
			timer_max_duty = (256 * SERVO_MAX_PERIOD) / SERVO_PERIOD;
			break;
     6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <hal_servo_motor_init+0xa4>
	}
	else
	{
		error = SERVO_MOTOR_STATE_ERROR;
	}
	return error;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <hal_servo_motor_init+0xa4>
			timer_max_duty = (256 * SERVO_MAX_PERIOD) / SERVO_PERIOD;
			break;
		}
		}

		return error;
     6b0:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		error = SERVO_MOTOR_STATE_ERROR;
	}
	return error;
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <hal_servo_motor_set_degree>:


servo_motor_error_t hal_servo_motor_set_degree(servo_motor_t *motor ,u8_t degree)
{
     6b8:	af 92       	push	r10
     6ba:	bf 92       	push	r11
     6bc:	cf 92       	push	r12
     6be:	df 92       	push	r13
     6c0:	ef 92       	push	r14
     6c2:	ff 92       	push	r15
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
	servo_motor_error_t error = SERVO_MOTOR_STATE_SUCCESS;

	switch(motor->channel->channel_pin)
     6c8:	dc 01       	movw	r26, r24
     6ca:	ed 91       	ld	r30, X+
     6cc:	fc 91       	ld	r31, X
     6ce:	80 81       	ld	r24, Z
     6d0:	84 30       	cpi	r24, 0x04	; 4
     6d2:	39 f1       	breq	.+78     	; 0x722 <hal_servo_motor_set_degree+0x6a>
     6d4:	85 30       	cpi	r24, 0x05	; 5
     6d6:	09 f4       	brne	.+2      	; 0x6da <hal_servo_motor_set_degree+0x22>
     6d8:	45 c0       	rjmp	.+138    	; 0x764 <hal_servo_motor_set_degree+0xac>
     6da:	83 30       	cpi	r24, 0x03	; 3
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <hal_servo_motor_set_degree+0x28>
     6de:	62 c0       	rjmp	.+196    	; 0x7a4 <hal_servo_motor_set_degree+0xec>
	{
	// PB3
	case CHANNEL_1_PIN :
	{
		register(OCR1A) = map(degree,0,180,timer_min_duty,timer_max_duty);
     6e0:	a0 90 88 01 	lds	r10, 0x0188	; 0x800188 <timer_min_duty>
     6e4:	b0 90 89 01 	lds	r11, 0x0189	; 0x800189 <timer_min_duty+0x1>
     6e8:	c1 2c       	mov	r12, r1
     6ea:	d1 2c       	mov	r13, r1
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	00 91 86 01 	lds	r16, 0x0186	; 0x800186 <__data_end>
     6f6:	10 91 87 01 	lds	r17, 0x0187	; 0x800187 <__data_end+0x1>
     6fa:	1f 92       	push	r1
     6fc:	1f 92       	push	r1
     6fe:	1f 93       	push	r17
     700:	0f 93       	push	r16
     702:	14 eb       	ldi	r17, 0xB4	; 180
     704:	e1 2e       	mov	r14, r17
     706:	f1 2c       	mov	r15, r1
     708:	00 e0       	ldi	r16, 0x00	; 0
     70a:	10 e0       	ldi	r17, 0x00	; 0
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	a9 01       	movw	r20, r18
     712:	0e 94 ce 02 	call	0x59c	; 0x59c <map>
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	6a bd       	out	0x2a, r22	; 42
		break;
     720:	41 c0       	rjmp	.+130    	; 0x7a4 <hal_servo_motor_set_degree+0xec>
	}

	// PD4
	case CHANNEL_2_PIN :
	{
		register(OCR1B) = map(degree,0,180,timer_min_duty,timer_max_duty);
     722:	a0 90 88 01 	lds	r10, 0x0188	; 0x800188 <timer_min_duty>
     726:	b0 90 89 01 	lds	r11, 0x0189	; 0x800189 <timer_min_duty+0x1>
     72a:	c1 2c       	mov	r12, r1
     72c:	d1 2c       	mov	r13, r1
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	00 91 86 01 	lds	r16, 0x0186	; 0x800186 <__data_end>
     738:	10 91 87 01 	lds	r17, 0x0187	; 0x800187 <__data_end+0x1>
     73c:	1f 92       	push	r1
     73e:	1f 92       	push	r1
     740:	1f 93       	push	r17
     742:	0f 93       	push	r16
     744:	14 eb       	ldi	r17, 0xB4	; 180
     746:	e1 2e       	mov	r14, r17
     748:	f1 2c       	mov	r15, r1
     74a:	00 e0       	ldi	r16, 0x00	; 0
     74c:	10 e0       	ldi	r17, 0x00	; 0
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	a9 01       	movw	r20, r18
     754:	0e 94 ce 02 	call	0x59c	; 0x59c <map>
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	68 bd       	out	0x28, r22	; 40
		break;
     762:	20 c0       	rjmp	.+64     	; 0x7a4 <hal_servo_motor_set_degree+0xec>
	}

	// PD5
	case CHANNEL_3_PIN :
	{
		register(OCR2) = map(degree,0,180,timer_min_duty,timer_max_duty);
     764:	a0 90 88 01 	lds	r10, 0x0188	; 0x800188 <timer_min_duty>
     768:	b0 90 89 01 	lds	r11, 0x0189	; 0x800189 <timer_min_duty+0x1>
     76c:	c1 2c       	mov	r12, r1
     76e:	d1 2c       	mov	r13, r1
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	00 91 86 01 	lds	r16, 0x0186	; 0x800186 <__data_end>
     77a:	10 91 87 01 	lds	r17, 0x0187	; 0x800187 <__data_end+0x1>
     77e:	1f 92       	push	r1
     780:	1f 92       	push	r1
     782:	1f 93       	push	r17
     784:	0f 93       	push	r16
     786:	14 eb       	ldi	r17, 0xB4	; 180
     788:	e1 2e       	mov	r14, r17
     78a:	f1 2c       	mov	r15, r1
     78c:	00 e0       	ldi	r16, 0x00	; 0
     78e:	10 e0       	ldi	r17, 0x00	; 0
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	a9 01       	movw	r20, r18
     796:	0e 94 ce 02 	call	0x59c	; 0x59c <map>
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	63 bd       	out	0x23, r22	; 35
		break;
	}
	}

	return error;
}
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	08 95       	ret

000007b8 <mcal_gpio_pin_init>:

GPIO_STATE_ERROR_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
     7b8:	89 33       	cpi	r24, 0x39	; 57
     7ba:	31 f0       	breq	.+12     	; 0x7c8 <mcal_gpio_pin_init+0x10>
     7bc:	86 33       	cpi	r24, 0x36	; 54
     7be:	21 f0       	breq	.+8      	; 0x7c8 <mcal_gpio_pin_init+0x10>
     7c0:	83 33       	cpi	r24, 0x33	; 51
     7c2:	11 f0       	breq	.+4      	; 0x7c8 <mcal_gpio_pin_init+0x10>
     7c4:	80 33       	cpi	r24, 0x30	; 48
     7c6:	b9 f5       	brne	.+110    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
	{
		if (pin < ECU_PORT_PINS_NUMBER)
     7c8:	68 30       	cpi	r22, 0x08	; 8
     7ca:	b8 f5       	brcc	.+110    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
		{
			switch (dir)
     7cc:	41 30       	cpi	r20, 0x01	; 1
     7ce:	89 f0       	breq	.+34     	; 0x7f2 <mcal_gpio_pin_init+0x3a>
     7d0:	f8 f0       	brcs	.+62     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7d2:	42 30       	cpi	r20, 0x02	; 2
     7d4:	a1 f5       	brne	.+104    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
			{
			case DIR_OUTPUT:
				set_bit(base + OFFSET_DIR, pin);
     7d6:	e8 2f       	mov	r30, r24
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	21 81       	ldd	r18, Z+1	; 0x01
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <mcal_gpio_pin_init+0x2e>
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25
     7e6:	6a 95       	dec	r22
     7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <mcal_gpio_pin_init+0x2a>
     7ea:	82 2b       	or	r24, r18
     7ec:	81 83       	std	Z+1, r24	; 0x01
/*                     Functions Implementation                          */
/*************************************************************************/

GPIO_STATE_ERROR_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
     7ee:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (dir)
			{
			case DIR_OUTPUT:
				set_bit(base + OFFSET_DIR, pin);
				break;
     7f0:	08 95       	ret

			case DIR_INPUT_PULLDOWN:
				clr_bit(base + OFFSET_DIR, pin);
     7f2:	e8 2f       	mov	r30, r24
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	21 81       	ldd	r18, Z+1	; 0x01
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7fe:	88 0f       	add	r24, r24
     800:	99 1f       	adc	r25, r25
     802:	6a 95       	dec	r22
     804:	e2 f7       	brpl	.-8      	; 0x7fe <mcal_gpio_pin_init+0x46>
     806:	80 95       	com	r24
     808:	82 23       	and	r24, r18
     80a:	81 83       	std	Z+1, r24	; 0x01
/*                     Functions Implementation                          */
/*************************************************************************/

GPIO_STATE_ERROR_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
     80c:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(base + OFFSET_DIR, pin);
				break;

			case DIR_INPUT_PULLDOWN:
				clr_bit(base + OFFSET_DIR, pin);
				break;
     80e:	08 95       	ret

			case DIR_INPUT_PULLUP:
				clr_bit(base + OFFSET_DIR, pin);
     810:	e8 2f       	mov	r30, r24
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	21 81       	ldd	r18, Z+1	; 0x01
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	02 c0       	rjmp	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	6a 95       	dec	r22
     822:	e2 f7       	brpl	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     824:	98 2f       	mov	r25, r24
     826:	90 95       	com	r25
     828:	92 23       	and	r25, r18
     82a:	91 83       	std	Z+1, r25	; 0x01
				set_bit(base + OFFSET_PORT, pin);
     82c:	92 81       	ldd	r25, Z+2	; 0x02
     82e:	89 2b       	or	r24, r25
     830:	82 83       	std	Z+2, r24	; 0x02
/*                     Functions Implementation                          */
/*************************************************************************/

GPIO_STATE_ERROR_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
     832:	80 e0       	ldi	r24, 0x00	; 0
				break;

			case DIR_INPUT_PULLUP:
				clr_bit(base + OFFSET_DIR, pin);
				set_bit(base + OFFSET_PORT, pin);
				break;
     834:	08 95       	ret
			error = GPIO_STATE_INVAILD_PIN;
		}
	}
	else
	{
		error = GPIO_STATE_INVALID_ADDR;
     836:	82 e0       	ldi	r24, 0x02	; 2
     838:	08 95       	ret
				break;
			}
		}
		else
		{
			error = GPIO_STATE_INVAILD_PIN;
     83a:	83 e0       	ldi	r24, 0x03	; 3
     83c:	08 95       	ret
				clr_bit(base + OFFSET_DIR, pin);
				set_bit(base + OFFSET_PORT, pin);
				break;

			default:
				error = GPIO_STATE_INVALID_DIR;
     83e:	84 e0       	ldi	r24, 0x04	; 4
	else
	{
		error = GPIO_STATE_INVALID_ADDR;
	}
	return error;
}
     840:	08 95       	ret

00000842 <mcal_gpio_pin_write>:

GPIO_STATE_ERROR_t mcal_gpio_pin_write(u8_t base, u8_t pin, u8_t value)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
     842:	89 33       	cpi	r24, 0x39	; 57
     844:	31 f0       	breq	.+12     	; 0x852 <mcal_gpio_pin_write+0x10>
     846:	86 33       	cpi	r24, 0x36	; 54
     848:	21 f0       	breq	.+8      	; 0x852 <mcal_gpio_pin_write+0x10>
     84a:	83 33       	cpi	r24, 0x33	; 51
     84c:	11 f0       	breq	.+4      	; 0x852 <mcal_gpio_pin_write+0x10>
     84e:	80 33       	cpi	r24, 0x30	; 48
     850:	19 f5       	brne	.+70     	; 0x898 <__stack+0x39>
	{
		if (pin < ECU_PORT_PINS_NUMBER)
     852:	68 30       	cpi	r22, 0x08	; 8
     854:	18 f5       	brcc	.+70     	; 0x89c <__stack+0x3d>
		{
			switch (value)
     856:	44 23       	and	r20, r20
     858:	81 f0       	breq	.+32     	; 0x87a <__stack+0x1b>
     85a:	41 30       	cpi	r20, 0x01	; 1
     85c:	09 f5       	brne	.+66     	; 0x8a0 <__stack+0x41>
			{
			case HIGH:
				set_bit(base + OFFSET_PORT, pin);
     85e:	e8 2f       	mov	r30, r24
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	22 81       	ldd	r18, Z+2	; 0x02
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	02 c0       	rjmp	.+4      	; 0x86e <__stack+0xf>
     86a:	88 0f       	add	r24, r24
     86c:	99 1f       	adc	r25, r25
     86e:	6a 95       	dec	r22
     870:	e2 f7       	brpl	.-8      	; 0x86a <__stack+0xb>
     872:	82 2b       	or	r24, r18
     874:	82 83       	std	Z+2, r24	; 0x02
	return error;
}

GPIO_STATE_ERROR_t mcal_gpio_pin_write(u8_t base, u8_t pin, u8_t value)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
     876:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (value)
			{
			case HIGH:
				set_bit(base + OFFSET_PORT, pin);
				break;
     878:	08 95       	ret

			case LOW:
				clr_bit(base + OFFSET_PORT, pin);
     87a:	e8 2f       	mov	r30, r24
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	22 81       	ldd	r18, Z+2	; 0x02
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	6a 95       	dec	r22
     88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
     88e:	80 95       	com	r24
     890:	82 23       	and	r24, r18
     892:	82 83       	std	Z+2, r24	; 0x02
	return error;
}

GPIO_STATE_ERROR_t mcal_gpio_pin_write(u8_t base, u8_t pin, u8_t value)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
     894:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(base + OFFSET_PORT, pin);
				break;

			case LOW:
				clr_bit(base + OFFSET_PORT, pin);
				break;
     896:	08 95       	ret
			error = GPIO_STATE_INVAILD_PIN;
		}
	}
	else
	{
		error = GPIO_STATE_INVALID_ADDR;
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	08 95       	ret
				break;
			}
		}
		else
		{
			error = GPIO_STATE_INVAILD_PIN;
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	08 95       	ret
			case LOW:
				clr_bit(base + OFFSET_PORT, pin);
				break;

			default:
				error = GPIO_STATE_INVALID_VALUE;
     8a0:	85 e0       	ldi	r24, 0x05	; 5
	{
		error = GPIO_STATE_INVALID_ADDR;
	}

	return error;
}
     8a2:	08 95       	ret

000008a4 <mcal_TWI_init>:

	/* Read Data */
	*data = TWDR;

	return error;
}
     8a4:	11 b8       	out	0x01, r1	; 1
     8a6:	fc 01       	movw	r30, r24
     8a8:	80 81       	ld	r24, Z
     8aa:	81 11       	cpse	r24, r1
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <mcal_TWI_init+0x12>
     8ae:	80 e2       	ldi	r24, 0x20	; 32
     8b0:	80 b9       	out	0x00, r24	; 0
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <mcal_TWI_init+0x20>
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	21 f4       	brne	.+8      	; 0x8c2 <mcal_TWI_init+0x1e>
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	80 b9       	out	0x00, r24	; 0
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <mcal_TWI_init+0x20>
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	92 e0       	ldi	r25, 0x02	; 2
     8c6:	92 b9       	out	0x02, r25	; 2
     8c8:	96 b7       	in	r25, 0x36	; 54
     8ca:	94 60       	ori	r25, 0x04	; 4
     8cc:	96 bf       	out	0x36, r25	; 54
     8ce:	08 95       	ret

000008d0 <mcal_TWI_start>:
     8d0:	86 b7       	in	r24, 0x36	; 54
     8d2:	80 68       	ori	r24, 0x80	; 128
     8d4:	86 bf       	out	0x36, r24	; 54
     8d6:	86 b7       	in	r24, 0x36	; 54
     8d8:	80 62       	ori	r24, 0x20	; 32
     8da:	86 bf       	out	0x36, r24	; 54
     8dc:	86 b7       	in	r24, 0x36	; 54
     8de:	84 60       	ori	r24, 0x04	; 4
     8e0:	86 bf       	out	0x36, r24	; 54
     8e2:	06 b6       	in	r0, 0x36	; 54
     8e4:	07 fe       	sbrs	r0, 7
     8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <mcal_TWI_start+0x12>
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	08 95       	ret

000008ec <mcal_TWI_stop>:
     8ec:	86 b7       	in	r24, 0x36	; 54
     8ee:	80 68       	ori	r24, 0x80	; 128
     8f0:	86 bf       	out	0x36, r24	; 54
     8f2:	86 b7       	in	r24, 0x36	; 54
     8f4:	80 61       	ori	r24, 0x10	; 16
     8f6:	86 bf       	out	0x36, r24	; 54
     8f8:	86 b7       	in	r24, 0x36	; 54
     8fa:	84 60       	ori	r24, 0x04	; 4
     8fc:	86 bf       	out	0x36, r24	; 54
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 95       	ret

00000902 <mcal_TWI_write>:
     902:	83 b9       	out	0x03, r24	; 3
     904:	86 b7       	in	r24, 0x36	; 54
     906:	80 68       	ori	r24, 0x80	; 128
     908:	86 bf       	out	0x36, r24	; 54
     90a:	86 b7       	in	r24, 0x36	; 54
     90c:	84 60       	ori	r24, 0x04	; 4
     90e:	86 bf       	out	0x36, r24	; 54
     910:	06 b6       	in	r0, 0x36	; 54
     912:	07 fe       	sbrs	r0, 7
     914:	fd cf       	rjmp	.-6      	; 0x910 <mcal_TWI_write+0xe>
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	08 95       	ret

0000091a <mcal_TWI_readWithNACK>:

i2c_error_t mcal_TWI_readWithNACK(u8_t* data)
{
     91a:	fc 01       	movw	r30, r24
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */

	set_bit(TWCR,TWINT);
     91c:	96 b7       	in	r25, 0x36	; 54
     91e:	90 68       	ori	r25, 0x80	; 128
     920:	96 bf       	out	0x36, r25	; 54
	set_bit(TWCR,TWEN);
     922:	96 b7       	in	r25, 0x36	; 54
     924:	94 60       	ori	r25, 0x04	; 4
     926:	96 bf       	out	0x36, r25	; 54

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(bit_is_clr(TWCR,TWINT));
     928:	06 b6       	in	r0, 0x36	; 54
     92a:	07 fe       	sbrs	r0, 7
     92c:	fd cf       	rjmp	.-6      	; 0x928 <mcal_TWI_readWithNACK+0xe>

	/* Read Data */
	*data = TWDR;
     92e:	83 e2       	ldi	r24, 0x23	; 35
     930:	80 83       	st	Z, r24

	return error;

}
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	08 95       	ret

00000936 <mcal_TWI_getStatus>:

i2c_error_t mcal_TWI_getStatus(u8_t *status)
{
     936:	fc 01       	movw	r30, r24
	i2c_error_t error = I2C_STATE_SUCCESS;

	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	*status = register(TWSR) & 0xF8;
     938:	91 b1       	in	r25, 0x01	; 1
     93a:	98 7f       	andi	r25, 0xF8	; 248
     93c:	90 83       	st	Z, r25

	return error;

}
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	08 95       	ret

00000942 <mcal_pwm_initialization>:
/**************************************************************************/
/*                     Functions Implementation                           */
/**************************************************************************/

pwm_error_t  mcal_pwm_initialization(pwm_channel_t* channel)
{
     942:	dc 01       	movw	r26, r24
	pwm_error_t error = PWM_STATE_SUCCESS;

	/* making the pin of pwm output */
	set_bit(channel->channel_port + OFFSET_DIR,channel->channel_pin);
     944:	11 96       	adiw	r26, 0x01	; 1
     946:	ec 91       	ld	r30, X
     948:	11 97       	sbiw	r26, 0x01	; 1
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	81 81       	ldd	r24, Z+1	; 0x01
     94e:	21 e0       	ldi	r18, 0x01	; 1
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	0c 90       	ld	r0, X
     954:	02 c0       	rjmp	.+4      	; 0x95a <mcal_pwm_initialization+0x18>
     956:	22 0f       	add	r18, r18
     958:	33 1f       	adc	r19, r19
     95a:	0a 94       	dec	r0
     95c:	e2 f7       	brpl	.-8      	; 0x956 <mcal_pwm_initialization+0x14>
     95e:	28 2b       	or	r18, r24
     960:	21 83       	std	Z+1, r18	; 0x01

	switch(channel->channel_pin)
     962:	8c 91       	ld	r24, X
     964:	84 30       	cpi	r24, 0x04	; 4
     966:	09 f1       	breq	.+66     	; 0x9aa <mcal_pwm_initialization+0x68>
     968:	18 f4       	brcc	.+6      	; 0x970 <mcal_pwm_initialization+0x2e>
     96a:	83 30       	cpi	r24, 0x03	; 3
     96c:	39 f0       	breq	.+14     	; 0x97c <mcal_pwm_initialization+0x3a>
     96e:	62 c0       	rjmp	.+196    	; 0xa34 <mcal_pwm_initialization+0xf2>
     970:	85 30       	cpi	r24, 0x05	; 5
     972:	91 f1       	breq	.+100    	; 0x9d8 <mcal_pwm_initialization+0x96>
     974:	87 30       	cpi	r24, 0x07	; 7
     976:	09 f4       	brne	.+2      	; 0x97a <mcal_pwm_initialization+0x38>
     978:	46 c0       	rjmp	.+140    	; 0xa06 <mcal_pwm_initialization+0xc4>
     97a:	5c c0       	rjmp	.+184    	; 0xa34 <mcal_pwm_initialization+0xf2>
	{
	case CHANNEL_1_PIN :
	{
		/* choosing mode of operation fast pwm */
		set_bit(TCCR0,WGM00);
     97c:	83 b7       	in	r24, 0x33	; 51
     97e:	80 64       	ori	r24, 0x40	; 64
     980:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,WGM01);
     982:	83 b7       	in	r24, 0x33	; 51
     984:	88 60       	ori	r24, 0x08	; 8
     986:	83 bf       	out	0x33, r24	; 51

		/*choose non inverting mode of pwm */
		set_bit(TCCR0,COM01);
     988:	83 b7       	in	r24, 0x33	; 51
     98a:	80 62       	ori	r24, 0x20	; 32
     98c:	83 bf       	out	0x33, r24	; 51
		clr_bit(TCCR0,COM00);
     98e:	83 b7       	in	r24, 0x33	; 51
     990:	8f 7e       	andi	r24, 0xEF	; 239
     992:	83 bf       	out	0x33, r24	; 51

		/*choose clock no pre scalling option*/
		clr_bit(TCCR0,CS02);
     994:	83 b7       	in	r24, 0x33	; 51
     996:	8b 7f       	andi	r24, 0xFB	; 251
     998:	83 bf       	out	0x33, r24	; 51
		clr_bit(TCCR0,CS01);
     99a:	83 b7       	in	r24, 0x33	; 51
     99c:	8d 7f       	andi	r24, 0xFD	; 253
     99e:	83 bf       	out	0x33, r24	; 51
		set_bit(TCCR0,CS00);
     9a0:	83 b7       	in	r24, 0x33	; 51
     9a2:	81 60       	ori	r24, 0x01	; 1
     9a4:	83 bf       	out	0x33, r24	; 51
/*                     Functions Implementation                           */
/**************************************************************************/

pwm_error_t  mcal_pwm_initialization(pwm_channel_t* channel)
{
	pwm_error_t error = PWM_STATE_SUCCESS;
     9a6:	80 e0       	ldi	r24, 0x00	; 0
		/*choose clock no pre scalling option*/
		clr_bit(TCCR0,CS02);
		clr_bit(TCCR0,CS01);
		set_bit(TCCR0,CS00);

		break;
     9a8:	08 95       	ret
	}

	case CHANNEL_2_PIN :
	{
		/* choosing mode of operation fast pwm */
		set_bit(TCCR1A,WGM11);
     9aa:	8f b5       	in	r24, 0x2f	; 47
     9ac:	82 60       	ori	r24, 0x02	; 2
     9ae:	8f bd       	out	0x2f, r24	; 47
		set_bit(TCCR1A,WGM10);
     9b0:	8f b5       	in	r24, 0x2f	; 47
     9b2:	81 60       	ori	r24, 0x01	; 1
     9b4:	8f bd       	out	0x2f, r24	; 47

		/*choose non inverting mode of pwm */
		set_bit(TCCR1A,COM1A1);
     9b6:	8f b5       	in	r24, 0x2f	; 47
     9b8:	80 68       	ori	r24, 0x80	; 128
     9ba:	8f bd       	out	0x2f, r24	; 47
		clr_bit(TCCR1A,COM1A0);
     9bc:	8f b5       	in	r24, 0x2f	; 47
     9be:	8f 7b       	andi	r24, 0xBF	; 191
     9c0:	8f bd       	out	0x2f, r24	; 47

		/*choose clock no pre scalling option*/
		clr_bit(TCCR1B,CS12);
     9c2:	8e b5       	in	r24, 0x2e	; 46
     9c4:	8b 7f       	andi	r24, 0xFB	; 251
     9c6:	8e bd       	out	0x2e, r24	; 46
		clr_bit(TCCR1B,CS11);
     9c8:	8e b5       	in	r24, 0x2e	; 46
     9ca:	8d 7f       	andi	r24, 0xFD	; 253
     9cc:	8e bd       	out	0x2e, r24	; 46
		set_bit(TCCR1B,CS10);
     9ce:	8e b5       	in	r24, 0x2e	; 46
     9d0:	81 60       	ori	r24, 0x01	; 1
     9d2:	8e bd       	out	0x2e, r24	; 46
/*                     Functions Implementation                           */
/**************************************************************************/

pwm_error_t  mcal_pwm_initialization(pwm_channel_t* channel)
{
	pwm_error_t error = PWM_STATE_SUCCESS;
     9d4:	80 e0       	ldi	r24, 0x00	; 0
		/*choose clock no pre scalling option*/
		clr_bit(TCCR1B,CS12);
		clr_bit(TCCR1B,CS11);
		set_bit(TCCR1B,CS10);

		break;
     9d6:	08 95       	ret
	}

	case CHANNEL_3_PIN :
	{
		/* choosing mode of operation fast pwm */
		set_bit(TCCR1A,WGM11);
     9d8:	8f b5       	in	r24, 0x2f	; 47
     9da:	82 60       	ori	r24, 0x02	; 2
     9dc:	8f bd       	out	0x2f, r24	; 47
		set_bit(TCCR1A,WGM10);
     9de:	8f b5       	in	r24, 0x2f	; 47
     9e0:	81 60       	ori	r24, 0x01	; 1
     9e2:	8f bd       	out	0x2f, r24	; 47

		/*choose non inverting mode of pwm */
		set_bit(TCCR1A,COM1B1);
     9e4:	8f b5       	in	r24, 0x2f	; 47
     9e6:	80 62       	ori	r24, 0x20	; 32
     9e8:	8f bd       	out	0x2f, r24	; 47
		clr_bit(TCCR1A,COM1B0);
     9ea:	8f b5       	in	r24, 0x2f	; 47
     9ec:	8f 7e       	andi	r24, 0xEF	; 239
     9ee:	8f bd       	out	0x2f, r24	; 47

		/*choose clock no pre scalling option*/
		clr_bit(TCCR1B,CS12);
     9f0:	8e b5       	in	r24, 0x2e	; 46
     9f2:	8b 7f       	andi	r24, 0xFB	; 251
     9f4:	8e bd       	out	0x2e, r24	; 46
		clr_bit(TCCR1B,CS11);
     9f6:	8e b5       	in	r24, 0x2e	; 46
     9f8:	8d 7f       	andi	r24, 0xFD	; 253
     9fa:	8e bd       	out	0x2e, r24	; 46
		set_bit(TCCR1B,CS10);
     9fc:	8e b5       	in	r24, 0x2e	; 46
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	8e bd       	out	0x2e, r24	; 46
/*                     Functions Implementation                           */
/**************************************************************************/

pwm_error_t  mcal_pwm_initialization(pwm_channel_t* channel)
{
	pwm_error_t error = PWM_STATE_SUCCESS;
     a02:	80 e0       	ldi	r24, 0x00	; 0
		/*choose clock no pre scalling option*/
		clr_bit(TCCR1B,CS12);
		clr_bit(TCCR1B,CS11);
		set_bit(TCCR1B,CS10);

		break;
     a04:	08 95       	ret
	}

	case CHANNEL_4_PIN :
	{
		/* choosing mode of operation fast pwm */
		set_bit(TCCR2,WGM20);
     a06:	85 b5       	in	r24, 0x25	; 37
     a08:	80 64       	ori	r24, 0x40	; 64
     a0a:	85 bd       	out	0x25, r24	; 37
		set_bit(TCCR2,WGM21);
     a0c:	85 b5       	in	r24, 0x25	; 37
     a0e:	88 60       	ori	r24, 0x08	; 8
     a10:	85 bd       	out	0x25, r24	; 37

		/*choose non inverting mode of pwm */
		set_bit(TCCR2,COM21);
     a12:	85 b5       	in	r24, 0x25	; 37
     a14:	80 62       	ori	r24, 0x20	; 32
     a16:	85 bd       	out	0x25, r24	; 37
		clr_bit(TCCR2,COM20);
     a18:	85 b5       	in	r24, 0x25	; 37
     a1a:	8f 7e       	andi	r24, 0xEF	; 239
     a1c:	85 bd       	out	0x25, r24	; 37

		/*choose clock no pre scalling option*/
		clr_bit(TCCR2,CS22);
     a1e:	85 b5       	in	r24, 0x25	; 37
     a20:	8b 7f       	andi	r24, 0xFB	; 251
     a22:	85 bd       	out	0x25, r24	; 37
		clr_bit(TCCR2,CS21);
     a24:	85 b5       	in	r24, 0x25	; 37
     a26:	8d 7f       	andi	r24, 0xFD	; 253
     a28:	85 bd       	out	0x25, r24	; 37
		set_bit(TCCR2,CS20);
     a2a:	85 b5       	in	r24, 0x25	; 37
     a2c:	81 60       	ori	r24, 0x01	; 1
     a2e:	85 bd       	out	0x25, r24	; 37
/*                     Functions Implementation                           */
/**************************************************************************/

pwm_error_t  mcal_pwm_initialization(pwm_channel_t* channel)
{
	pwm_error_t error = PWM_STATE_SUCCESS;
     a30:	80 e0       	ldi	r24, 0x00	; 0
		/*choose clock no pre scalling option*/
		clr_bit(TCCR2,CS22);
		clr_bit(TCCR2,CS21);
		set_bit(TCCR2,CS20);

		break;
     a32:	08 95       	ret
	}

	default:{
		error = PWM_STATE_INVALID_CHANNEL;
     a34:	82 e0       	ldi	r24, 0x02	; 2
		break;
	}
	}
	return error;
}
     a36:	08 95       	ret

00000a38 <getPreScaler>:
/*                     Static Functions Implementation                   */
/*************************************************************************/
static double getPreScaler(timer_preScaler_t preScaller)
{
	double value = 0;
	switch(preScaller)
     a38:	83 30       	cpi	r24, 0x03	; 3
     a3a:	81 f0       	breq	.+32     	; 0xa5c <getPreScaler+0x24>
     a3c:	28 f4       	brcc	.+10     	; 0xa48 <getPreScaler+0x10>
     a3e:	81 30       	cpi	r24, 0x01	; 1
     a40:	41 f0       	breq	.+16     	; 0xa52 <getPreScaler+0x1a>
     a42:	82 30       	cpi	r24, 0x02	; 2
     a44:	f1 f0       	breq	.+60     	; 0xa82 <getPreScaler+0x4a>
     a46:	19 c0       	rjmp	.+50     	; 0xa7a <getPreScaler+0x42>
     a48:	84 30       	cpi	r24, 0x04	; 4
     a4a:	69 f0       	breq	.+26     	; 0xa66 <getPreScaler+0x2e>
     a4c:	85 30       	cpi	r24, 0x05	; 5
     a4e:	81 f0       	breq	.+32     	; 0xa70 <getPreScaler+0x38>
     a50:	14 c0       	rjmp	.+40     	; 0xa7a <getPreScaler+0x42>
	{
	case F_CPU_CLOCK :
	{
		value = 1;
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	80 e8       	ldi	r24, 0x80	; 128
     a58:	9f e3       	ldi	r25, 0x3F	; 63
     a5a:	08 95       	ret
		value = 8;
		break;
	}
	case F_CPU_64 :
	{
		value = 64;
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	80 e8       	ldi	r24, 0x80	; 128
     a62:	92 e4       	ldi	r25, 0x42	; 66
		break;
     a64:	08 95       	ret
	}
	case F_CPU_256 :
	{
		value = 256;
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 e8       	ldi	r24, 0x80	; 128
     a6c:	93 e4       	ldi	r25, 0x43	; 67
		break;
     a6e:	08 95       	ret
	}
	case F_CPU_1024 :
	{
		value = 1024;
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	80 e8       	ldi	r24, 0x80	; 128
     a76:	94 e4       	ldi	r25, 0x44	; 68
		break;
     a78:	08 95       	ret
	}
	default:
	{
		value = 0 ;
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	cb 01       	movw	r24, r22
     a80:	08 95       	ret
		value = 1;
		break;
	}
	case F_CPU_8 :
	{
		value = 8;
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	91 e4       	ldi	r25, 0x41	; 65
		value = 0 ;
	}
	}

	return value;
}
     a8a:	08 95       	ret

00000a8c <mcal_timer_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
     a8c:	4f 92       	push	r4
     a8e:	5f 92       	push	r5
     a90:	6f 92       	push	r6
     a92:	7f 92       	push	r7
     a94:	cf 92       	push	r12
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	8c 01       	movw	r16, r24
	timer_error_t error = TIMER_STATE_SUCCESS;

	setGlobalInterrupt;
     aa4:	8f b7       	in	r24, 0x3f	; 63
     aa6:	80 68       	ori	r24, 0x80	; 128
     aa8:	8f bf       	out	0x3f, r24	; 63

	double preScallerValue = (double)getPreScaler(timer->preScaler);
     aaa:	f8 01       	movw	r30, r16
     aac:	c0 81       	ld	r28, Z
     aae:	8c 2f       	mov	r24, r28
     ab0:	0e 94 1c 05 	call	0xa38	; 0xa38 <getPreScaler>
     ab4:	6b 01       	movw	r12, r22
     ab6:	7c 01       	movw	r14, r24
	double resolution = (double)preScallerValue / (double)F_CPU;
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	34 e2       	ldi	r19, 0x24	; 36
     abc:	44 ef       	ldi	r20, 0xF4	; 244
     abe:	5a e4       	ldi	r21, 0x4A	; 74
     ac0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__divsf3>
	double registerMaxTime = 0;

	switch (timer->timer_number)
     ac4:	f8 01       	movw	r30, r16
     ac6:	21 81       	ldd	r18, Z+1	; 0x01
     ac8:	23 30       	cpi	r18, 0x03	; 3
     aca:	18 f4       	brcc	.+6      	; 0xad2 <mcal_timer_init+0x46>
     acc:	21 30       	cpi	r18, 0x01	; 1
     ace:	28 f0       	brcs	.+10     	; 0xada <mcal_timer_init+0x4e>
     ad0:	50 c0       	rjmp	.+160    	; 0xb72 <mcal_timer_init+0xe6>
     ad2:	23 30       	cpi	r18, 0x03	; 3
     ad4:	09 f4       	brne	.+2      	; 0xad8 <mcal_timer_init+0x4c>
     ad6:	9c c0       	rjmp	.+312    	; 0xc10 <mcal_timer_init+0x184>
     ad8:	e5 c0       	rjmp	.+458    	; 0xca4 <mcal_timer_init+0x218>
	{
	case TIMER0:
	{
		reg_mask_write(TCCR0,0xF8,timer->preScaler);
     ada:	23 b7       	in	r18, 0x33	; 51
     adc:	28 7f       	andi	r18, 0xF8	; 248
     ade:	c2 2b       	or	r28, r18
     ae0:	c3 bf       	out	0x33, r28	; 51

		registerMaxTime = resolution * (double)256;
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e8       	ldi	r20, 0x80	; 128
     ae8:	53 e4       	ldi	r21, 0x43	; 67
     aea:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__mulsf3>

		if (TIMER_NORMAL_MODE == timer->mode)
     aee:	f8 01       	movw	r30, r16
     af0:	22 81       	ldd	r18, Z+2	; 0x02
     af2:	21 11       	cpse	r18, r1
     af4:	17 c0       	rjmp	.+46     	; 0xb24 <mcal_timer_init+0x98>
		{
			// Set Timer initial value
			register(TCNT0) = 0;
     af6:	12 be       	out	0x32, r1	; 50
			/* configure the timer
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 */
			set_bit(TCCR0, FOC0);
     af8:	23 b7       	in	r18, 0x33	; 51
     afa:	20 68       	ori	r18, 0x80	; 128
     afc:	23 bf       	out	0x33, r18	; 51

			/* attach overflow value to timer so we can use it in callback */
			timer->overflow = timer->tick_seconds / (double)registerMaxTime;
     afe:	c3 80       	ldd	r12, Z+3	; 0x03
     b00:	d4 80       	ldd	r13, Z+4	; 0x04
     b02:	e5 80       	ldd	r14, Z+5	; 0x05
     b04:	f6 80       	ldd	r15, Z+6	; 0x06
     b06:	9b 01       	movw	r18, r22
     b08:	ac 01       	movw	r20, r24
     b0a:	c7 01       	movw	r24, r14
     b0c:	b6 01       	movw	r22, r12
     b0e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__divsf3>
     b12:	f8 01       	movw	r30, r16
     b14:	67 83       	std	Z+7, r22	; 0x07
     b16:	70 87       	std	Z+8, r23	; 0x08
     b18:	81 87       	std	Z+9, r24	; 0x09
     b1a:	92 87       	std	Z+10, r25	; 0x0a
			set_timer_overflow(timer->overflow);
     b1c:	0e 94 10 07 	call	0xe20	; 0xe20 <set_timer_overflow>
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	cd c0       	rjmp	.+410    	; 0xcbe <mcal_timer_init+0x232>
			/* attach overflow value to timer so we can use it in callback */
			timer->overflow = timer->tick_seconds / (double)registerMaxTime;
			set_timer_overflow(timer->overflow);

		}
		else if ( TIMER_CTC_MODE == timer->mode)
     b24:	21 30       	cpi	r18, 0x01	; 1
     b26:	09 f0       	breq	.+2      	; 0xb2a <mcal_timer_init+0x9e>
     b28:	bf c0       	rjmp	.+382    	; 0xca8 <mcal_timer_init+0x21c>
		{
			// Set Timer initial value
			register(TCNT0) = 0;
     b2a:	12 be       	out	0x32, r1	; 50
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 so COM00=0 & COM01=0
			 */

			set_bit(TCCR0, FOC0);
     b2c:	23 b7       	in	r18, 0x33	; 51
     b2e:	20 68       	ori	r18, 0x80	; 128
     b30:	23 bf       	out	0x33, r18	; 51
			set_bit(TCCR0, WGM01);
     b32:	23 b7       	in	r18, 0x33	; 51
     b34:	28 60       	ori	r18, 0x08	; 8
     b36:	23 bf       	out	0x33, r18	; 51

			/* if the time we need to wait can be used with 8 bit timer in CTC mode
			 * meaning that if the value of seconds to wait converted to digital number
			 * less that 256 with the given pre-scaller */
			if (timer->tick_seconds < registerMaxTime)
     b38:	f8 01       	movw	r30, r16
     b3a:	43 80       	ldd	r4, Z+3	; 0x03
     b3c:	54 80       	ldd	r5, Z+4	; 0x04
     b3e:	65 80       	ldd	r6, Z+5	; 0x05
     b40:	76 80       	ldd	r7, Z+6	; 0x06
     b42:	a3 01       	movw	r20, r6
     b44:	92 01       	movw	r18, r4
     b46:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__gesf2>
     b4a:	18 16       	cp	r1, r24
     b4c:	0c f0       	brlt	.+2      	; 0xb50 <mcal_timer_init+0xc4>
     b4e:	ae c0       	rjmp	.+348    	; 0xcac <mcal_timer_init+0x220>
			{
				// Set Compare Value
				register(OCR0) = ((double)timer->tick_seconds * (double)F_CPU) / (double)preScallerValue;
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	34 e2       	ldi	r19, 0x24	; 36
     b54:	44 ef       	ldi	r20, 0xF4	; 244
     b56:	5a e4       	ldi	r21, 0x4A	; 74
     b58:	c3 01       	movw	r24, r6
     b5a:	b2 01       	movw	r22, r4
     b5c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__mulsf3>
     b60:	a7 01       	movw	r20, r14
     b62:	96 01       	movw	r18, r12
     b64:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__divsf3>
     b68:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fixunssfsi>
     b6c:	6c bf       	out	0x3c, r22	; 60
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	a6 c0       	rjmp	.+332    	; 0xcbe <mcal_timer_init+0x232>
		break;
	}
	case TIMER1_CHANNEL_1:
	case TIMER1_CHANNEL_2:
	{
		reg_mask_write(TCCR1B,0xF8,timer->preScaler);
     b72:	2e b5       	in	r18, 0x2e	; 46
     b74:	28 7f       	andi	r18, 0xF8	; 248
     b76:	c2 2b       	or	r28, r18
     b78:	ce bd       	out	0x2e, r28	; 46

		registerMaxTime = resolution * (double)65536;
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	40 e8       	ldi	r20, 0x80	; 128
     b80:	57 e4       	ldi	r21, 0x47	; 71
     b82:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__mulsf3>

		if (TIMER_NORMAL_MODE == timer->mode)
     b86:	f8 01       	movw	r30, r16
     b88:	22 81       	ldd	r18, Z+2	; 0x02
     b8a:	21 11       	cpse	r18, r1
     b8c:	1a c0       	rjmp	.+52     	; 0xbc2 <mcal_timer_init+0x136>
		{
			// Set Timer initial value to 0
			register(TCNT1) = 0;
     b8e:	1c bc       	out	0x2c, r1	; 44
			 *  Normal Mode WGM13=0 & WGM12=0 & WGM11=0 & WGM10=0
			 *  Normal Mode FOC1A=1 & FOC1B=1
			 *  Normal Mode COM1A1=0 & COM1A0=0
			 *  Normal Mode COM1B1=0 & COM1B0=0
			 */
			set_bit(TCCR1A, FOC1A);
     b90:	2f b5       	in	r18, 0x2f	; 47
     b92:	28 60       	ori	r18, 0x08	; 8
     b94:	2f bd       	out	0x2f, r18	; 47
			set_bit(TCCR1A, FOC1B);
     b96:	2f b5       	in	r18, 0x2f	; 47
     b98:	24 60       	ori	r18, 0x04	; 4
     b9a:	2f bd       	out	0x2f, r18	; 47

			/* attach overflow value to timer so we can use it in callback */
			timer->overflow = timer->tick_seconds / registerMaxTime;
     b9c:	c3 80       	ldd	r12, Z+3	; 0x03
     b9e:	d4 80       	ldd	r13, Z+4	; 0x04
     ba0:	e5 80       	ldd	r14, Z+5	; 0x05
     ba2:	f6 80       	ldd	r15, Z+6	; 0x06
     ba4:	9b 01       	movw	r18, r22
     ba6:	ac 01       	movw	r20, r24
     ba8:	c7 01       	movw	r24, r14
     baa:	b6 01       	movw	r22, r12
     bac:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__divsf3>
     bb0:	f8 01       	movw	r30, r16
     bb2:	67 83       	std	Z+7, r22	; 0x07
     bb4:	70 87       	std	Z+8, r23	; 0x08
     bb6:	81 87       	std	Z+9, r24	; 0x09
     bb8:	92 87       	std	Z+10, r25	; 0x0a
			set_timer_overflow(timer->overflow);
     bba:	0e 94 10 07 	call	0xe20	; 0xe20 <set_timer_overflow>
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	7e c0       	rjmp	.+252    	; 0xcbe <mcal_timer_init+0x232>

			/* attach overflow value to timer so we can use it in callback */
			timer->overflow = timer->tick_seconds / registerMaxTime;
			set_timer_overflow(timer->overflow);
		}
		else if ( TIMER_CTC_MODE == timer->mode)
     bc2:	21 30       	cpi	r18, 0x01	; 1
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <mcal_timer_init+0x13c>
     bc6:	74 c0       	rjmp	.+232    	; 0xcb0 <mcal_timer_init+0x224>
		{
			// Set Timer initial value
			register(TCNT1)= 0;
     bc8:	1c bc       	out	0x2c, r1	; 44

			/* Configure timer0 control register
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM13=0 &WGM12=1 & WGM11=0 & WGM10=0
			 */
			set_bit(TCCR1A, FOC1A);
     bca:	2f b5       	in	r18, 0x2f	; 47
     bcc:	28 60       	ori	r18, 0x08	; 8
     bce:	2f bd       	out	0x2f, r18	; 47
			set_bit(TCCR1A, WGM12);
     bd0:	2f b5       	in	r18, 0x2f	; 47
     bd2:	28 60       	ori	r18, 0x08	; 8
     bd4:	2f bd       	out	0x2f, r18	; 47

			/* if the time we need to wait can be used with 8 bit timer in CTC mode
			 * meaning that if the value of seconds to wait converted to digital number
			 * less that 256 with the given pre-scaller */
			if (timer->tick_seconds < registerMaxTime)
     bd6:	f8 01       	movw	r30, r16
     bd8:	43 80       	ldd	r4, Z+3	; 0x03
     bda:	54 80       	ldd	r5, Z+4	; 0x04
     bdc:	65 80       	ldd	r6, Z+5	; 0x05
     bde:	76 80       	ldd	r7, Z+6	; 0x06
     be0:	a3 01       	movw	r20, r6
     be2:	92 01       	movw	r18, r4
     be4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__gesf2>
     be8:	18 16       	cp	r1, r24
     bea:	0c f0       	brlt	.+2      	; 0xbee <mcal_timer_init+0x162>
     bec:	63 c0       	rjmp	.+198    	; 0xcb4 <mcal_timer_init+0x228>
			{
				// Set Compare Value
				register(OCR1A) = ((double)timer->tick_seconds * (double)F_CPU) / (double)preScallerValue;
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	34 e2       	ldi	r19, 0x24	; 36
     bf2:	44 ef       	ldi	r20, 0xF4	; 244
     bf4:	5a e4       	ldi	r21, 0x4A	; 74
     bf6:	c3 01       	movw	r24, r6
     bf8:	b2 01       	movw	r22, r4
     bfa:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__mulsf3>
     bfe:	a7 01       	movw	r20, r14
     c00:	96 01       	movw	r18, r12
     c02:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__divsf3>
     c06:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fixunssfsi>
     c0a:	6a bd       	out	0x2a, r22	; 42
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	57 c0       	rjmp	.+174    	; 0xcbe <mcal_timer_init+0x232>
		}
		break;
	}
	case TIMER2:
	{
		reg_mask_write(TCCR2,0xF8,timer->preScaler);
     c10:	25 b5       	in	r18, 0x25	; 37
     c12:	28 7f       	andi	r18, 0xF8	; 248
     c14:	c2 2b       	or	r28, r18
     c16:	c5 bd       	out	0x25, r28	; 37

		registerMaxTime = resolution * (double)256;
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e8       	ldi	r20, 0x80	; 128
     c1e:	53 e4       	ldi	r21, 0x43	; 67
     c20:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__mulsf3>

		if(TIMER_NORMAL_MODE == timer->mode)
     c24:	f8 01       	movw	r30, r16
     c26:	22 81       	ldd	r18, Z+2	; 0x02
     c28:	21 11       	cpse	r18, r1
     c2a:	17 c0       	rjmp	.+46     	; 0xc5a <mcal_timer_init+0x1ce>
		{
			// Set Timer initial value
			register(TCNT2) = 0;
     c2c:	14 bc       	out	0x24, r1	; 36
			/* configure the timer
			 * 1. Non PWM mode FOC2=1
			 * 2. Normal Mode WGM21=0 & WGM20=0
			 * 3. Normal Mode COM20=0 & COM21=0
			 */
			set_bit(TCCR2, FOC2);
     c2e:	25 b5       	in	r18, 0x25	; 37
     c30:	20 68       	ori	r18, 0x80	; 128
     c32:	25 bd       	out	0x25, r18	; 37

			/* attach overflow value to timer so we can use it in callback */
			timer->overflow = timer->tick_seconds / registerMaxTime;
     c34:	c3 80       	ldd	r12, Z+3	; 0x03
     c36:	d4 80       	ldd	r13, Z+4	; 0x04
     c38:	e5 80       	ldd	r14, Z+5	; 0x05
     c3a:	f6 80       	ldd	r15, Z+6	; 0x06
     c3c:	9b 01       	movw	r18, r22
     c3e:	ac 01       	movw	r20, r24
     c40:	c7 01       	movw	r24, r14
     c42:	b6 01       	movw	r22, r12
     c44:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__divsf3>
     c48:	f8 01       	movw	r30, r16
     c4a:	67 83       	std	Z+7, r22	; 0x07
     c4c:	70 87       	std	Z+8, r23	; 0x08
     c4e:	81 87       	std	Z+9, r24	; 0x09
     c50:	92 87       	std	Z+10, r25	; 0x0a
			set_timer_overflow(timer->overflow);
     c52:	0e 94 10 07 	call	0xe20	; 0xe20 <set_timer_overflow>
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	32 c0       	rjmp	.+100    	; 0xcbe <mcal_timer_init+0x232>
			/* attach overflow value to timer so we can use it in callback */
			timer->overflow = timer->tick_seconds / registerMaxTime;
			set_timer_overflow(timer->overflow);

		}
		else if ( TIMER_CTC_MODE == timer->mode)
     c5a:	21 30       	cpi	r18, 0x01	; 1
     c5c:	69 f5       	brne	.+90     	; 0xcb8 <mcal_timer_init+0x22c>
		{
			// Set Timer initial value
			register(TCNT2) = 0;
     c5e:	14 bc       	out	0x24, r1	; 36
			/* Configure timer0 control register
			 * 1. Non PWM mode FOC2=1
			 * 2. CTC Mode WGM21=1 & WGM20=0
			 * 3. No need for OC0 so COM20=0 & COM21=0
			 */
			set_bit(TCCR2, FOC2);
     c60:	25 b5       	in	r18, 0x25	; 37
     c62:	20 68       	ori	r18, 0x80	; 128
     c64:	25 bd       	out	0x25, r18	; 37
			set_bit(TCCR2, WGM21);
     c66:	25 b5       	in	r18, 0x25	; 37
     c68:	28 60       	ori	r18, 0x08	; 8
     c6a:	25 bd       	out	0x25, r18	; 37

			/* if the time we need to wait can be used with 8 bit timer in CTC mode
			 * meaning that if the value of seconds to wait converted to digital number
			 * less that 256 with the given pre-scaller */
			if (timer->tick_seconds < registerMaxTime)
     c6c:	f8 01       	movw	r30, r16
     c6e:	43 80       	ldd	r4, Z+3	; 0x03
     c70:	54 80       	ldd	r5, Z+4	; 0x04
     c72:	65 80       	ldd	r6, Z+5	; 0x05
     c74:	76 80       	ldd	r7, Z+6	; 0x06
     c76:	a3 01       	movw	r20, r6
     c78:	92 01       	movw	r18, r4
     c7a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__gesf2>
     c7e:	18 16       	cp	r1, r24
     c80:	ec f4       	brge	.+58     	; 0xcbc <mcal_timer_init+0x230>
			{
				// Set Compare Value
				register(OCR2) = ((double)timer->tick_seconds * (double)F_CPU) / (double)preScallerValue;
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	34 e2       	ldi	r19, 0x24	; 36
     c86:	44 ef       	ldi	r20, 0xF4	; 244
     c88:	5a e4       	ldi	r21, 0x4A	; 74
     c8a:	c3 01       	movw	r24, r6
     c8c:	b2 01       	movw	r22, r4
     c8e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__mulsf3>
     c92:	a7 01       	movw	r20, r14
     c94:	96 01       	movw	r18, r12
     c96:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__divsf3>
     c9a:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fixunssfsi>
     c9e:	63 bd       	out	0x23, r22	; 35
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	0d c0       	rjmp	.+26     	; 0xcbe <mcal_timer_init+0x232>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	0b c0       	rjmp	.+22     	; 0xcbe <mcal_timer_init+0x232>
				error = TIMER_STATE_INVALID_ARGUMENT;
			}
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <mcal_timer_init+0x232>
				// Set Compare Value
				register(OCR0) = ((double)timer->tick_seconds * (double)F_CPU) / (double)preScallerValue;
			}
			else
			{
				error = TIMER_STATE_INVALID_ARGUMENT;
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	07 c0       	rjmp	.+14     	; 0xcbe <mcal_timer_init+0x232>
				error = TIMER_STATE_INVALID_ARGUMENT;
			}
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <mcal_timer_init+0x232>
				// Set Compare Value
				register(OCR1A) = ((double)timer->tick_seconds * (double)F_CPU) / (double)preScallerValue;
			}
			else
			{
				error = TIMER_STATE_INVALID_ARGUMENT;
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <mcal_timer_init+0x232>
			}

		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <mcal_timer_init+0x232>
				// Set Compare Value
				register(OCR2) = ((double)timer->tick_seconds * (double)F_CPU) / (double)preScallerValue;
			}
			else
			{
				error = TIMER_STATE_INVALID_ARGUMENT;
     cbc:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
	}
	}
	return error;
}
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	7f 90       	pop	r7
     cce:	6f 90       	pop	r6
     cd0:	5f 90       	pop	r5
     cd2:	4f 90       	pop	r4
     cd4:	08 95       	ret

00000cd6 <mcal_timer_start>:


timer_error_t mcal_timer_start(timer_config_t* timer)
{
     cd6:	fc 01       	movw	r30, r24
	timer_error_t error = TIMER_STATE_SUCCESS;

	switch (timer->timer_number)
     cd8:	91 81       	ldd	r25, Z+1	; 0x01
     cda:	91 30       	cpi	r25, 0x01	; 1
     cdc:	a9 f0       	breq	.+42     	; 0xd08 <mcal_timer_start+0x32>
     cde:	28 f0       	brcs	.+10     	; 0xcea <mcal_timer_start+0x14>
     ce0:	92 30       	cpi	r25, 0x02	; 2
     ce2:	09 f1       	breq	.+66     	; 0xd26 <mcal_timer_start+0x50>
     ce4:	93 30       	cpi	r25, 0x03	; 3
     ce6:	71 f1       	breq	.+92     	; 0xd44 <mcal_timer_start+0x6e>
     ce8:	3c c0       	rjmp	.+120    	; 0xd62 <mcal_timer_start+0x8c>
	{
	case TIMER0:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	81 11       	cpse	r24, r1
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <mcal_timer_start+0x24>
		{
			// Enable Timer0 Overflow Interrupt
			set_bit(TIMSK,TOIE0);
     cf0:	89 b7       	in	r24, 0x39	; 57
     cf2:	81 60       	ori	r24, 0x01	; 1
     cf4:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer0 Overflow Interrupt
			set_bit(TIMSK,TOIE0);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	a1 f5       	brne	.+104    	; 0xd66 <mcal_timer_start+0x90>
		{
			// Enable Timer0 Compare Interrupt
			set_bit(TIMSK, OCIE0);
     cfe:	89 b7       	in	r24, 0x39	; 57
     d00:	82 60       	ori	r24, 0x02	; 2
     d02:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	08 95       	ret
		}
		break;
	}
	case TIMER1_CHANNEL_1:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	81 11       	cpse	r24, r1
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <mcal_timer_start+0x42>
		{
			// Enable Timer1 channel 1 Overflow Interrupt
			set_bit(TIMSK,TOIE1);
     d0e:	89 b7       	in	r24, 0x39	; 57
     d10:	84 60       	ori	r24, 0x04	; 4
     d12:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer1 channel 1 Overflow Interrupt
			set_bit(TIMSK,TOIE1);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	39 f5       	brne	.+78     	; 0xd6a <mcal_timer_start+0x94>
		{
			// Enable Timer1 channel 1 Compare Interrupt
			set_bit(TIMSK, OCIE1A);
     d1c:	89 b7       	in	r24, 0x39	; 57
     d1e:	80 61       	ori	r24, 0x10	; 16
     d20:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	08 95       	ret
		}
		break;
	}
	case TIMER1_CHANNEL_2:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	81 11       	cpse	r24, r1
     d2a:	05 c0       	rjmp	.+10     	; 0xd36 <mcal_timer_start+0x60>
		{
			// Enable Timer1 channel 2 Overflow Interrupt
			set_bit(TIMSK,TOIE2);
     d2c:	89 b7       	in	r24, 0x39	; 57
     d2e:	80 64       	ori	r24, 0x40	; 64
     d30:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer1 channel 2 Overflow Interrupt
			set_bit(TIMSK,TOIE2);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	d1 f4       	brne	.+52     	; 0xd6e <mcal_timer_start+0x98>
		{
			// Enable Timer1 channel 2 Compare Interrupt
			set_bit(TIMSK, OCIE1B);
     d3a:	89 b7       	in	r24, 0x39	; 57
     d3c:	88 60       	ori	r24, 0x08	; 8
     d3e:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	08 95       	ret
		}
		break;
	}
	case TIMER2:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	81 11       	cpse	r24, r1
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <mcal_timer_start+0x7e>
		{

			// Enable Timer2 Overflow Interrupt
			set_bit(TIMSK,TOIE2);
     d4a:	89 b7       	in	r24, 0x39	; 57
     d4c:	80 64       	ori	r24, 0x40	; 64
     d4e:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	08 95       	ret
		{

			// Enable Timer2 Overflow Interrupt
			set_bit(TIMSK,TOIE2);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	69 f4       	brne	.+26     	; 0xd72 <mcal_timer_start+0x9c>
		{
			// Enable Timer2 Compare Interrupt
			set_bit(TIMSK, OCIE2);
     d58:	89 b7       	in	r24, 0x39	; 57
     d5a:	80 68       	ori	r24, 0x80	; 128
     d5c:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	08 95       	ret
		break;
	}

	default :
	{
		error = TIMER_STATE_INVALID_TIMER;
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	08 95       	ret
			// Enable Timer0 Compare Interrupt
			set_bit(TIMSK, OCIE0);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	08 95       	ret
			// Enable Timer1 channel 1 Compare Interrupt
			set_bit(TIMSK, OCIE1A);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	08 95       	ret
			// Enable Timer1 channel 2 Compare Interrupt
			set_bit(TIMSK, OCIE1B);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	08 95       	ret
			// Enable Timer2 Compare Interrupt
			set_bit(TIMSK, OCIE2);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     d72:	83 e0       	ldi	r24, 0x03	; 3
		break;
	}
	}

	return error;
}
     d74:	08 95       	ret

00000d76 <mcal_timer_stop>:

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
     d76:	fc 01       	movw	r30, r24
	timer_error_t error = TIMER_STATE_SUCCESS;

	switch (timer->timer_number)
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	91 30       	cpi	r25, 0x01	; 1
     d7c:	a9 f0       	breq	.+42     	; 0xda8 <mcal_timer_stop+0x32>
     d7e:	28 f0       	brcs	.+10     	; 0xd8a <mcal_timer_stop+0x14>
     d80:	92 30       	cpi	r25, 0x02	; 2
     d82:	09 f1       	breq	.+66     	; 0xdc6 <mcal_timer_stop+0x50>
     d84:	93 30       	cpi	r25, 0x03	; 3
     d86:	71 f1       	breq	.+92     	; 0xde4 <mcal_timer_stop+0x6e>
     d88:	3c c0       	rjmp	.+120    	; 0xe02 <mcal_timer_stop+0x8c>
	{
	case TIMER0:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     d8a:	82 81       	ldd	r24, Z+2	; 0x02
     d8c:	81 11       	cpse	r24, r1
     d8e:	05 c0       	rjmp	.+10     	; 0xd9a <mcal_timer_stop+0x24>
		{
			// Enable Timer0 Overflow Interrupt
			clr_bit(TIMSK,TOIE0);
     d90:	89 b7       	in	r24, 0x39	; 57
     d92:	8e 7f       	andi	r24, 0xFE	; 254
     d94:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer0 Overflow Interrupt
			clr_bit(TIMSK,TOIE0);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	a1 f5       	brne	.+104    	; 0xe06 <mcal_timer_stop+0x90>
		{
			// Enable Timer0 Compare Interrupt
			clr_bit(TIMSK, OCIE0);
     d9e:	89 b7       	in	r24, 0x39	; 57
     da0:	8d 7f       	andi	r24, 0xFD	; 253
     da2:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	08 95       	ret
		}
		break;
	}
	case TIMER1_CHANNEL_1:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	81 11       	cpse	r24, r1
     dac:	05 c0       	rjmp	.+10     	; 0xdb8 <mcal_timer_stop+0x42>
		{
			// Enable Timer1 channel 1 Overflow Interrupt
			clr_bit(TIMSK,TOIE1);
     dae:	89 b7       	in	r24, 0x39	; 57
     db0:	8b 7f       	andi	r24, 0xFB	; 251
     db2:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer1 channel 1 Overflow Interrupt
			clr_bit(TIMSK,TOIE1);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	39 f5       	brne	.+78     	; 0xe0a <mcal_timer_stop+0x94>
		{
			// Enable Timer1 channel 1 Compare Interrupt
			clr_bit(TIMSK, OCIE1A);
     dbc:	89 b7       	in	r24, 0x39	; 57
     dbe:	8f 7e       	andi	r24, 0xEF	; 239
     dc0:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	08 95       	ret
		}
		break;
	}
	case TIMER1_CHANNEL_2:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	81 11       	cpse	r24, r1
     dca:	05 c0       	rjmp	.+10     	; 0xdd6 <mcal_timer_stop+0x60>
		{
			// Enable Timer1 channel 2 Overflow Interrupt
			set_bit(TIMSK,TOIE2);
     dcc:	89 b7       	in	r24, 0x39	; 57
     dce:	80 64       	ori	r24, 0x40	; 64
     dd0:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer1 channel 2 Overflow Interrupt
			set_bit(TIMSK,TOIE2);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	d1 f4       	brne	.+52     	; 0xe0e <mcal_timer_stop+0x98>
		{
			// Enable Timer1 channel 2 Compare Interrupt
			set_bit(TIMSK, OCIE1B);
     dda:	89 b7       	in	r24, 0x39	; 57
     ddc:	88 60       	ori	r24, 0x08	; 8
     dde:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	08 95       	ret
		}
		break;
	}
	case TIMER2:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	81 11       	cpse	r24, r1
     de8:	05 c0       	rjmp	.+10     	; 0xdf4 <mcal_timer_stop+0x7e>
		{
			// Enable Timer2 Overflow Interrupt
			clr_bit(TIMSK,TOIE2);
     dea:	89 b7       	in	r24, 0x39	; 57
     dec:	8f 7b       	andi	r24, 0xBF	; 191
     dee:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer2 Overflow Interrupt
			clr_bit(TIMSK,TOIE2);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	69 f4       	brne	.+26     	; 0xe12 <mcal_timer_stop+0x9c>
		{
			// Enable Timer2 Compare Interrupt
			clr_bit(TIMSK, OCIE2);
     df8:	89 b7       	in	r24, 0x39	; 57
     dfa:	8f 77       	andi	r24, 0x7F	; 127
     dfc:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	08 95       	ret
		break;
	}

	default :
	{
		error = TIMER_STATE_INVALID_TIMER;
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	08 95       	ret
			// Enable Timer0 Compare Interrupt
			clr_bit(TIMSK, OCIE0);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	08 95       	ret
			// Enable Timer1 channel 1 Compare Interrupt
			clr_bit(TIMSK, OCIE1A);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	08 95       	ret
			// Enable Timer1 channel 2 Compare Interrupt
			set_bit(TIMSK, OCIE1B);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	08 95       	ret
			// Enable Timer2 Compare Interrupt
			clr_bit(TIMSK, OCIE2);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     e12:	83 e0       	ldi	r24, 0x03	; 3
		break;
	}
	}

	return error;
}
     e14:	08 95       	ret

00000e16 <timer_setCallBack>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/
void timer_setCallBack( void(*a_ptr)(void))
{
	g_callBackPtr = a_ptr;
     e16:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <g_callBackPtr+0x1>
     e1a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <g_callBackPtr>
     e1e:	08 95       	ret

00000e20 <set_timer_overflow>:
}

void set_timer_overflow(double overflow) {
	interruptOverflow = overflow;
     e20:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <interruptOverflow>
     e24:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <interruptOverflow+0x1>
     e28:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <interruptOverflow+0x2>
     e2c:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <interruptOverflow+0x3>
     e30:	08 95       	ret

00000e32 <__vector_3>:
/*                     Interrupts Implementation                         */
/*************************************************************************/

/* TIMER2_COMP_vect */
void __vector_3(void)
{
     e32:	1f 92       	push	r1
     e34:	0f 92       	push	r0
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	0f 92       	push	r0
     e3a:	11 24       	eor	r1, r1
     e3c:	2f 93       	push	r18
     e3e:	3f 93       	push	r19
     e40:	4f 93       	push	r20
     e42:	5f 93       	push	r21
     e44:	6f 93       	push	r22
     e46:	7f 93       	push	r23
     e48:	8f 93       	push	r24
     e4a:	9f 93       	push	r25
     e4c:	af 93       	push	r26
     e4e:	bf 93       	push	r27
     e50:	ef 93       	push	r30
     e52:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
     e54:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <g_callBackPtr>
     e58:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <g_callBackPtr+0x1>
     e5c:	30 97       	sbiw	r30, 0x00	; 0
     e5e:	09 f0       	breq	.+2      	; 0xe62 <__vector_3+0x30>
	{
		(*g_callBackPtr)();
     e60:	09 95       	icall
	}
}
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	7f 91       	pop	r23
     e70:	6f 91       	pop	r22
     e72:	5f 91       	pop	r21
     e74:	4f 91       	pop	r20
     e76:	3f 91       	pop	r19
     e78:	2f 91       	pop	r18
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <__vector_4>:

/* TIMER2_OVF_vect */
void __vector_4(void)
{
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	2f 93       	push	r18
     e90:	3f 93       	push	r19
     e92:	4f 93       	push	r20
     e94:	5f 93       	push	r21
     e96:	6f 93       	push	r22
     e98:	7f 93       	push	r23
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
     e9e:	af 93       	push	r26
     ea0:	bf 93       	push	r27
     ea2:	ef 93       	push	r30
     ea4:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
     ea6:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <g_callBackPtr>
     eaa:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <g_callBackPtr+0x1>
     eae:	30 97       	sbiw	r30, 0x00	; 0
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <__vector_4+0x30>
	{
		(*g_callBackPtr)();
     eb2:	09 95       	icall
	}
}
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
     ec6:	4f 91       	pop	r20
     ec8:	3f 91       	pop	r19
     eca:	2f 91       	pop	r18
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	0f 90       	pop	r0
     ed2:	1f 90       	pop	r1
     ed4:	18 95       	reti

00000ed6 <__vector_5>:

/* TIMER1_CAPT_vect */
void __vector_5(void)
{
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
     ef8:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <g_callBackPtr>
     efc:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <g_callBackPtr+0x1>
     f00:	30 97       	sbiw	r30, 0x00	; 0
     f02:	09 f0       	breq	.+2      	; 0xf06 <__vector_5+0x30>
	{
		(*g_callBackPtr)();
     f04:	09 95       	icall
	}
}
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	0f 90       	pop	r0
     f24:	1f 90       	pop	r1
     f26:	18 95       	reti

00000f28 <__vector_6>:

/* TIMER1_COMPA_vect */
void __vector_6(void)
{
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
     f4a:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <g_callBackPtr>
     f4e:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <g_callBackPtr+0x1>
     f52:	30 97       	sbiw	r30, 0x00	; 0
     f54:	09 f0       	breq	.+2      	; 0xf58 <__vector_6+0x30>
	{
		(*g_callBackPtr)();
     f56:	09 95       	icall
	}
}
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_7>:

/* TIMER1_COMPB_vect */
void __vector_7(void)
{
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	2f 93       	push	r18
     f86:	3f 93       	push	r19
     f88:	4f 93       	push	r20
     f8a:	5f 93       	push	r21
     f8c:	6f 93       	push	r22
     f8e:	7f 93       	push	r23
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	af 93       	push	r26
     f96:	bf 93       	push	r27
     f98:	ef 93       	push	r30
     f9a:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
     f9c:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <g_callBackPtr>
     fa0:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <g_callBackPtr+0x1>
     fa4:	30 97       	sbiw	r30, 0x00	; 0
     fa6:	09 f0       	breq	.+2      	; 0xfaa <__vector_7+0x30>
	{
		(*g_callBackPtr)();
     fa8:	09 95       	icall
	}
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <__vector_8>:

/* TIMER1_OVF_vect */
void __vector_8(void)
{
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
     fee:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <g_callBackPtr>
     ff2:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <g_callBackPtr+0x1>
     ff6:	30 97       	sbiw	r30, 0x00	; 0
     ff8:	09 f0       	breq	.+2      	; 0xffc <__vector_8+0x30>
	{
		(*g_callBackPtr)();
     ffa:	09 95       	icall
	}
}
     ffc:	ff 91       	pop	r31
     ffe:	ef 91       	pop	r30
    1000:	bf 91       	pop	r27
    1002:	af 91       	pop	r26
    1004:	9f 91       	pop	r25
    1006:	8f 91       	pop	r24
    1008:	7f 91       	pop	r23
    100a:	6f 91       	pop	r22
    100c:	5f 91       	pop	r21
    100e:	4f 91       	pop	r20
    1010:	3f 91       	pop	r19
    1012:	2f 91       	pop	r18
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	0f 90       	pop	r0
    101a:	1f 90       	pop	r1
    101c:	18 95       	reti

0000101e <__vector_9>:

/* TIMER0_OVF_vect */
void __vector_9(void)
{
    101e:	1f 92       	push	r1
    1020:	0f 92       	push	r0
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	0f 92       	push	r0
    1026:	11 24       	eor	r1, r1
    1028:	2f 93       	push	r18
    102a:	3f 93       	push	r19
    102c:	4f 93       	push	r20
    102e:	5f 93       	push	r21
    1030:	6f 93       	push	r22
    1032:	7f 93       	push	r23
    1034:	8f 93       	push	r24
    1036:	9f 93       	push	r25
    1038:	af 93       	push	r26
    103a:	bf 93       	push	r27
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	ef 93       	push	r30
    1042:	ff 93       	push	r31
	ticks++;
    1044:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <ticks>
    1048:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <ticks+0x1>
    104c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <ticks+0x2>
    1050:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <ticks+0x3>
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5f e3       	ldi	r21, 0x3F	; 63
    105c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__addsf3>
    1060:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <ticks>
    1064:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <ticks+0x1>
    1068:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <ticks+0x2>
    106c:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <ticks+0x3>
	if(g_callBackPtr != NULL_PTR)
    1070:	c0 91 92 01 	lds	r28, 0x0192	; 0x800192 <g_callBackPtr>
    1074:	d0 91 93 01 	lds	r29, 0x0193	; 0x800193 <g_callBackPtr+0x1>
    1078:	20 97       	sbiw	r28, 0x00	; 0
    107a:	f1 f0       	breq	.+60     	; 0x10b8 <__vector_9+0x9a>
	{
		if(ticks >= interruptOverflow)
    107c:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <ticks>
    1080:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <ticks+0x1>
    1084:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <ticks+0x2>
    1088:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <ticks+0x3>
    108c:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <interruptOverflow>
    1090:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <interruptOverflow+0x1>
    1094:	40 91 8c 01 	lds	r20, 0x018C	; 0x80018c <interruptOverflow+0x2>
    1098:	50 91 8d 01 	lds	r21, 0x018D	; 0x80018d <interruptOverflow+0x3>
    109c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__gesf2>
    10a0:	88 23       	and	r24, r24
    10a2:	54 f0       	brlt	.+20     	; 0x10b8 <__vector_9+0x9a>
		{
			ticks= 0;
    10a4:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <ticks>
    10a8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <ticks+0x1>
    10ac:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <ticks+0x2>
    10b0:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <ticks+0x3>
			(*g_callBackPtr)();
    10b4:	fe 01       	movw	r30, r28
    10b6:	09 95       	icall
		}
	}
}
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_19>:

/* TIMER0_COMP_vect */
void __vector_19(void)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
    1100:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <g_callBackPtr>
    1104:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <g_callBackPtr+0x1>
    1108:	30 97       	sbiw	r30, 0x00	; 0
    110a:	09 f0       	breq	.+2      	; 0x110e <__vector_19+0x30>
	{
		(*g_callBackPtr)();
    110c:	09 95       	icall
	}
}
    110e:	ff 91       	pop	r31
    1110:	ef 91       	pop	r30
    1112:	bf 91       	pop	r27
    1114:	af 91       	pop	r26
    1116:	9f 91       	pop	r25
    1118:	8f 91       	pop	r24
    111a:	7f 91       	pop	r23
    111c:	6f 91       	pop	r22
    111e:	5f 91       	pop	r21
    1120:	4f 91       	pop	r20
    1122:	3f 91       	pop	r19
    1124:	2f 91       	pop	r18
    1126:	0f 90       	pop	r0
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	0f 90       	pop	r0
    112c:	1f 90       	pop	r1
    112e:	18 95       	reti

00001130 <mcal_UART_init>:
		Str++;
	}
	 *******************************************************************/

	return error;
}
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	ec 01       	movw	r28, r24
    113e:	8b b1       	in	r24, 0x0b	; 11
    1140:	82 60       	ori	r24, 0x02	; 2
    1142:	8b b9       	out	0x0b, r24	; 11
    1144:	8a b1       	in	r24, 0x0a	; 10
    1146:	80 61       	ori	r24, 0x10	; 16
    1148:	8a b9       	out	0x0a, r24	; 10
    114a:	8a b1       	in	r24, 0x0a	; 10
    114c:	88 60       	ori	r24, 0x08	; 8
    114e:	8a b9       	out	0x0a, r24	; 10
    1150:	80 b5       	in	r24, 0x20	; 32
    1152:	80 68       	ori	r24, 0x80	; 128
    1154:	80 bd       	out	0x20, r24	; 32
    1156:	28 81       	ld	r18, Y
    1158:	39 81       	ldd	r19, Y+1	; 0x01
    115a:	20 36       	cpi	r18, 0x60	; 96
    115c:	89 e0       	ldi	r24, 0x09	; 9
    115e:	38 07       	cpc	r19, r24
    1160:	49 f0       	breq	.+18     	; 0x1174 <mcal_UART_init+0x44>
    1162:	20 3c       	cpi	r18, 0xC0	; 192
    1164:	82 e1       	ldi	r24, 0x12	; 18
    1166:	38 07       	cpc	r19, r24
    1168:	29 f0       	breq	.+10     	; 0x1174 <mcal_UART_init+0x44>
    116a:	20 38       	cpi	r18, 0x80	; 128
    116c:	85 e2       	ldi	r24, 0x25	; 37
    116e:	38 07       	cpc	r19, r24
    1170:	09 f0       	breq	.+2      	; 0x1174 <mcal_UART_init+0x44>
    1172:	42 c0       	rjmp	.+132    	; 0x11f8 <mcal_UART_init+0xc8>
    1174:	c9 01       	movw	r24, r18
    1176:	a0 e0       	ldi	r26, 0x00	; 0
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	aa 1f       	adc	r26, r26
    1180:	bb 1f       	adc	r27, r27
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	aa 1f       	adc	r26, r26
    1188:	bb 1f       	adc	r27, r27
    118a:	9c 01       	movw	r18, r24
    118c:	ad 01       	movw	r20, r26
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	44 1f       	adc	r20, r20
    1194:	55 1f       	adc	r21, r21
    1196:	0f 2e       	mov	r0, r31
    1198:	c1 2c       	mov	r12, r1
    119a:	f2 e1       	ldi	r31, 0x12	; 18
    119c:	df 2e       	mov	r13, r31
    119e:	fa e7       	ldi	r31, 0x7A	; 122
    11a0:	ef 2e       	mov	r14, r31
    11a2:	f1 2c       	mov	r15, r1
    11a4:	f0 2d       	mov	r31, r0
    11a6:	c7 01       	movw	r24, r14
    11a8:	b6 01       	movw	r22, r12
    11aa:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__udivmodsi4>
    11ae:	da 01       	movw	r26, r20
    11b0:	c9 01       	movw	r24, r18
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	a1 09       	sbc	r26, r1
    11b6:	b1 09       	sbc	r27, r1
    11b8:	89 2f       	mov	r24, r25
    11ba:	9a 2f       	mov	r25, r26
    11bc:	ab 2f       	mov	r26, r27
    11be:	bb 27       	eor	r27, r27
    11c0:	80 bd       	out	0x20, r24	; 32
    11c2:	28 81       	ld	r18, Y
    11c4:	39 81       	ldd	r19, Y+1	; 0x01
    11c6:	c9 01       	movw	r24, r18
    11c8:	a0 e0       	ldi	r26, 0x00	; 0
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	aa 1f       	adc	r26, r26
    11d2:	bb 1f       	adc	r27, r27
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	aa 1f       	adc	r26, r26
    11da:	bb 1f       	adc	r27, r27
    11dc:	9c 01       	movw	r18, r24
    11de:	ad 01       	movw	r20, r26
    11e0:	22 0f       	add	r18, r18
    11e2:	33 1f       	adc	r19, r19
    11e4:	44 1f       	adc	r20, r20
    11e6:	55 1f       	adc	r21, r21
    11e8:	c7 01       	movw	r24, r14
    11ea:	b6 01       	movw	r22, r12
    11ec:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__udivmodsi4>
    11f0:	21 50       	subi	r18, 0x01	; 1
    11f2:	29 b9       	out	0x09, r18	; 9
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <mcal_UART_init+0xca>
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	91 11       	cpse	r25, r1
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <mcal_UART_init+0xd8>
    1200:	90 b5       	in	r25, 0x20	; 32
    1202:	97 7f       	andi	r25, 0xF7	; 247
    1204:	90 bd       	out	0x20, r25	; 32
    1206:	07 c0       	rjmp	.+14     	; 0x1216 <mcal_UART_init+0xe6>
    1208:	91 30       	cpi	r25, 0x01	; 1
    120a:	21 f4       	brne	.+8      	; 0x1214 <mcal_UART_init+0xe4>
    120c:	90 b5       	in	r25, 0x20	; 32
    120e:	98 60       	ori	r25, 0x08	; 8
    1210:	90 bd       	out	0x20, r25	; 32
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <mcal_UART_init+0xe6>
    1214:	82 e0       	ldi	r24, 0x02	; 2
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	91 11       	cpse	r25, r1
    121a:	07 c0       	rjmp	.+14     	; 0x122a <mcal_UART_init+0xfa>
    121c:	90 b5       	in	r25, 0x20	; 32
    121e:	9f 7e       	andi	r25, 0xEF	; 239
    1220:	90 bd       	out	0x20, r25	; 32
    1222:	90 b5       	in	r25, 0x20	; 32
    1224:	9f 7d       	andi	r25, 0xDF	; 223
    1226:	90 bd       	out	0x20, r25	; 32
    1228:	13 c0       	rjmp	.+38     	; 0x1250 <mcal_UART_init+0x120>
    122a:	91 30       	cpi	r25, 0x01	; 1
    122c:	39 f4       	brne	.+14     	; 0x123c <mcal_UART_init+0x10c>
    122e:	90 b5       	in	r25, 0x20	; 32
    1230:	9f 7e       	andi	r25, 0xEF	; 239
    1232:	90 bd       	out	0x20, r25	; 32
    1234:	90 b5       	in	r25, 0x20	; 32
    1236:	90 62       	ori	r25, 0x20	; 32
    1238:	90 bd       	out	0x20, r25	; 32
    123a:	0a c0       	rjmp	.+20     	; 0x1250 <mcal_UART_init+0x120>
    123c:	92 30       	cpi	r25, 0x02	; 2
    123e:	39 f4       	brne	.+14     	; 0x124e <mcal_UART_init+0x11e>
    1240:	90 b5       	in	r25, 0x20	; 32
    1242:	90 61       	ori	r25, 0x10	; 16
    1244:	90 bd       	out	0x20, r25	; 32
    1246:	90 b5       	in	r25, 0x20	; 32
    1248:	90 62       	ori	r25, 0x20	; 32
    124a:	90 bd       	out	0x20, r25	; 32
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <mcal_UART_init+0x120>
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	91 11       	cpse	r25, r1
    1254:	0a c0       	rjmp	.+20     	; 0x126a <mcal_UART_init+0x13a>
    1256:	90 b5       	in	r25, 0x20	; 32
    1258:	9d 7f       	andi	r25, 0xFD	; 253
    125a:	90 bd       	out	0x20, r25	; 32
    125c:	90 b5       	in	r25, 0x20	; 32
    125e:	9b 7f       	andi	r25, 0xFB	; 251
    1260:	90 bd       	out	0x20, r25	; 32
    1262:	9a b1       	in	r25, 0x0a	; 10
    1264:	9b 7f       	andi	r25, 0xFB	; 251
    1266:	9a b9       	out	0x0a, r25	; 10
    1268:	31 c0       	rjmp	.+98     	; 0x12cc <mcal_UART_init+0x19c>
    126a:	91 30       	cpi	r25, 0x01	; 1
    126c:	51 f4       	brne	.+20     	; 0x1282 <mcal_UART_init+0x152>
    126e:	90 b5       	in	r25, 0x20	; 32
    1270:	92 60       	ori	r25, 0x02	; 2
    1272:	90 bd       	out	0x20, r25	; 32
    1274:	90 b5       	in	r25, 0x20	; 32
    1276:	9b 7f       	andi	r25, 0xFB	; 251
    1278:	90 bd       	out	0x20, r25	; 32
    127a:	9a b1       	in	r25, 0x0a	; 10
    127c:	9b 7f       	andi	r25, 0xFB	; 251
    127e:	9a b9       	out	0x0a, r25	; 10
    1280:	25 c0       	rjmp	.+74     	; 0x12cc <mcal_UART_init+0x19c>
    1282:	92 30       	cpi	r25, 0x02	; 2
    1284:	51 f4       	brne	.+20     	; 0x129a <mcal_UART_init+0x16a>
    1286:	90 b5       	in	r25, 0x20	; 32
    1288:	9d 7f       	andi	r25, 0xFD	; 253
    128a:	90 bd       	out	0x20, r25	; 32
    128c:	90 b5       	in	r25, 0x20	; 32
    128e:	94 60       	ori	r25, 0x04	; 4
    1290:	90 bd       	out	0x20, r25	; 32
    1292:	9a b1       	in	r25, 0x0a	; 10
    1294:	9b 7f       	andi	r25, 0xFB	; 251
    1296:	9a b9       	out	0x0a, r25	; 10
    1298:	19 c0       	rjmp	.+50     	; 0x12cc <mcal_UART_init+0x19c>
    129a:	93 30       	cpi	r25, 0x03	; 3
    129c:	51 f4       	brne	.+20     	; 0x12b2 <mcal_UART_init+0x182>
    129e:	90 b5       	in	r25, 0x20	; 32
    12a0:	92 60       	ori	r25, 0x02	; 2
    12a2:	90 bd       	out	0x20, r25	; 32
    12a4:	90 b5       	in	r25, 0x20	; 32
    12a6:	94 60       	ori	r25, 0x04	; 4
    12a8:	90 bd       	out	0x20, r25	; 32
    12aa:	9a b1       	in	r25, 0x0a	; 10
    12ac:	9b 7f       	andi	r25, 0xFB	; 251
    12ae:	9a b9       	out	0x0a, r25	; 10
    12b0:	0d c0       	rjmp	.+26     	; 0x12cc <mcal_UART_init+0x19c>
    12b2:	94 30       	cpi	r25, 0x04	; 4
    12b4:	51 f4       	brne	.+20     	; 0x12ca <mcal_UART_init+0x19a>
    12b6:	90 b5       	in	r25, 0x20	; 32
    12b8:	92 60       	ori	r25, 0x02	; 2
    12ba:	90 bd       	out	0x20, r25	; 32
    12bc:	90 b5       	in	r25, 0x20	; 32
    12be:	94 60       	ori	r25, 0x04	; 4
    12c0:	90 bd       	out	0x20, r25	; 32
    12c2:	9a b1       	in	r25, 0x0a	; 10
    12c4:	94 60       	ori	r25, 0x04	; 4
    12c6:	9a b9       	out	0x0a, r25	; 10
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <mcal_UART_init+0x19c>
    12ca:	84 e0       	ldi	r24, 0x04	; 4
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	08 95       	ret

000012da <mcal_UART_sendByte>:
    12da:	5d 9b       	sbis	0x0b, 5	; 11
    12dc:	fe cf       	rjmp	.-4      	; 0x12da <mcal_UART_sendByte>
    12de:	8c b9       	out	0x0c, r24	; 12
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	08 95       	ret

000012e4 <mcal_UART_recieveByte>:
    12e4:	5f 9b       	sbis	0x0b, 7	; 11
    12e6:	fe cf       	rjmp	.-4      	; 0x12e4 <mcal_UART_recieveByte>
    12e8:	2c b1       	in	r18, 0x0c	; 12
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	08 95       	ret

000012f2 <mcal_UART_receiveString>:

uart_error_t mcal_UART_receiveString(u8_t *str)
{
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	8c 01       	movw	r16, r24
	uart_error_t error = UART_STATE_SUCCESS;

	u8_t i = 0;
	if (UART_STATE_SUCCESS == mcal_UART_recieveByte(&str[i]))
    12fc:	0e 94 72 09 	call	0x12e4	; 0x12e4 <mcal_UART_recieveByte>
    1300:	88 23       	and	r24, r24
    1302:	61 f0       	breq	.+24     	; 0x131c <mcal_UART_receiveString+0x2a>
			}
		}
	}
	else
	{
		error = UART_STATE_ERROR;
    1304:	d1 e0       	ldi	r29, 0x01	; 1
    1306:	12 c0       	rjmp	.+36     	; 0x132c <mcal_UART_receiveString+0x3a>
	u8_t i = 0;
	if (UART_STATE_SUCCESS == mcal_UART_recieveByte(&str[i]))
	{
		while(str[i] != '\0')
		{
			i++;
    1308:	cf 5f       	subi	r28, 0xFF	; 255
			if (UART_STATE_SUCCESS == mcal_UART_recieveByte(&str[i]))
    130a:	c8 01       	movw	r24, r16
    130c:	8c 0f       	add	r24, r28
    130e:	91 1d       	adc	r25, r1
    1310:	0e 94 72 09 	call	0x12e4	; 0x12e4 <mcal_UART_recieveByte>
    1314:	88 23       	and	r24, r24
    1316:	21 f0       	breq	.+8      	; 0x1320 <mcal_UART_receiveString+0x2e>
			{
				// do nothing
			}
			else
			{
				error = UART_STATE_ERROR;
    1318:	d1 e0       	ldi	r29, 0x01	; 1
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <mcal_UART_receiveString+0x2e>
    131c:	c0 e0       	ldi	r28, 0x00	; 0
    131e:	d0 e0       	ldi	r29, 0x00	; 0
	uart_error_t error = UART_STATE_SUCCESS;

	u8_t i = 0;
	if (UART_STATE_SUCCESS == mcal_UART_recieveByte(&str[i]))
	{
		while(str[i] != '\0')
    1320:	f8 01       	movw	r30, r16
    1322:	ec 0f       	add	r30, r28
    1324:	f1 1d       	adc	r31, r1
    1326:	80 81       	ld	r24, Z
    1328:	81 11       	cpse	r24, r1
    132a:	ee cf       	rjmp	.-36     	; 0x1308 <mcal_UART_receiveString+0x16>
	{
		error = UART_STATE_ERROR;
	}

	return error;
}
    132c:	8d 2f       	mov	r24, r29
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	08 95       	ret

00001338 <ms_manager_init>:
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to send string data");
	}

	return error;
}
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	00 d0       	rcall	.+0      	; 0x133e <ms_manager_init+0x6>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <ms_manager_init+0x8>
    1340:	1f 92       	push	r1
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	80 e8       	ldi	r24, 0x80	; 128
    1348:	95 e2       	ldi	r25, 0x25	; 37
    134a:	9a 83       	std	Y+2, r25	; 0x02
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	83 e0       	ldi	r24, 0x03	; 3
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	1b 82       	std	Y+3, r1	; 0x03
    1354:	1c 82       	std	Y+4, r1	; 0x04
    1356:	ce 01       	movw	r24, r28
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	0e 94 98 08 	call	0x1130	; 0x1130 <mcal_UART_init>
    135e:	88 23       	and	r24, r24
    1360:	41 f0       	breq	.+16     	; 0x1372 <ms_manager_init+0x3a>
    1362:	60 e6       	ldi	r22, 0x60	; 96
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	84 e8       	ldi	r24, 0x84	; 132
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 05 0a 	call	0x140a	; 0x140a <logger_write_error>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	07 c0       	rjmp	.+14     	; 0x1380 <ms_manager_init+0x48>
    1372:	65 e9       	ldi	r22, 0x95	; 149
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	84 e8       	ldi	r24, 0x84	; 132
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 04 0a 	call	0x1408	; 0x1408 <logger_write_debug>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	08 95       	ret

00001390 <ms_manager_send_data>:
    1390:	0e 94 6d 09 	call	0x12da	; 0x12da <mcal_UART_sendByte>
    1394:	88 23       	and	r24, r24
    1396:	41 f0       	breq	.+16     	; 0x13a8 <ms_manager_send_data+0x18>
    1398:	6a eb       	ldi	r22, 0xBA	; 186
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	84 e8       	ldi	r24, 0x84	; 132
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 05 0a 	call	0x140a	; 0x140a <logger_write_error>
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	08 95       	ret
    13a8:	6e ec       	ldi	r22, 0xCE	; 206
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	84 e8       	ldi	r24, 0x84	; 132
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 04 0a 	call	0x1408	; 0x1408 <logger_write_debug>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	08 95       	ret

000013b8 <ms_manager_receive_data>:

system_error_t ms_manager_receive_data(u8_t* data)
{
	system_error_t error = SYSTEM_SUCCESS;

	if(UART_STATE_SUCCESS != mcal_UART_recieveByte(data))
    13b8:	0e 94 72 09 	call	0x12e4	; 0x12e4 <mcal_UART_recieveByte>
    13bc:	88 23       	and	r24, r24
    13be:	41 f0       	breq	.+16     	; 0x13d0 <ms_manager_receive_data+0x18>
	{
		error = SYSTEM_FAIL;
		logger_write_error(TAG,(u8_t *)"Failed to receive data");
    13c0:	6a e1       	ldi	r22, 0x1A	; 26
    13c2:	71 e0       	ldi	r23, 0x01	; 1
    13c4:	84 e8       	ldi	r24, 0x84	; 132
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 05 0a 	call	0x140a	; 0x140a <logger_write_error>
{
	system_error_t error = SYSTEM_SUCCESS;

	if(UART_STATE_SUCCESS != mcal_UART_recieveByte(data))
	{
		error = SYSTEM_FAIL;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	08 95       	ret
		logger_write_error(TAG,(u8_t *)"Failed to receive data");
	}
	else
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to receive data");
    13d0:	61 e3       	ldi	r22, 0x31	; 49
    13d2:	71 e0       	ldi	r23, 0x01	; 1
    13d4:	84 e8       	ldi	r24, 0x84	; 132
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 04 0a 	call	0x1408	; 0x1408 <logger_write_debug>
	return error;
}

system_error_t ms_manager_receive_data(u8_t* data)
{
	system_error_t error = SYSTEM_SUCCESS;
    13dc:	80 e0       	ldi	r24, 0x00	; 0
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to receive data");
	}

	return error;
}
    13de:	08 95       	ret

000013e0 <ms_manager_receive_string>:

system_error_t ms_manager_receive_string(u8_t* data)
{
	system_error_t error = SYSTEM_SUCCESS;

	if(UART_STATE_SUCCESS != mcal_UART_receiveString(data))
    13e0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <mcal_UART_receiveString>
    13e4:	88 23       	and	r24, r24
    13e6:	41 f0       	breq	.+16     	; 0x13f8 <ms_manager_receive_string+0x18>
	{
		error = SYSTEM_FAIL;
		logger_write_error(TAG,(u8_t *)"Failed to receive string data");
    13e8:	69 e4       	ldi	r22, 0x49	; 73
    13ea:	71 e0       	ldi	r23, 0x01	; 1
    13ec:	84 e8       	ldi	r24, 0x84	; 132
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 05 0a 	call	0x140a	; 0x140a <logger_write_error>
{
	system_error_t error = SYSTEM_SUCCESS;

	if(UART_STATE_SUCCESS != mcal_UART_receiveString(data))
	{
		error = SYSTEM_FAIL;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	08 95       	ret
		logger_write_error(TAG,(u8_t *)"Failed to receive string data");
	}
	else
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to receive string data");
    13f8:	67 e6       	ldi	r22, 0x67	; 103
    13fa:	71 e0       	ldi	r23, 0x01	; 1
    13fc:	84 e8       	ldi	r24, 0x84	; 132
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 04 0a 	call	0x1408	; 0x1408 <logger_write_debug>
	return error;
}

system_error_t ms_manager_receive_string(u8_t* data)
{
	system_error_t error = SYSTEM_SUCCESS;
    1404:	80 e0       	ldi	r24, 0x00	; 0
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to receive string data");
	}

	return error;
}
    1406:	08 95       	ret

00001408 <logger_write_debug>:
	}
#endif
}

void logger_write_warning(u8_t* tag ,u8_t* data)
{
    1408:	08 95       	ret

0000140a <logger_write_error>:
	}
#endif
}

void logger_write_error(u8_t* tag ,u8_t* data)
{
    140a:	08 95       	ret

0000140c <delay_loop>:
/**************************************************************************/
/*                     Static Functions Implementation                    */
/**************************************************************************/
static void delay_loop(u16_t __count)
{
	__asm__ volatile (
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <delay_loop>
    1410:	08 95       	ret

00001412 <delay_ms>:

/**************************************************************************/
/*                     Functions Implementation                           */
/**************************************************************************/
void delay_ms(double __ms)
{
    1412:	8f 92       	push	r8
    1414:	9f 92       	push	r9
    1416:	af 92       	push	r10
    1418:	bf 92       	push	r11
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	4b 01       	movw	r8, r22
    1428:	5c 01       	movw	r10, r24
	u16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a ef       	ldi	r20, 0xFA	; 250
    1430:	54 e4       	ldi	r21, 0x44	; 68
    1432:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__mulsf3>
    1436:	6b 01       	movw	r12, r22
    1438:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e8       	ldi	r20, 0x80	; 128
    1440:	5f e3       	ldi	r21, 0x3F	; 63
    1442:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__cmpsf2>
    1446:	88 23       	and	r24, r24
    1448:	24 f1       	brlt	.+72     	; 0x1492 <delay_ms+0x80>
		__ticks = 1;
	else if (__tmp > 65535)
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	4f e7       	ldi	r20, 0x7F	; 127
    1450:	57 e4       	ldi	r21, 0x47	; 71
    1452:	c7 01       	movw	r24, r14
    1454:	b6 01       	movw	r22, r12
    1456:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__gesf2>
    145a:	18 16       	cp	r1, r24
    145c:	a4 f4       	brge	.+40     	; 0x1486 <delay_ms+0x74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (u16_t) (__ms * 10.0);
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e2       	ldi	r20, 0x20	; 32
    1464:	51 e4       	ldi	r21, 0x41	; 65
    1466:	c5 01       	movw	r24, r10
    1468:	b4 01       	movw	r22, r8
    146a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__mulsf3>
    146e:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fixunssfsi>
    1472:	eb 01       	movw	r28, r22
		while(__ticks)
    1474:	05 c0       	rjmp	.+10     	; 0x1480 <delay_ms+0x6e>
		{
			// wait 1/10 ms
			delay_loop(((F_CPU) / 4e3) / 10);
    1476:	88 ec       	ldi	r24, 0xC8	; 200
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 06 0a 	call	0x140c	; 0x140c <delay_loop>
			__ticks --;
    147e:	21 97       	sbiw	r28, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (u16_t) (__ms * 10.0);
		while(__ticks)
    1480:	20 97       	sbiw	r28, 0x00	; 0
    1482:	c9 f7       	brne	.-14     	; 0x1476 <delay_ms+0x64>
    1484:	0a c0       	rjmp	.+20     	; 0x149a <delay_ms+0x88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (u16_t)__tmp;
    1486:	c7 01       	movw	r24, r14
    1488:	b6 01       	movw	r22, r12
    148a:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fixunssfsi>
    148e:	cb 01       	movw	r24, r22
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <delay_ms+0x84>
void delay_ms(double __ms)
{
	u16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
		}
		return;
	}
	else
		__ticks = (u16_t)__tmp;
	delay_loop(__ticks);
    1496:	0e 94 06 0a 	call	0x140c	; 0x140c <delay_loop>
}
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	df 90       	pop	r13
    14a4:	cf 90       	pop	r12
    14a6:	bf 90       	pop	r11
    14a8:	af 90       	pop	r10
    14aa:	9f 90       	pop	r9
    14ac:	8f 90       	pop	r8
    14ae:	08 95       	ret

000014b0 <std_strcmp>:
    // reverse the string and return it
    return std_reverse(buffer, 0, i - 1);
}

u16_t std_strcmp(const u8_t *X, const u8_t *Y)
{
    14b0:	dc 01       	movw	r26, r24
    14b2:	fb 01       	movw	r30, r22
    while(*X)
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <std_strcmp+0x10>
    {
        // if u8_t differ or end of second string is reached
        if (*X != *Y)
    14b6:	80 81       	ld	r24, Z
    14b8:	98 13       	cpse	r25, r24
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <std_strcmp+0x16>
            break;

        // move to next pair of u8_t
        X++;
    14bc:	11 96       	adiw	r26, 0x01	; 1
        Y++;
    14be:	31 96       	adiw	r30, 0x01	; 1
    return std_reverse(buffer, 0, i - 1);
}

u16_t std_strcmp(const u8_t *X, const u8_t *Y)
{
    while(*X)
    14c0:	9c 91       	ld	r25, X
    14c2:	91 11       	cpse	r25, r1
    14c4:	f8 cf       	rjmp	.-16     	; 0x14b6 <std_strcmp+0x6>
        X++;
        Y++;
    }

    // return the ASCII difference after converting u8_t* to unsigned u8_t*
    return *(const u8_t*)X - *(const u8_t*)Y;
    14c6:	20 81       	ld	r18, Z
    14c8:	89 2f       	mov	r24, r25
    14ca:	90 e0       	ldi	r25, 0x00	; 0
}
    14cc:	82 1b       	sub	r24, r18
    14ce:	91 09       	sbc	r25, r1
    14d0:	08 95       	ret

000014d2 <__subsf3>:
    14d2:	50 58       	subi	r21, 0x80	; 128

000014d4 <__addsf3>:
    14d4:	bb 27       	eor	r27, r27
    14d6:	aa 27       	eor	r26, r26
    14d8:	0e 94 81 0a 	call	0x1502	; 0x1502 <__addsf3x>
    14dc:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__fp_round>
    14e0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__fp_pscA>
    14e4:	38 f0       	brcs	.+14     	; 0x14f4 <__addsf3+0x20>
    14e6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fp_pscB>
    14ea:	20 f0       	brcs	.+8      	; 0x14f4 <__addsf3+0x20>
    14ec:	39 f4       	brne	.+14     	; 0x14fc <__addsf3+0x28>
    14ee:	9f 3f       	cpi	r25, 0xFF	; 255
    14f0:	19 f4       	brne	.+6      	; 0x14f8 <__addsf3+0x24>
    14f2:	26 f4       	brtc	.+8      	; 0x14fc <__addsf3+0x28>
    14f4:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__fp_nan>
    14f8:	0e f4       	brtc	.+2      	; 0x14fc <__addsf3+0x28>
    14fa:	e0 95       	com	r30
    14fc:	e7 fb       	bst	r30, 7
    14fe:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__fp_inf>

00001502 <__addsf3x>:
    1502:	e9 2f       	mov	r30, r25
    1504:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fp_split3>
    1508:	58 f3       	brcs	.-42     	; 0x14e0 <__addsf3+0xc>
    150a:	ba 17       	cp	r27, r26
    150c:	62 07       	cpc	r22, r18
    150e:	73 07       	cpc	r23, r19
    1510:	84 07       	cpc	r24, r20
    1512:	95 07       	cpc	r25, r21
    1514:	20 f0       	brcs	.+8      	; 0x151e <__addsf3x+0x1c>
    1516:	79 f4       	brne	.+30     	; 0x1536 <__addsf3x+0x34>
    1518:	a6 f5       	brtc	.+104    	; 0x1582 <__addsf3x+0x80>
    151a:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__fp_zero>
    151e:	0e f4       	brtc	.+2      	; 0x1522 <__addsf3x+0x20>
    1520:	e0 95       	com	r30
    1522:	0b 2e       	mov	r0, r27
    1524:	ba 2f       	mov	r27, r26
    1526:	a0 2d       	mov	r26, r0
    1528:	0b 01       	movw	r0, r22
    152a:	b9 01       	movw	r22, r18
    152c:	90 01       	movw	r18, r0
    152e:	0c 01       	movw	r0, r24
    1530:	ca 01       	movw	r24, r20
    1532:	a0 01       	movw	r20, r0
    1534:	11 24       	eor	r1, r1
    1536:	ff 27       	eor	r31, r31
    1538:	59 1b       	sub	r21, r25
    153a:	99 f0       	breq	.+38     	; 0x1562 <__addsf3x+0x60>
    153c:	59 3f       	cpi	r21, 0xF9	; 249
    153e:	50 f4       	brcc	.+20     	; 0x1554 <__addsf3x+0x52>
    1540:	50 3e       	cpi	r21, 0xE0	; 224
    1542:	68 f1       	brcs	.+90     	; 0x159e <__addsf3x+0x9c>
    1544:	1a 16       	cp	r1, r26
    1546:	f0 40       	sbci	r31, 0x00	; 0
    1548:	a2 2f       	mov	r26, r18
    154a:	23 2f       	mov	r18, r19
    154c:	34 2f       	mov	r19, r20
    154e:	44 27       	eor	r20, r20
    1550:	58 5f       	subi	r21, 0xF8	; 248
    1552:	f3 cf       	rjmp	.-26     	; 0x153a <__addsf3x+0x38>
    1554:	46 95       	lsr	r20
    1556:	37 95       	ror	r19
    1558:	27 95       	ror	r18
    155a:	a7 95       	ror	r26
    155c:	f0 40       	sbci	r31, 0x00	; 0
    155e:	53 95       	inc	r21
    1560:	c9 f7       	brne	.-14     	; 0x1554 <__addsf3x+0x52>
    1562:	7e f4       	brtc	.+30     	; 0x1582 <__addsf3x+0x80>
    1564:	1f 16       	cp	r1, r31
    1566:	ba 0b       	sbc	r27, r26
    1568:	62 0b       	sbc	r22, r18
    156a:	73 0b       	sbc	r23, r19
    156c:	84 0b       	sbc	r24, r20
    156e:	ba f0       	brmi	.+46     	; 0x159e <__addsf3x+0x9c>
    1570:	91 50       	subi	r25, 0x01	; 1
    1572:	a1 f0       	breq	.+40     	; 0x159c <__addsf3x+0x9a>
    1574:	ff 0f       	add	r31, r31
    1576:	bb 1f       	adc	r27, r27
    1578:	66 1f       	adc	r22, r22
    157a:	77 1f       	adc	r23, r23
    157c:	88 1f       	adc	r24, r24
    157e:	c2 f7       	brpl	.-16     	; 0x1570 <__addsf3x+0x6e>
    1580:	0e c0       	rjmp	.+28     	; 0x159e <__addsf3x+0x9c>
    1582:	ba 0f       	add	r27, r26
    1584:	62 1f       	adc	r22, r18
    1586:	73 1f       	adc	r23, r19
    1588:	84 1f       	adc	r24, r20
    158a:	48 f4       	brcc	.+18     	; 0x159e <__addsf3x+0x9c>
    158c:	87 95       	ror	r24
    158e:	77 95       	ror	r23
    1590:	67 95       	ror	r22
    1592:	b7 95       	ror	r27
    1594:	f7 95       	ror	r31
    1596:	9e 3f       	cpi	r25, 0xFE	; 254
    1598:	08 f0       	brcs	.+2      	; 0x159c <__addsf3x+0x9a>
    159a:	b0 cf       	rjmp	.-160    	; 0x14fc <__addsf3+0x28>
    159c:	93 95       	inc	r25
    159e:	88 0f       	add	r24, r24
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <__addsf3x+0xa2>
    15a2:	99 27       	eor	r25, r25
    15a4:	ee 0f       	add	r30, r30
    15a6:	97 95       	ror	r25
    15a8:	87 95       	ror	r24
    15aa:	08 95       	ret

000015ac <__cmpsf2>:
    15ac:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__fp_cmp>
    15b0:	08 f4       	brcc	.+2      	; 0x15b4 <__cmpsf2+0x8>
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	08 95       	ret

000015b6 <__divsf3>:
    15b6:	0e 94 ef 0a 	call	0x15de	; 0x15de <__divsf3x>
    15ba:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__fp_round>
    15be:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fp_pscB>
    15c2:	58 f0       	brcs	.+22     	; 0x15da <__divsf3+0x24>
    15c4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__fp_pscA>
    15c8:	40 f0       	brcs	.+16     	; 0x15da <__divsf3+0x24>
    15ca:	29 f4       	brne	.+10     	; 0x15d6 <__divsf3+0x20>
    15cc:	5f 3f       	cpi	r21, 0xFF	; 255
    15ce:	29 f0       	breq	.+10     	; 0x15da <__divsf3+0x24>
    15d0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__fp_inf>
    15d4:	51 11       	cpse	r21, r1
    15d6:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_szero>
    15da:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__fp_nan>

000015de <__divsf3x>:
    15de:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fp_split3>
    15e2:	68 f3       	brcs	.-38     	; 0x15be <__divsf3+0x8>

000015e4 <__divsf3_pse>:
    15e4:	99 23       	and	r25, r25
    15e6:	b1 f3       	breq	.-20     	; 0x15d4 <__divsf3+0x1e>
    15e8:	55 23       	and	r21, r21
    15ea:	91 f3       	breq	.-28     	; 0x15d0 <__divsf3+0x1a>
    15ec:	95 1b       	sub	r25, r21
    15ee:	55 0b       	sbc	r21, r21
    15f0:	bb 27       	eor	r27, r27
    15f2:	aa 27       	eor	r26, r26
    15f4:	62 17       	cp	r22, r18
    15f6:	73 07       	cpc	r23, r19
    15f8:	84 07       	cpc	r24, r20
    15fa:	38 f0       	brcs	.+14     	; 0x160a <__divsf3_pse+0x26>
    15fc:	9f 5f       	subi	r25, 0xFF	; 255
    15fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1600:	22 0f       	add	r18, r18
    1602:	33 1f       	adc	r19, r19
    1604:	44 1f       	adc	r20, r20
    1606:	aa 1f       	adc	r26, r26
    1608:	a9 f3       	breq	.-22     	; 0x15f4 <__divsf3_pse+0x10>
    160a:	35 d0       	rcall	.+106    	; 0x1676 <__divsf3_pse+0x92>
    160c:	0e 2e       	mov	r0, r30
    160e:	3a f0       	brmi	.+14     	; 0x161e <__divsf3_pse+0x3a>
    1610:	e0 e8       	ldi	r30, 0x80	; 128
    1612:	32 d0       	rcall	.+100    	; 0x1678 <__divsf3_pse+0x94>
    1614:	91 50       	subi	r25, 0x01	; 1
    1616:	50 40       	sbci	r21, 0x00	; 0
    1618:	e6 95       	lsr	r30
    161a:	00 1c       	adc	r0, r0
    161c:	ca f7       	brpl	.-14     	; 0x1610 <__divsf3_pse+0x2c>
    161e:	2b d0       	rcall	.+86     	; 0x1676 <__divsf3_pse+0x92>
    1620:	fe 2f       	mov	r31, r30
    1622:	29 d0       	rcall	.+82     	; 0x1676 <__divsf3_pse+0x92>
    1624:	66 0f       	add	r22, r22
    1626:	77 1f       	adc	r23, r23
    1628:	88 1f       	adc	r24, r24
    162a:	bb 1f       	adc	r27, r27
    162c:	26 17       	cp	r18, r22
    162e:	37 07       	cpc	r19, r23
    1630:	48 07       	cpc	r20, r24
    1632:	ab 07       	cpc	r26, r27
    1634:	b0 e8       	ldi	r27, 0x80	; 128
    1636:	09 f0       	breq	.+2      	; 0x163a <__divsf3_pse+0x56>
    1638:	bb 0b       	sbc	r27, r27
    163a:	80 2d       	mov	r24, r0
    163c:	bf 01       	movw	r22, r30
    163e:	ff 27       	eor	r31, r31
    1640:	93 58       	subi	r25, 0x83	; 131
    1642:	5f 4f       	sbci	r21, 0xFF	; 255
    1644:	3a f0       	brmi	.+14     	; 0x1654 <__divsf3_pse+0x70>
    1646:	9e 3f       	cpi	r25, 0xFE	; 254
    1648:	51 05       	cpc	r21, r1
    164a:	78 f0       	brcs	.+30     	; 0x166a <__divsf3_pse+0x86>
    164c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__fp_inf>
    1650:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_szero>
    1654:	5f 3f       	cpi	r21, 0xFF	; 255
    1656:	e4 f3       	brlt	.-8      	; 0x1650 <__divsf3_pse+0x6c>
    1658:	98 3e       	cpi	r25, 0xE8	; 232
    165a:	d4 f3       	brlt	.-12     	; 0x1650 <__divsf3_pse+0x6c>
    165c:	86 95       	lsr	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b7 95       	ror	r27
    1664:	f7 95       	ror	r31
    1666:	9f 5f       	subi	r25, 0xFF	; 255
    1668:	c9 f7       	brne	.-14     	; 0x165c <__divsf3_pse+0x78>
    166a:	88 0f       	add	r24, r24
    166c:	91 1d       	adc	r25, r1
    166e:	96 95       	lsr	r25
    1670:	87 95       	ror	r24
    1672:	97 f9       	bld	r25, 7
    1674:	08 95       	ret
    1676:	e1 e0       	ldi	r30, 0x01	; 1
    1678:	66 0f       	add	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	88 1f       	adc	r24, r24
    167e:	bb 1f       	adc	r27, r27
    1680:	62 17       	cp	r22, r18
    1682:	73 07       	cpc	r23, r19
    1684:	84 07       	cpc	r24, r20
    1686:	ba 07       	cpc	r27, r26
    1688:	20 f0       	brcs	.+8      	; 0x1692 <__divsf3_pse+0xae>
    168a:	62 1b       	sub	r22, r18
    168c:	73 0b       	sbc	r23, r19
    168e:	84 0b       	sbc	r24, r20
    1690:	ba 0b       	sbc	r27, r26
    1692:	ee 1f       	adc	r30, r30
    1694:	88 f7       	brcc	.-30     	; 0x1678 <__divsf3_pse+0x94>
    1696:	e0 95       	com	r30
    1698:	08 95       	ret

0000169a <__fixunssfsi>:
    169a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_splitA>
    169e:	88 f0       	brcs	.+34     	; 0x16c2 <__fixunssfsi+0x28>
    16a0:	9f 57       	subi	r25, 0x7F	; 127
    16a2:	98 f0       	brcs	.+38     	; 0x16ca <__fixunssfsi+0x30>
    16a4:	b9 2f       	mov	r27, r25
    16a6:	99 27       	eor	r25, r25
    16a8:	b7 51       	subi	r27, 0x17	; 23
    16aa:	b0 f0       	brcs	.+44     	; 0x16d8 <__fixunssfsi+0x3e>
    16ac:	e1 f0       	breq	.+56     	; 0x16e6 <__fixunssfsi+0x4c>
    16ae:	66 0f       	add	r22, r22
    16b0:	77 1f       	adc	r23, r23
    16b2:	88 1f       	adc	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	1a f0       	brmi	.+6      	; 0x16be <__fixunssfsi+0x24>
    16b8:	ba 95       	dec	r27
    16ba:	c9 f7       	brne	.-14     	; 0x16ae <__fixunssfsi+0x14>
    16bc:	14 c0       	rjmp	.+40     	; 0x16e6 <__fixunssfsi+0x4c>
    16be:	b1 30       	cpi	r27, 0x01	; 1
    16c0:	91 f0       	breq	.+36     	; 0x16e6 <__fixunssfsi+0x4c>
    16c2:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fp_zero>
    16c6:	b1 e0       	ldi	r27, 0x01	; 1
    16c8:	08 95       	ret
    16ca:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__fp_zero>
    16ce:	67 2f       	mov	r22, r23
    16d0:	78 2f       	mov	r23, r24
    16d2:	88 27       	eor	r24, r24
    16d4:	b8 5f       	subi	r27, 0xF8	; 248
    16d6:	39 f0       	breq	.+14     	; 0x16e6 <__fixunssfsi+0x4c>
    16d8:	b9 3f       	cpi	r27, 0xF9	; 249
    16da:	cc f3       	brlt	.-14     	; 0x16ce <__fixunssfsi+0x34>
    16dc:	86 95       	lsr	r24
    16de:	77 95       	ror	r23
    16e0:	67 95       	ror	r22
    16e2:	b3 95       	inc	r27
    16e4:	d9 f7       	brne	.-10     	; 0x16dc <__fixunssfsi+0x42>
    16e6:	3e f4       	brtc	.+14     	; 0x16f6 <__fixunssfsi+0x5c>
    16e8:	90 95       	com	r25
    16ea:	80 95       	com	r24
    16ec:	70 95       	com	r23
    16ee:	61 95       	neg	r22
    16f0:	7f 4f       	sbci	r23, 0xFF	; 255
    16f2:	8f 4f       	sbci	r24, 0xFF	; 255
    16f4:	9f 4f       	sbci	r25, 0xFF	; 255
    16f6:	08 95       	ret

000016f8 <__fp_cmp>:
    16f8:	99 0f       	add	r25, r25
    16fa:	00 08       	sbc	r0, r0
    16fc:	55 0f       	add	r21, r21
    16fe:	aa 0b       	sbc	r26, r26
    1700:	e0 e8       	ldi	r30, 0x80	; 128
    1702:	fe ef       	ldi	r31, 0xFE	; 254
    1704:	16 16       	cp	r1, r22
    1706:	17 06       	cpc	r1, r23
    1708:	e8 07       	cpc	r30, r24
    170a:	f9 07       	cpc	r31, r25
    170c:	c0 f0       	brcs	.+48     	; 0x173e <__fp_cmp+0x46>
    170e:	12 16       	cp	r1, r18
    1710:	13 06       	cpc	r1, r19
    1712:	e4 07       	cpc	r30, r20
    1714:	f5 07       	cpc	r31, r21
    1716:	98 f0       	brcs	.+38     	; 0x173e <__fp_cmp+0x46>
    1718:	62 1b       	sub	r22, r18
    171a:	73 0b       	sbc	r23, r19
    171c:	84 0b       	sbc	r24, r20
    171e:	95 0b       	sbc	r25, r21
    1720:	39 f4       	brne	.+14     	; 0x1730 <__fp_cmp+0x38>
    1722:	0a 26       	eor	r0, r26
    1724:	61 f0       	breq	.+24     	; 0x173e <__fp_cmp+0x46>
    1726:	23 2b       	or	r18, r19
    1728:	24 2b       	or	r18, r20
    172a:	25 2b       	or	r18, r21
    172c:	21 f4       	brne	.+8      	; 0x1736 <__fp_cmp+0x3e>
    172e:	08 95       	ret
    1730:	0a 26       	eor	r0, r26
    1732:	09 f4       	brne	.+2      	; 0x1736 <__fp_cmp+0x3e>
    1734:	a1 40       	sbci	r26, 0x01	; 1
    1736:	a6 95       	lsr	r26
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	81 1d       	adc	r24, r1
    173c:	81 1d       	adc	r24, r1
    173e:	08 95       	ret

00001740 <__fp_inf>:
    1740:	97 f9       	bld	r25, 7
    1742:	9f 67       	ori	r25, 0x7F	; 127
    1744:	80 e8       	ldi	r24, 0x80	; 128
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	08 95       	ret

0000174c <__fp_nan>:
    174c:	9f ef       	ldi	r25, 0xFF	; 255
    174e:	80 ec       	ldi	r24, 0xC0	; 192
    1750:	08 95       	ret

00001752 <__fp_pscA>:
    1752:	00 24       	eor	r0, r0
    1754:	0a 94       	dec	r0
    1756:	16 16       	cp	r1, r22
    1758:	17 06       	cpc	r1, r23
    175a:	18 06       	cpc	r1, r24
    175c:	09 06       	cpc	r0, r25
    175e:	08 95       	ret

00001760 <__fp_pscB>:
    1760:	00 24       	eor	r0, r0
    1762:	0a 94       	dec	r0
    1764:	12 16       	cp	r1, r18
    1766:	13 06       	cpc	r1, r19
    1768:	14 06       	cpc	r1, r20
    176a:	05 06       	cpc	r0, r21
    176c:	08 95       	ret

0000176e <__fp_round>:
    176e:	09 2e       	mov	r0, r25
    1770:	03 94       	inc	r0
    1772:	00 0c       	add	r0, r0
    1774:	11 f4       	brne	.+4      	; 0x177a <__fp_round+0xc>
    1776:	88 23       	and	r24, r24
    1778:	52 f0       	brmi	.+20     	; 0x178e <__fp_round+0x20>
    177a:	bb 0f       	add	r27, r27
    177c:	40 f4       	brcc	.+16     	; 0x178e <__fp_round+0x20>
    177e:	bf 2b       	or	r27, r31
    1780:	11 f4       	brne	.+4      	; 0x1786 <__fp_round+0x18>
    1782:	60 ff       	sbrs	r22, 0
    1784:	04 c0       	rjmp	.+8      	; 0x178e <__fp_round+0x20>
    1786:	6f 5f       	subi	r22, 0xFF	; 255
    1788:	7f 4f       	sbci	r23, 0xFF	; 255
    178a:	8f 4f       	sbci	r24, 0xFF	; 255
    178c:	9f 4f       	sbci	r25, 0xFF	; 255
    178e:	08 95       	ret

00001790 <__fp_split3>:
    1790:	57 fd       	sbrc	r21, 7
    1792:	90 58       	subi	r25, 0x80	; 128
    1794:	44 0f       	add	r20, r20
    1796:	55 1f       	adc	r21, r21
    1798:	59 f0       	breq	.+22     	; 0x17b0 <__fp_splitA+0x10>
    179a:	5f 3f       	cpi	r21, 0xFF	; 255
    179c:	71 f0       	breq	.+28     	; 0x17ba <__fp_splitA+0x1a>
    179e:	47 95       	ror	r20

000017a0 <__fp_splitA>:
    17a0:	88 0f       	add	r24, r24
    17a2:	97 fb       	bst	r25, 7
    17a4:	99 1f       	adc	r25, r25
    17a6:	61 f0       	breq	.+24     	; 0x17c0 <__fp_splitA+0x20>
    17a8:	9f 3f       	cpi	r25, 0xFF	; 255
    17aa:	79 f0       	breq	.+30     	; 0x17ca <__fp_splitA+0x2a>
    17ac:	87 95       	ror	r24
    17ae:	08 95       	ret
    17b0:	12 16       	cp	r1, r18
    17b2:	13 06       	cpc	r1, r19
    17b4:	14 06       	cpc	r1, r20
    17b6:	55 1f       	adc	r21, r21
    17b8:	f2 cf       	rjmp	.-28     	; 0x179e <__fp_split3+0xe>
    17ba:	46 95       	lsr	r20
    17bc:	f1 df       	rcall	.-30     	; 0x17a0 <__fp_splitA>
    17be:	08 c0       	rjmp	.+16     	; 0x17d0 <__fp_splitA+0x30>
    17c0:	16 16       	cp	r1, r22
    17c2:	17 06       	cpc	r1, r23
    17c4:	18 06       	cpc	r1, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	f1 cf       	rjmp	.-30     	; 0x17ac <__fp_splitA+0xc>
    17ca:	86 95       	lsr	r24
    17cc:	71 05       	cpc	r23, r1
    17ce:	61 05       	cpc	r22, r1
    17d0:	08 94       	sec
    17d2:	08 95       	ret

000017d4 <__fp_zero>:
    17d4:	e8 94       	clt

000017d6 <__fp_szero>:
    17d6:	bb 27       	eor	r27, r27
    17d8:	66 27       	eor	r22, r22
    17da:	77 27       	eor	r23, r23
    17dc:	cb 01       	movw	r24, r22
    17de:	97 f9       	bld	r25, 7
    17e0:	08 95       	ret

000017e2 <__gesf2>:
    17e2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__fp_cmp>
    17e6:	08 f4       	brcc	.+2      	; 0x17ea <__gesf2+0x8>
    17e8:	8f ef       	ldi	r24, 0xFF	; 255
    17ea:	08 95       	ret

000017ec <__mulsf3>:
    17ec:	0e 94 09 0c 	call	0x1812	; 0x1812 <__mulsf3x>
    17f0:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__fp_round>
    17f4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__fp_pscA>
    17f8:	38 f0       	brcs	.+14     	; 0x1808 <__mulsf3+0x1c>
    17fa:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fp_pscB>
    17fe:	20 f0       	brcs	.+8      	; 0x1808 <__mulsf3+0x1c>
    1800:	95 23       	and	r25, r21
    1802:	11 f0       	breq	.+4      	; 0x1808 <__mulsf3+0x1c>
    1804:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__fp_inf>
    1808:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__fp_nan>
    180c:	11 24       	eor	r1, r1
    180e:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_szero>

00001812 <__mulsf3x>:
    1812:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fp_split3>
    1816:	70 f3       	brcs	.-36     	; 0x17f4 <__mulsf3+0x8>

00001818 <__mulsf3_pse>:
    1818:	95 9f       	mul	r25, r21
    181a:	c1 f3       	breq	.-16     	; 0x180c <__mulsf3+0x20>
    181c:	95 0f       	add	r25, r21
    181e:	50 e0       	ldi	r21, 0x00	; 0
    1820:	55 1f       	adc	r21, r21
    1822:	62 9f       	mul	r22, r18
    1824:	f0 01       	movw	r30, r0
    1826:	72 9f       	mul	r23, r18
    1828:	bb 27       	eor	r27, r27
    182a:	f0 0d       	add	r31, r0
    182c:	b1 1d       	adc	r27, r1
    182e:	63 9f       	mul	r22, r19
    1830:	aa 27       	eor	r26, r26
    1832:	f0 0d       	add	r31, r0
    1834:	b1 1d       	adc	r27, r1
    1836:	aa 1f       	adc	r26, r26
    1838:	64 9f       	mul	r22, r20
    183a:	66 27       	eor	r22, r22
    183c:	b0 0d       	add	r27, r0
    183e:	a1 1d       	adc	r26, r1
    1840:	66 1f       	adc	r22, r22
    1842:	82 9f       	mul	r24, r18
    1844:	22 27       	eor	r18, r18
    1846:	b0 0d       	add	r27, r0
    1848:	a1 1d       	adc	r26, r1
    184a:	62 1f       	adc	r22, r18
    184c:	73 9f       	mul	r23, r19
    184e:	b0 0d       	add	r27, r0
    1850:	a1 1d       	adc	r26, r1
    1852:	62 1f       	adc	r22, r18
    1854:	83 9f       	mul	r24, r19
    1856:	a0 0d       	add	r26, r0
    1858:	61 1d       	adc	r22, r1
    185a:	22 1f       	adc	r18, r18
    185c:	74 9f       	mul	r23, r20
    185e:	33 27       	eor	r19, r19
    1860:	a0 0d       	add	r26, r0
    1862:	61 1d       	adc	r22, r1
    1864:	23 1f       	adc	r18, r19
    1866:	84 9f       	mul	r24, r20
    1868:	60 0d       	add	r22, r0
    186a:	21 1d       	adc	r18, r1
    186c:	82 2f       	mov	r24, r18
    186e:	76 2f       	mov	r23, r22
    1870:	6a 2f       	mov	r22, r26
    1872:	11 24       	eor	r1, r1
    1874:	9f 57       	subi	r25, 0x7F	; 127
    1876:	50 40       	sbci	r21, 0x00	; 0
    1878:	9a f0       	brmi	.+38     	; 0x18a0 <__mulsf3_pse+0x88>
    187a:	f1 f0       	breq	.+60     	; 0x18b8 <__mulsf3_pse+0xa0>
    187c:	88 23       	and	r24, r24
    187e:	4a f0       	brmi	.+18     	; 0x1892 <__mulsf3_pse+0x7a>
    1880:	ee 0f       	add	r30, r30
    1882:	ff 1f       	adc	r31, r31
    1884:	bb 1f       	adc	r27, r27
    1886:	66 1f       	adc	r22, r22
    1888:	77 1f       	adc	r23, r23
    188a:	88 1f       	adc	r24, r24
    188c:	91 50       	subi	r25, 0x01	; 1
    188e:	50 40       	sbci	r21, 0x00	; 0
    1890:	a9 f7       	brne	.-22     	; 0x187c <__mulsf3_pse+0x64>
    1892:	9e 3f       	cpi	r25, 0xFE	; 254
    1894:	51 05       	cpc	r21, r1
    1896:	80 f0       	brcs	.+32     	; 0x18b8 <__mulsf3_pse+0xa0>
    1898:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__fp_inf>
    189c:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__fp_szero>
    18a0:	5f 3f       	cpi	r21, 0xFF	; 255
    18a2:	e4 f3       	brlt	.-8      	; 0x189c <__mulsf3_pse+0x84>
    18a4:	98 3e       	cpi	r25, 0xE8	; 232
    18a6:	d4 f3       	brlt	.-12     	; 0x189c <__mulsf3_pse+0x84>
    18a8:	86 95       	lsr	r24
    18aa:	77 95       	ror	r23
    18ac:	67 95       	ror	r22
    18ae:	b7 95       	ror	r27
    18b0:	f7 95       	ror	r31
    18b2:	e7 95       	ror	r30
    18b4:	9f 5f       	subi	r25, 0xFF	; 255
    18b6:	c1 f7       	brne	.-16     	; 0x18a8 <__mulsf3_pse+0x90>
    18b8:	fe 2b       	or	r31, r30
    18ba:	88 0f       	add	r24, r24
    18bc:	91 1d       	adc	r25, r1
    18be:	96 95       	lsr	r25
    18c0:	87 95       	ror	r24
    18c2:	97 f9       	bld	r25, 7
    18c4:	08 95       	ret

000018c6 <__mulsi3>:
    18c6:	db 01       	movw	r26, r22
    18c8:	8f 93       	push	r24
    18ca:	9f 93       	push	r25
    18cc:	0e 94 95 0c 	call	0x192a	; 0x192a <__muluhisi3>
    18d0:	bf 91       	pop	r27
    18d2:	af 91       	pop	r26
    18d4:	a2 9f       	mul	r26, r18
    18d6:	80 0d       	add	r24, r0
    18d8:	91 1d       	adc	r25, r1
    18da:	a3 9f       	mul	r26, r19
    18dc:	90 0d       	add	r25, r0
    18de:	b2 9f       	mul	r27, r18
    18e0:	90 0d       	add	r25, r0
    18e2:	11 24       	eor	r1, r1
    18e4:	08 95       	ret

000018e6 <__udivmodsi4>:
    18e6:	a1 e2       	ldi	r26, 0x21	; 33
    18e8:	1a 2e       	mov	r1, r26
    18ea:	aa 1b       	sub	r26, r26
    18ec:	bb 1b       	sub	r27, r27
    18ee:	fd 01       	movw	r30, r26
    18f0:	0d c0       	rjmp	.+26     	; 0x190c <__udivmodsi4_ep>

000018f2 <__udivmodsi4_loop>:
    18f2:	aa 1f       	adc	r26, r26
    18f4:	bb 1f       	adc	r27, r27
    18f6:	ee 1f       	adc	r30, r30
    18f8:	ff 1f       	adc	r31, r31
    18fa:	a2 17       	cp	r26, r18
    18fc:	b3 07       	cpc	r27, r19
    18fe:	e4 07       	cpc	r30, r20
    1900:	f5 07       	cpc	r31, r21
    1902:	20 f0       	brcs	.+8      	; 0x190c <__udivmodsi4_ep>
    1904:	a2 1b       	sub	r26, r18
    1906:	b3 0b       	sbc	r27, r19
    1908:	e4 0b       	sbc	r30, r20
    190a:	f5 0b       	sbc	r31, r21

0000190c <__udivmodsi4_ep>:
    190c:	66 1f       	adc	r22, r22
    190e:	77 1f       	adc	r23, r23
    1910:	88 1f       	adc	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	1a 94       	dec	r1
    1916:	69 f7       	brne	.-38     	; 0x18f2 <__udivmodsi4_loop>
    1918:	60 95       	com	r22
    191a:	70 95       	com	r23
    191c:	80 95       	com	r24
    191e:	90 95       	com	r25
    1920:	9b 01       	movw	r18, r22
    1922:	ac 01       	movw	r20, r24
    1924:	bd 01       	movw	r22, r26
    1926:	cf 01       	movw	r24, r30
    1928:	08 95       	ret

0000192a <__muluhisi3>:
    192a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__umulhisi3>
    192e:	a5 9f       	mul	r26, r21
    1930:	90 0d       	add	r25, r0
    1932:	b4 9f       	mul	r27, r20
    1934:	90 0d       	add	r25, r0
    1936:	a4 9f       	mul	r26, r20
    1938:	80 0d       	add	r24, r0
    193a:	91 1d       	adc	r25, r1
    193c:	11 24       	eor	r1, r1
    193e:	08 95       	ret

00001940 <__umulhisi3>:
    1940:	a2 9f       	mul	r26, r18
    1942:	b0 01       	movw	r22, r0
    1944:	b3 9f       	mul	r27, r19
    1946:	c0 01       	movw	r24, r0
    1948:	a3 9f       	mul	r26, r19
    194a:	70 0d       	add	r23, r0
    194c:	81 1d       	adc	r24, r1
    194e:	11 24       	eor	r1, r1
    1950:	91 1d       	adc	r25, r1
    1952:	b2 9f       	mul	r27, r18
    1954:	70 0d       	add	r23, r0
    1956:	81 1d       	adc	r24, r1
    1958:	11 24       	eor	r1, r1
    195a:	91 1d       	adc	r25, r1
    195c:	08 95       	ret

0000195e <_exit>:
    195e:	f8 94       	cli

00001960 <__stop_program>:
    1960:	ff cf       	rjmp	.-2      	; 0x1960 <__stop_program>
