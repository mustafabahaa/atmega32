
AVR_BSP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d72  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800060  00800060  00000de6  2**0
                  ALLOC
  2 .stab         00002184  00000000  00000000  00000de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001be8  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_1>
   8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_2>
   c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8d 06 	call	0xd1a	; 0xd1a <main>
  74:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <execute_port_program>:

/*************************************************************************/
/*                             Application                               */
/*************************************************************************/
void execute_port_program(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  systemInit();
  84:	0e 94 49 00 	call	0x92	; 0x92 <systemInit>

  mcal_port_write(BASE_C, PORT_ON);
  88:	83 e3       	ldi	r24, 0x33	; 51
  8a:	6f ef       	ldi	r22, 0xFF	; 255
  8c:	0e 94 c9 01 	call	0x392	; 0x392 <mcal_port_write>
  90:	ff cf       	rjmp	.-2      	; 0x90 <execute_port_program+0x14>

00000092 <systemInit>:

/*************************************************************************/
/*                   Static Functions Implementations                    */
/*************************************************************************/
static void systemInit()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  init_port();
  9a:	0e 94 52 00 	call	0xa4	; 0xa4 <init_port>
}
  9e:	cf 91       	pop	r28
  a0:	df 91       	pop	r29
  a2:	08 95       	ret

000000a4 <init_port>:

static void init_port()
{
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  mcal_port_init(BASE_A, DIR_PORT_OUTPUT);
  ac:	89 e3       	ldi	r24, 0x39	; 57
  ae:	62 e0       	ldi	r22, 0x02	; 2
  b0:	0e 94 ab 01 	call	0x356	; 0x356 <mcal_port_init>
  mcal_port_init(BASE_B, DIR_PORT_OUTPUT);
  b4:	86 e3       	ldi	r24, 0x36	; 54
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	0e 94 ab 01 	call	0x356	; 0x356 <mcal_port_init>
  mcal_port_init(BASE_C, DIR_PORT_OUTPUT);
  bc:	83 e3       	ldi	r24, 0x33	; 51
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 ab 01 	call	0x356	; 0x356 <mcal_port_init>
  mcal_port_init(BASE_D, DIR_PORT_INPUT_PULLDOWN);
  c4:	80 e3       	ldi	r24, 0x30	; 48
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	0e 94 ab 01 	call	0x356	; 0x356 <mcal_port_init>
}
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	08 95       	ret

000000d2 <execute_gpio_program>:
button_t button_1;
/*************************************************************************/
/*                             Application                               */
/*************************************************************************/
void execute_gpio_program(void)
{
  d2:	df 93       	push	r29
  d4:	cf 93       	push	r28
  d6:	00 d0       	rcall	.+0      	; 0xd8 <execute_gpio_program+0x6>
  d8:	0f 92       	push	r0
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  button_states_t button_states;
  systemInit();
  de:	0e 94 93 00 	call	0x126	; 0x126 <systemInit>

  while (1)
  {

    hal_button_get_state(&button_1, &button_states);
  e2:	83 e6       	ldi	r24, 0x63	; 99
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	9e 01       	movw	r18, r28
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	b9 01       	movw	r22, r18
  ee:	0e 94 46 06 	call	0xc8c	; 0xc8c <hal_button_get_state>

    switch (button_states)
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	3b 83       	std	Y+3, r19	; 0x03
  fa:	2a 83       	std	Y+2, r18	; 0x02
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	59 f0       	breq	.+22     	; 0x11a <execute_gpio_program+0x48>
 104:	2a 81       	ldd	r18, Y+2	; 0x02
 106:	3b 81       	ldd	r19, Y+3	; 0x03
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	31 05       	cpc	r19, r1
 10c:	51 f7       	brne	.-44     	; 0xe2 <execute_gpio_program+0x10>
    {
    case BUTTON_PRESSED:
      hal_led_set_state(&red_led, ON);
 10e:	80 e6       	ldi	r24, 0x60	; 96
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	0e 94 4e 05 	call	0xa9c	; 0xa9c <hal_led_set_state>
 118:	e4 cf       	rjmp	.-56     	; 0xe2 <execute_gpio_program+0x10>
      break;

    case BUTTON_NOT_PRESSED:
      hal_led_set_state(&red_led, OFF);
 11a:	80 e6       	ldi	r24, 0x60	; 96
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	0e 94 4e 05 	call	0xa9c	; 0xa9c <hal_led_set_state>
 124:	de cf       	rjmp	.-68     	; 0xe2 <execute_gpio_program+0x10>

00000126 <systemInit>:

/*************************************************************************/
/*                   Static Functions Implementations                    */
/*************************************************************************/
static void systemInit()
{
 126:	df 93       	push	r29
 128:	cf 93       	push	r28
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
  init_led();
 12e:	0e 94 9e 00 	call	0x13c	; 0x13c <init_led>
  init_button();
 132:	0e 94 b5 00 	call	0x16a	; 0x16a <init_button>
}
 136:	cf 91       	pop	r28
 138:	df 91       	pop	r29
 13a:	08 95       	ret

0000013c <init_led>:

static void init_led()
{
 13c:	df 93       	push	r29
 13e:	cf 93       	push	r28
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
  red_led.base_addr = BASE_C;
 144:	83 e3       	ldi	r24, 0x33	; 51
 146:	80 93 60 00 	sts	0x0060, r24
  red_led.pin_num = 0;
 14a:	10 92 61 00 	sts	0x0061, r1
  red_led.wiring = CURRENT_SOURCING;
 14e:	10 92 62 00 	sts	0x0062, r1
  hal_led_init(&red_led);
 152:	80 e6       	ldi	r24, 0x60	; 96
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 23 05 	call	0xa46	; 0xa46 <hal_led_init>
  hal_led_set_state(&red_led, OFF);
 15a:	80 e6       	ldi	r24, 0x60	; 96
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	0e 94 4e 05 	call	0xa9c	; 0xa9c <hal_led_set_state>
}
 164:	cf 91       	pop	r28
 166:	df 91       	pop	r29
 168:	08 95       	ret

0000016a <init_button>:

static void init_button()
{
 16a:	df 93       	push	r29
 16c:	cf 93       	push	r28
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
  button_1.base_addr = BASE_C;
 172:	83 e3       	ldi	r24, 0x33	; 51
 174:	80 93 63 00 	sts	0x0063, r24
  button_1.pin_num = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 64 00 	sts	0x0064, r24
  button_1.connection = PULLDOWN_CONNECTION;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 65 00 	sts	0x0065, r24
  hal_button_init(&button_1);
 184:	83 e6       	ldi	r24, 0x63	; 99
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 02 06 	call	0xc04	; 0xc04 <hal_button_init>
}
 18c:	cf 91       	pop	r28
 18e:	df 91       	pop	r29
 190:	08 95       	ret

00000192 <execute_interrupt_program>:

/*************************************************************************/
/*                             Application                               */
/*************************************************************************/
void execute_interrupt_program(void)
{
 192:	df 93       	push	r29
 194:	cf 93       	push	r28
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
  systemInit();
 19a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <systemInit>
 19e:	ff cf       	rjmp	.-2      	; 0x19e <execute_interrupt_program+0xc>

000001a0 <systemInit>:

/*************************************************************************/
/*                   Static Functions Implementations                    */
/*************************************************************************/
static void systemInit()
{
 1a0:	df 93       	push	r29
 1a2:	cf 93       	push	r28
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
  init_interrupts();
 1a8:	0e 94 14 01 	call	0x228	; 0x228 <init_interrupts>
  init_led();
 1ac:	0e 94 db 00 	call	0x1b6	; 0x1b6 <init_led>
}
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

000001b6 <init_led>:

static void init_led()
{
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
  green_led.base_addr = BASE_C;
 1be:	83 e3       	ldi	r24, 0x33	; 51
 1c0:	80 93 69 00 	sts	0x0069, r24
  green_led.pin_num = 0;
 1c4:	10 92 6a 00 	sts	0x006A, r1
  green_led.wiring = CURRENT_SOURCING;
 1c8:	10 92 6b 00 	sts	0x006B, r1
  hal_led_init(&green_led);
 1cc:	89 e6       	ldi	r24, 0x69	; 105
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 23 05 	call	0xa46	; 0xa46 <hal_led_init>
  hal_led_set_state(&green_led, OFF);
 1d4:	89 e6       	ldi	r24, 0x69	; 105
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	0e 94 4e 05 	call	0xa9c	; 0xa9c <hal_led_set_state>

  blue_led.base_addr = BASE_C;
 1de:	83 e3       	ldi	r24, 0x33	; 51
 1e0:	80 93 66 00 	sts	0x0066, r24
  blue_led.pin_num = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 67 00 	sts	0x0067, r24
  blue_led.wiring = CURRENT_SOURCING;
 1ea:	10 92 68 00 	sts	0x0068, r1
  hal_led_init(&blue_led);
 1ee:	86 e6       	ldi	r24, 0x66	; 102
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 23 05 	call	0xa46	; 0xa46 <hal_led_init>
  hal_led_set_state(&blue_led, OFF);
 1f6:	86 e6       	ldi	r24, 0x66	; 102
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	0e 94 4e 05 	call	0xa9c	; 0xa9c <hal_led_set_state>

  red_led.base_addr = BASE_C;
 200:	83 e3       	ldi	r24, 0x33	; 51
 202:	80 93 60 00 	sts	0x0060, r24
  red_led.pin_num = 2;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 61 00 	sts	0x0061, r24
  red_led.wiring = CURRENT_SOURCING;
 20c:	10 92 62 00 	sts	0x0062, r1
  hal_led_init(&red_led);
 210:	80 e6       	ldi	r24, 0x60	; 96
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 23 05 	call	0xa46	; 0xa46 <hal_led_init>
  hal_led_set_state(&red_led, OFF);
 218:	80 e6       	ldi	r24, 0x60	; 96
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <hal_led_set_state>
}
 222:	cf 91       	pop	r28
 224:	df 91       	pop	r29
 226:	08 95       	ret

00000228 <init_interrupts>:

static void init_interrupts()
{
 228:	df 93       	push	r29
 22a:	cf 93       	push	r28
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
  mcal_interrupt_initialize(INT0, RISING_EDGE);
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	0e 94 07 02 	call	0x40e	; 0x40e <mcal_interrupt_initialize>
  mcal_interrupt_initialize(INT1, RISING_EDGE);
 238:	87 e0       	ldi	r24, 0x07	; 7
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	0e 94 07 02 	call	0x40e	; 0x40e <mcal_interrupt_initialize>
  mcal_interrupt_initialize(INT2, RISING_EDGE);
 240:	85 e0       	ldi	r24, 0x05	; 5
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	0e 94 07 02 	call	0x40e	; 0x40e <mcal_interrupt_initialize>
}
 248:	cf 91       	pop	r28
 24a:	df 91       	pop	r29
 24c:	08 95       	ret

0000024e <__vector_1>:
/*************************************************************************/
/*            External Interrupts ISR Implementations                    */
/*************************************************************************/

void __vector_1(void)
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
  hal_led_toggle_state(&green_led);
 278:	89 e6       	ldi	r24, 0x69	; 105
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 99 05 	call	0xb32	; 0xb32 <hal_led_toggle_state>
}
 280:	cf 91       	pop	r28
 282:	df 91       	pop	r29
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_2>:

void __vector_2(void)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	4f 93       	push	r20
 2b6:	5f 93       	push	r21
 2b8:	6f 93       	push	r22
 2ba:	7f 93       	push	r23
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
 2c8:	df 93       	push	r29
 2ca:	cf 93       	push	r28
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
  hal_led_toggle_state(&blue_led);
 2d0:	86 e6       	ldi	r24, 0x66	; 102
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 99 05 	call	0xb32	; 0xb32 <hal_led_toggle_state>
}
 2d8:	cf 91       	pop	r28
 2da:	df 91       	pop	r29
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <__vector_3>:

void __vector_3(void)
{
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	2f 93       	push	r18
 30a:	3f 93       	push	r19
 30c:	4f 93       	push	r20
 30e:	5f 93       	push	r21
 310:	6f 93       	push	r22
 312:	7f 93       	push	r23
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	af 93       	push	r26
 31a:	bf 93       	push	r27
 31c:	ef 93       	push	r30
 31e:	ff 93       	push	r31
 320:	df 93       	push	r29
 322:	cf 93       	push	r28
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
  hal_led_toggle_state(&red_led);
 328:	80 e6       	ldi	r24, 0x60	; 96
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 99 05 	call	0xb32	; 0xb32 <hal_led_toggle_state>
 330:	cf 91       	pop	r28
 332:	df 91       	pop	r29
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <mcal_port_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

port_error_t mcal_port_init(u8_t base, portState dir)
{
 356:	df 93       	push	r29
 358:	cf 93       	push	r28
 35a:	00 d0       	rcall	.+0      	; 0x35c <mcal_port_init+0x6>
 35c:	0f 92       	push	r0
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	8a 83       	std	Y+2, r24	; 0x02
 364:	6b 83       	std	Y+3, r22	; 0x03
  port_error_t error = PORT_STATE_SUCCESS;
 366:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	89 33       	cpi	r24, 0x39	; 57
 36c:	59 f0       	breq	.+22     	; 0x384 <mcal_port_init+0x2e>
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	86 33       	cpi	r24, 0x36	; 54
 372:	41 f0       	breq	.+16     	; 0x384 <mcal_port_init+0x2e>
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	83 33       	cpi	r24, 0x33	; 51
 378:	29 f0       	breq	.+10     	; 0x384 <mcal_port_init+0x2e>
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	80 33       	cpi	r24, 0x30	; 48
 37e:	11 f0       	breq	.+4      	; 0x384 <mcal_port_init+0x2e>
  {

  }
  else
  {
    error = PORT_STATE_INVALID_ADDR;
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	89 83       	std	Y+1, r24	; 0x01
  }

  return error;
 384:	89 81       	ldd	r24, Y+1	; 0x01
}
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	cf 91       	pop	r28
 38e:	df 91       	pop	r29
 390:	08 95       	ret

00000392 <mcal_port_write>:

port_error_t mcal_port_write(u8_t base, u8_t value)
{
 392:	df 93       	push	r29
 394:	cf 93       	push	r28
 396:	00 d0       	rcall	.+0      	; 0x398 <mcal_port_write+0x6>
 398:	0f 92       	push	r0
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	8a 83       	std	Y+2, r24	; 0x02
 3a0:	6b 83       	std	Y+3, r22	; 0x03
  port_error_t error = PORT_STATE_SUCCESS;
 3a2:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	89 33       	cpi	r24, 0x39	; 57
 3a8:	59 f0       	breq	.+22     	; 0x3c0 <mcal_port_write+0x2e>
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	86 33       	cpi	r24, 0x36	; 54
 3ae:	41 f0       	breq	.+16     	; 0x3c0 <mcal_port_write+0x2e>
 3b0:	8a 81       	ldd	r24, Y+2	; 0x02
 3b2:	83 33       	cpi	r24, 0x33	; 51
 3b4:	29 f0       	breq	.+10     	; 0x3c0 <mcal_port_write+0x2e>
 3b6:	8a 81       	ldd	r24, Y+2	; 0x02
 3b8:	80 33       	cpi	r24, 0x30	; 48
 3ba:	11 f0       	breq	.+4      	; 0x3c0 <mcal_port_write+0x2e>
  {
  }
  else
  {
    error = PORT_STATE_INVALID_ADDR;
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	89 83       	std	Y+1, r24	; 0x01
  }

  return error;
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
}
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	cf 91       	pop	r28
 3ca:	df 91       	pop	r29
 3cc:	08 95       	ret

000003ce <mcal_port_read>:

port_error_t mcal_port_read(u8_t base, u8_t *value)
{
 3ce:	df 93       	push	r29
 3d0:	cf 93       	push	r28
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <mcal_port_read+0x6>
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <mcal_port_read+0x8>
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	8a 83       	std	Y+2, r24	; 0x02
 3dc:	7c 83       	std	Y+4, r23	; 0x04
 3de:	6b 83       	std	Y+3, r22	; 0x03
  port_error_t error = PORT_STATE_SUCCESS;
 3e0:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 3e2:	8a 81       	ldd	r24, Y+2	; 0x02
 3e4:	89 33       	cpi	r24, 0x39	; 57
 3e6:	59 f0       	breq	.+22     	; 0x3fe <mcal_port_read+0x30>
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	86 33       	cpi	r24, 0x36	; 54
 3ec:	41 f0       	breq	.+16     	; 0x3fe <mcal_port_read+0x30>
 3ee:	8a 81       	ldd	r24, Y+2	; 0x02
 3f0:	83 33       	cpi	r24, 0x33	; 51
 3f2:	29 f0       	breq	.+10     	; 0x3fe <mcal_port_read+0x30>
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	80 33       	cpi	r24, 0x30	; 48
 3f8:	11 f0       	breq	.+4      	; 0x3fe <mcal_port_read+0x30>
  {
  }
  else
  {
    error = PORT_STATE_INVALID_ADDR;
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	89 83       	std	Y+1, r24	; 0x01
  }
  return error;
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
}
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	cf 91       	pop	r28
 40a:	df 91       	pop	r29
 40c:	08 95       	ret

0000040e <mcal_interrupt_initialize>:
/*                     Functions Implementation                          */
/*************************************************************************/

interrupt_error mcal_interrupt_initialize(u8_t interruptNo,
                                          interrupt_mode_t mode)
{
 40e:	df 93       	push	r29
 410:	cf 93       	push	r28
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	2b 97       	sbiw	r28, 0x0b	; 11
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
 422:	8a 83       	std	Y+2, r24	; 0x02
 424:	6b 83       	std	Y+3, r22	; 0x03
  interrupt_error error = INTERRUPT_STATE_SUCCESS;
 426:	19 82       	std	Y+1, r1	; 0x01

  /*enable global interrupts*/
  setGlobalInterrupt;
 428:	af e5       	ldi	r26, 0x5F	; 95
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	ef e5       	ldi	r30, 0x5F	; 95
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	80 68       	ori	r24, 0x80	; 128
 434:	8c 93       	st	X, r24

  switch (interruptNo)
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	3b 87       	std	Y+11, r19	; 0x0b
 43e:	2a 87       	std	Y+10, r18	; 0x0a
 440:	8a 85       	ldd	r24, Y+10	; 0x0a
 442:	9b 85       	ldd	r25, Y+11	; 0x0b
 444:	86 30       	cpi	r24, 0x06	; 6
 446:	91 05       	cpc	r25, r1
 448:	69 f0       	breq	.+26     	; 0x464 <__stack+0x5>
 44a:	2a 85       	ldd	r18, Y+10	; 0x0a
 44c:	3b 85       	ldd	r19, Y+11	; 0x0b
 44e:	27 30       	cpi	r18, 0x07	; 7
 450:	31 05       	cpc	r19, r1
 452:	09 f4       	brne	.+2      	; 0x456 <mcal_interrupt_initialize+0x48>
 454:	51 c0       	rjmp	.+162    	; 0x4f8 <__stack+0x99>
 456:	8a 85       	ldd	r24, Y+10	; 0x0a
 458:	9b 85       	ldd	r25, Y+11	; 0x0b
 45a:	85 30       	cpi	r24, 0x05	; 5
 45c:	91 05       	cpc	r25, r1
 45e:	09 f4       	brne	.+2      	; 0x462 <__stack+0x3>
 460:	95 c0       	rjmp	.+298    	; 0x58c <__stack+0x12d>
 462:	bd c0       	rjmp	.+378    	; 0x5de <__stack+0x17f>
  {

  case INT0:
  {
    /*enable interrupt 0 */
    set_bit(GICR, INT0);
 464:	ab e5       	ldi	r26, 0x5B	; 91
 466:	b0 e0       	ldi	r27, 0x00	; 0
 468:	eb e5       	ldi	r30, 0x5B	; 91
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	80 64       	ori	r24, 0x40	; 64
 470:	8c 93       	st	X, r24

    switch (mode)
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	28 2f       	mov	r18, r24
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	39 87       	std	Y+9, r19	; 0x09
 47a:	28 87       	std	Y+8, r18	; 0x08
 47c:	88 85       	ldd	r24, Y+8	; 0x08
 47e:	99 85       	ldd	r25, Y+9	; 0x09
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	91 05       	cpc	r25, r1
 484:	c1 f0       	breq	.+48     	; 0x4b6 <__stack+0x57>
 486:	28 85       	ldd	r18, Y+8	; 0x08
 488:	39 85       	ldd	r19, Y+9	; 0x09
 48a:	22 30       	cpi	r18, 0x02	; 2
 48c:	31 05       	cpc	r19, r1
 48e:	11 f1       	breq	.+68     	; 0x4d4 <__stack+0x75>
 490:	88 85       	ldd	r24, Y+8	; 0x08
 492:	99 85       	ldd	r25, Y+9	; 0x09
 494:	00 97       	sbiw	r24, 0x00	; 0
 496:	69 f5       	brne	.+90     	; 0x4f2 <__stack+0x93>
    {
    case RISING_EDGE:
      set_bit(MCUCR, ISC00);
 498:	a5 e5       	ldi	r26, 0x55	; 85
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e5 e5       	ldi	r30, 0x55	; 85
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	81 60       	ori	r24, 0x01	; 1
 4a4:	8c 93       	st	X, r24
      set_bit(MCUCR, ISC01);
 4a6:	a5 e5       	ldi	r26, 0x55	; 85
 4a8:	b0 e0       	ldi	r27, 0x00	; 0
 4aa:	e5 e5       	ldi	r30, 0x55	; 85
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	82 60       	ori	r24, 0x02	; 2
 4b2:	8c 93       	st	X, r24
 4b4:	96 c0       	rjmp	.+300    	; 0x5e2 <__stack+0x183>
      break;

    case FALLING_EDGE:
      set_bit(MCUCR, ISC01);
 4b6:	a5 e5       	ldi	r26, 0x55	; 85
 4b8:	b0 e0       	ldi	r27, 0x00	; 0
 4ba:	e5 e5       	ldi	r30, 0x55	; 85
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
 4c0:	82 60       	ori	r24, 0x02	; 2
 4c2:	8c 93       	st	X, r24
      clr_bit(MCUCR, ISC00);
 4c4:	a5 e5       	ldi	r26, 0x55	; 85
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	e5 e5       	ldi	r30, 0x55	; 85
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	8e 7f       	andi	r24, 0xFE	; 254
 4d0:	8c 93       	st	X, r24
 4d2:	87 c0       	rjmp	.+270    	; 0x5e2 <__stack+0x183>
      break;

    case CHANGING_EDGE:
      set_bit(MCUCR, ISC00);
 4d4:	a5 e5       	ldi	r26, 0x55	; 85
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	e5 e5       	ldi	r30, 0x55	; 85
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	81 60       	ori	r24, 0x01	; 1
 4e0:	8c 93       	st	X, r24
      clr_bit(MCUCR, ISC01);
 4e2:	a5 e5       	ldi	r26, 0x55	; 85
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e5 e5       	ldi	r30, 0x55	; 85
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	8d 7f       	andi	r24, 0xFD	; 253
 4ee:	8c 93       	st	X, r24
 4f0:	78 c0       	rjmp	.+240    	; 0x5e2 <__stack+0x183>
      break;

    default:
      error = INTERRUPT_STATE_INVALID_OPERATION_MODE;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	89 83       	std	Y+1, r24	; 0x01
 4f6:	75 c0       	rjmp	.+234    	; 0x5e2 <__stack+0x183>
  }

  case INT1:
  {
    /*enable interrupt 1 */
    set_bit(GICR, INT1);
 4f8:	ab e5       	ldi	r26, 0x5B	; 91
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	eb e5       	ldi	r30, 0x5B	; 91
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	80 68       	ori	r24, 0x80	; 128
 504:	8c 93       	st	X, r24

    switch (mode)
 506:	8b 81       	ldd	r24, Y+3	; 0x03
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	3f 83       	std	Y+7, r19	; 0x07
 50e:	2e 83       	std	Y+6, r18	; 0x06
 510:	8e 81       	ldd	r24, Y+6	; 0x06
 512:	9f 81       	ldd	r25, Y+7	; 0x07
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	91 05       	cpc	r25, r1
 518:	c1 f0       	breq	.+48     	; 0x54a <__stack+0xeb>
 51a:	2e 81       	ldd	r18, Y+6	; 0x06
 51c:	3f 81       	ldd	r19, Y+7	; 0x07
 51e:	22 30       	cpi	r18, 0x02	; 2
 520:	31 05       	cpc	r19, r1
 522:	11 f1       	breq	.+68     	; 0x568 <__stack+0x109>
 524:	8e 81       	ldd	r24, Y+6	; 0x06
 526:	9f 81       	ldd	r25, Y+7	; 0x07
 528:	00 97       	sbiw	r24, 0x00	; 0
 52a:	69 f5       	brne	.+90     	; 0x586 <__stack+0x127>
    {
    case RISING_EDGE:
      set_bit(MCUCR, ISC11);
 52c:	a5 e5       	ldi	r26, 0x55	; 85
 52e:	b0 e0       	ldi	r27, 0x00	; 0
 530:	e5 e5       	ldi	r30, 0x55	; 85
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	88 60       	ori	r24, 0x08	; 8
 538:	8c 93       	st	X, r24
      set_bit(MCUCR, ISC10);
 53a:	a5 e5       	ldi	r26, 0x55	; 85
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	e5 e5       	ldi	r30, 0x55	; 85
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	84 60       	ori	r24, 0x04	; 4
 546:	8c 93       	st	X, r24
 548:	4c c0       	rjmp	.+152    	; 0x5e2 <__stack+0x183>
      break;

    case FALLING_EDGE:
      set_bit(MCUCR, ISC11);
 54a:	a5 e5       	ldi	r26, 0x55	; 85
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	e5 e5       	ldi	r30, 0x55	; 85
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	88 60       	ori	r24, 0x08	; 8
 556:	8c 93       	st	X, r24
      clr_bit(MCUCR, ISC10);
 558:	a5 e5       	ldi	r26, 0x55	; 85
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	e5 e5       	ldi	r30, 0x55	; 85
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	8b 7f       	andi	r24, 0xFB	; 251
 564:	8c 93       	st	X, r24
 566:	3d c0       	rjmp	.+122    	; 0x5e2 <__stack+0x183>
      break;

    case CHANGING_EDGE:
      set_bit(MCUCR, ISC10);
 568:	a5 e5       	ldi	r26, 0x55	; 85
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	e5 e5       	ldi	r30, 0x55	; 85
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	84 60       	ori	r24, 0x04	; 4
 574:	8c 93       	st	X, r24
      clr_bit(MCUCR, ISC11);
 576:	a5 e5       	ldi	r26, 0x55	; 85
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	e5 e5       	ldi	r30, 0x55	; 85
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	87 7f       	andi	r24, 0xF7	; 247
 582:	8c 93       	st	X, r24
 584:	2e c0       	rjmp	.+92     	; 0x5e2 <__stack+0x183>
      break;

    default:
      error = INTERRUPT_STATE_INVALID_OPERATION_MODE;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	89 83       	std	Y+1, r24	; 0x01
 58a:	2b c0       	rjmp	.+86     	; 0x5e2 <__stack+0x183>
  }

  case INT2:
  {
    /*enable interrupt 2 */
    set_bit(GICR, INT2);
 58c:	ab e5       	ldi	r26, 0x5B	; 91
 58e:	b0 e0       	ldi	r27, 0x00	; 0
 590:	eb e5       	ldi	r30, 0x5B	; 91
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	80 62       	ori	r24, 0x20	; 32
 598:	8c 93       	st	X, r24

    switch (mode)
 59a:	8b 81       	ldd	r24, Y+3	; 0x03
 59c:	28 2f       	mov	r18, r24
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	3d 83       	std	Y+5, r19	; 0x05
 5a2:	2c 83       	std	Y+4, r18	; 0x04
 5a4:	8c 81       	ldd	r24, Y+4	; 0x04
 5a6:	9d 81       	ldd	r25, Y+5	; 0x05
 5a8:	00 97       	sbiw	r24, 0x00	; 0
 5aa:	31 f0       	breq	.+12     	; 0x5b8 <__stack+0x159>
 5ac:	2c 81       	ldd	r18, Y+4	; 0x04
 5ae:	3d 81       	ldd	r19, Y+5	; 0x05
 5b0:	21 30       	cpi	r18, 0x01	; 1
 5b2:	31 05       	cpc	r19, r1
 5b4:	49 f0       	breq	.+18     	; 0x5c8 <__stack+0x169>
 5b6:	10 c0       	rjmp	.+32     	; 0x5d8 <__stack+0x179>
    {
    case RISING_EDGE:
      set_bit(MCUCR, ISC2);
 5b8:	a5 e5       	ldi	r26, 0x55	; 85
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	e5 e5       	ldi	r30, 0x55	; 85
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	80 64       	ori	r24, 0x40	; 64
 5c4:	8c 93       	st	X, r24
 5c6:	0d c0       	rjmp	.+26     	; 0x5e2 <__stack+0x183>
      break;

    case FALLING_EDGE:
      clr_bit(MCUCSR, ISC2);
 5c8:	a4 e5       	ldi	r26, 0x54	; 84
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	e4 e5       	ldi	r30, 0x54	; 84
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	8f 7b       	andi	r24, 0xBF	; 191
 5d4:	8c 93       	st	X, r24
 5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <__stack+0x183>
      break;

    default:
      error = INTERRUPT_STATE_INVALID_OPERATION_MODE;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	89 83       	std	Y+1, r24	; 0x01
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__stack+0x183>
    break;
  }

  default:
  {
    error = INTERRUPT_STATE_INVAILD_INTERRUPT_NUMBER;
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	89 83       	std	Y+1, r24	; 0x01
  }
  }
  return error;
 5e2:	89 81       	ldd	r24, Y+1	; 0x01
}
 5e4:	2b 96       	adiw	r28, 0x0b	; 11
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	f8 94       	cli
 5ea:	de bf       	out	0x3e, r29	; 62
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	cd bf       	out	0x3d, r28	; 61
 5f0:	cf 91       	pop	r28
 5f2:	df 91       	pop	r29
 5f4:	08 95       	ret

000005f6 <mcal_interrupt_read_flag>:

interrupt_error mcal_interrupt_read_flag(u8_t flag, u8_t *result)
{
 5f6:	df 93       	push	r29
 5f8:	cf 93       	push	r28
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	29 97       	sbiw	r28, 0x09	; 9
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	de bf       	out	0x3e, r29	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	cd bf       	out	0x3d, r28	; 61
 60a:	8a 83       	std	Y+2, r24	; 0x02
 60c:	7c 83       	std	Y+4, r23	; 0x04
 60e:	6b 83       	std	Y+3, r22	; 0x03
  interrupt_error error = INTERRUPT_STATE_SUCCESS;
 610:	19 82       	std	Y+1, r1	; 0x01

  switch (flag)
 612:	8a 81       	ldd	r24, Y+2	; 0x02
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	39 87       	std	Y+9, r19	; 0x09
 61a:	28 87       	std	Y+8, r18	; 0x08
 61c:	88 85       	ldd	r24, Y+8	; 0x08
 61e:	99 85       	ldd	r25, Y+9	; 0x09
 620:	86 30       	cpi	r24, 0x06	; 6
 622:	91 05       	cpc	r25, r1
 624:	59 f0       	breq	.+22     	; 0x63c <mcal_interrupt_read_flag+0x46>
 626:	28 85       	ldd	r18, Y+8	; 0x08
 628:	39 85       	ldd	r19, Y+9	; 0x09
 62a:	27 30       	cpi	r18, 0x07	; 7
 62c:	31 05       	cpc	r19, r1
 62e:	b9 f0       	breq	.+46     	; 0x65e <mcal_interrupt_read_flag+0x68>
 630:	88 85       	ldd	r24, Y+8	; 0x08
 632:	99 85       	ldd	r25, Y+9	; 0x09
 634:	85 30       	cpi	r24, 0x05	; 5
 636:	91 05       	cpc	r25, r1
 638:	f9 f0       	breq	.+62     	; 0x678 <mcal_interrupt_read_flag+0x82>
 63a:	2f c0       	rjmp	.+94     	; 0x69a <mcal_interrupt_read_flag+0xa4>
  {
  case INTF0:
    *result = bit_is_set(GIFR, INTF0);
 63c:	ea e5       	ldi	r30, 0x5A	; 90
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	88 2f       	mov	r24, r24
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	80 74       	andi	r24, 0x40	; 64
 648:	90 70       	andi	r25, 0x00	; 0
 64a:	1f 82       	std	Y+7, r1	; 0x07
 64c:	00 97       	sbiw	r24, 0x00	; 0
 64e:	11 f0       	breq	.+4      	; 0x654 <mcal_interrupt_read_flag+0x5e>
 650:	91 e0       	ldi	r25, 0x01	; 1
 652:	9f 83       	std	Y+7, r25	; 0x07
 654:	eb 81       	ldd	r30, Y+3	; 0x03
 656:	fc 81       	ldd	r31, Y+4	; 0x04
 658:	2f 81       	ldd	r18, Y+7	; 0x07
 65a:	20 83       	st	Z, r18
 65c:	20 c0       	rjmp	.+64     	; 0x69e <mcal_interrupt_read_flag+0xa8>
    break;

  case INTF1:
    *result = bit_is_set(GIFR, INTF1);
 65e:	ea e5       	ldi	r30, 0x5A	; 90
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	1e 82       	std	Y+6, r1	; 0x06
 666:	88 23       	and	r24, r24
 668:	14 f4       	brge	.+4      	; 0x66e <mcal_interrupt_read_flag+0x78>
 66a:	31 e0       	ldi	r19, 0x01	; 1
 66c:	3e 83       	std	Y+6, r19	; 0x06
 66e:	eb 81       	ldd	r30, Y+3	; 0x03
 670:	fc 81       	ldd	r31, Y+4	; 0x04
 672:	8e 81       	ldd	r24, Y+6	; 0x06
 674:	80 83       	st	Z, r24
 676:	13 c0       	rjmp	.+38     	; 0x69e <mcal_interrupt_read_flag+0xa8>
    break;

  case INTF2:
    *result = bit_is_set(GIFR, INTF2);
 678:	ea e5       	ldi	r30, 0x5A	; 90
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	88 2f       	mov	r24, r24
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	80 72       	andi	r24, 0x20	; 32
 684:	90 70       	andi	r25, 0x00	; 0
 686:	1d 82       	std	Y+5, r1	; 0x05
 688:	00 97       	sbiw	r24, 0x00	; 0
 68a:	11 f0       	breq	.+4      	; 0x690 <mcal_interrupt_read_flag+0x9a>
 68c:	91 e0       	ldi	r25, 0x01	; 1
 68e:	9d 83       	std	Y+5, r25	; 0x05
 690:	eb 81       	ldd	r30, Y+3	; 0x03
 692:	fc 81       	ldd	r31, Y+4	; 0x04
 694:	2d 81       	ldd	r18, Y+5	; 0x05
 696:	20 83       	st	Z, r18
 698:	02 c0       	rjmp	.+4      	; 0x69e <mcal_interrupt_read_flag+0xa8>
    break;

  default:
    error = INTERRUPT_STATE_INVAILD_INTERRUPT_NUMBER;
 69a:	82 e0       	ldi	r24, 0x02	; 2
 69c:	89 83       	std	Y+1, r24	; 0x01
    break;
  }
  return error;
 69e:	89 81       	ldd	r24, Y+1	; 0x01
}
 6a0:	29 96       	adiw	r28, 0x09	; 9
 6a2:	0f b6       	in	r0, 0x3f	; 63
 6a4:	f8 94       	cli
 6a6:	de bf       	out	0x3e, r29	; 62
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	cd bf       	out	0x3d, r28	; 61
 6ac:	cf 91       	pop	r28
 6ae:	df 91       	pop	r29
 6b0:	08 95       	ret

000006b2 <mcal_interrupt_clear_flag>:

interrupt_error mcal_interrupt_clear_flag(u8_t flag)
{
 6b2:	df 93       	push	r29
 6b4:	cf 93       	push	r28
 6b6:	00 d0       	rcall	.+0      	; 0x6b8 <mcal_interrupt_clear_flag+0x6>
 6b8:	00 d0       	rcall	.+0      	; 0x6ba <mcal_interrupt_clear_flag+0x8>
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
 6be:	8a 83       	std	Y+2, r24	; 0x02
  interrupt_error error = INTERRUPT_STATE_SUCCESS;
 6c0:	19 82       	std	Y+1, r1	; 0x01

  switch (flag)
 6c2:	8a 81       	ldd	r24, Y+2	; 0x02
 6c4:	28 2f       	mov	r18, r24
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	3c 83       	std	Y+4, r19	; 0x04
 6ca:	2b 83       	std	Y+3, r18	; 0x03
 6cc:	8b 81       	ldd	r24, Y+3	; 0x03
 6ce:	9c 81       	ldd	r25, Y+4	; 0x04
 6d0:	86 30       	cpi	r24, 0x06	; 6
 6d2:	91 05       	cpc	r25, r1
 6d4:	59 f0       	breq	.+22     	; 0x6ec <mcal_interrupt_clear_flag+0x3a>
 6d6:	2b 81       	ldd	r18, Y+3	; 0x03
 6d8:	3c 81       	ldd	r19, Y+4	; 0x04
 6da:	27 30       	cpi	r18, 0x07	; 7
 6dc:	31 05       	cpc	r19, r1
 6de:	71 f0       	breq	.+28     	; 0x6fc <mcal_interrupt_clear_flag+0x4a>
 6e0:	8b 81       	ldd	r24, Y+3	; 0x03
 6e2:	9c 81       	ldd	r25, Y+4	; 0x04
 6e4:	85 30       	cpi	r24, 0x05	; 5
 6e6:	91 05       	cpc	r25, r1
 6e8:	89 f0       	breq	.+34     	; 0x70c <mcal_interrupt_clear_flag+0x5a>
 6ea:	18 c0       	rjmp	.+48     	; 0x71c <mcal_interrupt_clear_flag+0x6a>
  {
  case INTF0:
    clr_bit(GIFR, INTF0);
 6ec:	aa e5       	ldi	r26, 0x5A	; 90
 6ee:	b0 e0       	ldi	r27, 0x00	; 0
 6f0:	ea e5       	ldi	r30, 0x5A	; 90
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	80 81       	ld	r24, Z
 6f6:	8f 7b       	andi	r24, 0xBF	; 191
 6f8:	8c 93       	st	X, r24
 6fa:	12 c0       	rjmp	.+36     	; 0x720 <mcal_interrupt_clear_flag+0x6e>
    break;

  case INTF1:
    clr_bit(GIFR, INTF1);
 6fc:	aa e5       	ldi	r26, 0x5A	; 90
 6fe:	b0 e0       	ldi	r27, 0x00	; 0
 700:	ea e5       	ldi	r30, 0x5A	; 90
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	8f 77       	andi	r24, 0x7F	; 127
 708:	8c 93       	st	X, r24
 70a:	0a c0       	rjmp	.+20     	; 0x720 <mcal_interrupt_clear_flag+0x6e>
    break;

  case INTF2:
    clr_bit(GIFR, INTF2);
 70c:	aa e5       	ldi	r26, 0x5A	; 90
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	ea e5       	ldi	r30, 0x5A	; 90
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	8f 7d       	andi	r24, 0xDF	; 223
 718:	8c 93       	st	X, r24
 71a:	02 c0       	rjmp	.+4      	; 0x720 <mcal_interrupt_clear_flag+0x6e>
    break;

  default:
    error = INTERRUPT_STATE_INVAILD_INTERRUPT_NUMBER;
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	89 83       	std	Y+1, r24	; 0x01
    break;
  }
  return error;
 720:	89 81       	ldd	r24, Y+1	; 0x01
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	0f 90       	pop	r0
 728:	0f 90       	pop	r0
 72a:	cf 91       	pop	r28
 72c:	df 91       	pop	r29
 72e:	08 95       	ret

00000730 <mcal_gpio_pin_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

GPIO_STATE_ERROR_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
 730:	df 93       	push	r29
 732:	cf 93       	push	r28
 734:	00 d0       	rcall	.+0      	; 0x736 <mcal_gpio_pin_init+0x6>
 736:	00 d0       	rcall	.+0      	; 0x738 <mcal_gpio_pin_init+0x8>
 738:	00 d0       	rcall	.+0      	; 0x73a <mcal_gpio_pin_init+0xa>
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	8a 83       	std	Y+2, r24	; 0x02
 740:	6b 83       	std	Y+3, r22	; 0x03
 742:	4c 83       	std	Y+4, r20	; 0x04
  GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
 744:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 746:	8a 81       	ldd	r24, Y+2	; 0x02
 748:	89 33       	cpi	r24, 0x39	; 57
 74a:	51 f0       	breq	.+20     	; 0x760 <mcal_gpio_pin_init+0x30>
 74c:	8a 81       	ldd	r24, Y+2	; 0x02
 74e:	86 33       	cpi	r24, 0x36	; 54
 750:	39 f0       	breq	.+14     	; 0x760 <mcal_gpio_pin_init+0x30>
 752:	8a 81       	ldd	r24, Y+2	; 0x02
 754:	83 33       	cpi	r24, 0x33	; 51
 756:	21 f0       	breq	.+8      	; 0x760 <mcal_gpio_pin_init+0x30>
 758:	8a 81       	ldd	r24, Y+2	; 0x02
 75a:	80 33       	cpi	r24, 0x30	; 48
 75c:	09 f0       	breq	.+2      	; 0x760 <mcal_gpio_pin_init+0x30>
 75e:	86 c0       	rjmp	.+268    	; 0x86c <mcal_gpio_pin_init+0x13c>
  {
    if (pin < MAX_PIN_NUMBER)
 760:	8b 81       	ldd	r24, Y+3	; 0x03
 762:	88 30       	cpi	r24, 0x08	; 8
 764:	08 f0       	brcs	.+2      	; 0x768 <mcal_gpio_pin_init+0x38>
 766:	7f c0       	rjmp	.+254    	; 0x866 <mcal_gpio_pin_init+0x136>
    {
      switch (dir)
 768:	8c 81       	ldd	r24, Y+4	; 0x04
 76a:	28 2f       	mov	r18, r24
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	3e 83       	std	Y+6, r19	; 0x06
 770:	2d 83       	std	Y+5, r18	; 0x05
 772:	8d 81       	ldd	r24, Y+5	; 0x05
 774:	9e 81       	ldd	r25, Y+6	; 0x06
 776:	81 30       	cpi	r24, 0x01	; 1
 778:	91 05       	cpc	r25, r1
 77a:	21 f1       	breq	.+72     	; 0x7c4 <mcal_gpio_pin_init+0x94>
 77c:	2d 81       	ldd	r18, Y+5	; 0x05
 77e:	3e 81       	ldd	r19, Y+6	; 0x06
 780:	22 30       	cpi	r18, 0x02	; 2
 782:	31 05       	cpc	r19, r1
 784:	29 f0       	breq	.+10     	; 0x790 <mcal_gpio_pin_init+0x60>
 786:	8d 81       	ldd	r24, Y+5	; 0x05
 788:	9e 81       	ldd	r25, Y+6	; 0x06
 78a:	00 97       	sbiw	r24, 0x00	; 0
 78c:	b1 f1       	breq	.+108    	; 0x7fa <mcal_gpio_pin_init+0xca>
 78e:	68 c0       	rjmp	.+208    	; 0x860 <mcal_gpio_pin_init+0x130>
      {
      case DIR_OUTPUT:
        set_bit(base + OFFSET_DIR, pin);
 790:	8a 81       	ldd	r24, Y+2	; 0x02
 792:	88 2f       	mov	r24, r24
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	01 96       	adiw	r24, 0x01	; 1
 798:	dc 01       	movw	r26, r24
 79a:	8a 81       	ldd	r24, Y+2	; 0x02
 79c:	88 2f       	mov	r24, r24
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	fc 01       	movw	r30, r24
 7a4:	80 81       	ld	r24, Z
 7a6:	48 2f       	mov	r20, r24
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	28 2f       	mov	r18, r24
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 2e       	mov	r0, r18
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <mcal_gpio_pin_init+0x8a>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	0a 94       	dec	r0
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <mcal_gpio_pin_init+0x86>
 7be:	84 2b       	or	r24, r20
 7c0:	8c 93       	st	X, r24
 7c2:	56 c0       	rjmp	.+172    	; 0x870 <mcal_gpio_pin_init+0x140>
        break;

      case DIR_INPUT_PULLDOWN:
        clr_bit(base + OFFSET_DIR, pin);
 7c4:	8a 81       	ldd	r24, Y+2	; 0x02
 7c6:	88 2f       	mov	r24, r24
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	dc 01       	movw	r26, r24
 7ce:	8a 81       	ldd	r24, Y+2	; 0x02
 7d0:	88 2f       	mov	r24, r24
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	01 96       	adiw	r24, 0x01	; 1
 7d6:	fc 01       	movw	r30, r24
 7d8:	80 81       	ld	r24, Z
 7da:	48 2f       	mov	r20, r24
 7dc:	8b 81       	ldd	r24, Y+3	; 0x03
 7de:	28 2f       	mov	r18, r24
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	02 2e       	mov	r0, r18
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <mcal_gpio_pin_init+0xbe>
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	0a 94       	dec	r0
 7f0:	e2 f7       	brpl	.-8      	; 0x7ea <mcal_gpio_pin_init+0xba>
 7f2:	80 95       	com	r24
 7f4:	84 23       	and	r24, r20
 7f6:	8c 93       	st	X, r24
 7f8:	3b c0       	rjmp	.+118    	; 0x870 <mcal_gpio_pin_init+0x140>
        break;

      case DIR_INPUT_PULLUP:
        clr_bit(base + OFFSET_DIR, pin);
 7fa:	8a 81       	ldd	r24, Y+2	; 0x02
 7fc:	88 2f       	mov	r24, r24
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	01 96       	adiw	r24, 0x01	; 1
 802:	dc 01       	movw	r26, r24
 804:	8a 81       	ldd	r24, Y+2	; 0x02
 806:	88 2f       	mov	r24, r24
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	fc 01       	movw	r30, r24
 80e:	80 81       	ld	r24, Z
 810:	48 2f       	mov	r20, r24
 812:	8b 81       	ldd	r24, Y+3	; 0x03
 814:	28 2f       	mov	r18, r24
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <mcal_gpio_pin_init+0xf2>
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	2a 95       	dec	r18
 824:	e2 f7       	brpl	.-8      	; 0x81e <mcal_gpio_pin_init+0xee>
 826:	80 95       	com	r24
 828:	84 23       	and	r24, r20
 82a:	8c 93       	st	X, r24
        set_bit(base + OFFSET_PORT, pin);
 82c:	8a 81       	ldd	r24, Y+2	; 0x02
 82e:	88 2f       	mov	r24, r24
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	02 96       	adiw	r24, 0x02	; 2
 834:	dc 01       	movw	r26, r24
 836:	8a 81       	ldd	r24, Y+2	; 0x02
 838:	88 2f       	mov	r24, r24
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	02 96       	adiw	r24, 0x02	; 2
 83e:	fc 01       	movw	r30, r24
 840:	80 81       	ld	r24, Z
 842:	48 2f       	mov	r20, r24
 844:	8b 81       	ldd	r24, Y+3	; 0x03
 846:	28 2f       	mov	r18, r24
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 2e       	mov	r0, r18
 850:	02 c0       	rjmp	.+4      	; 0x856 <mcal_gpio_pin_init+0x126>
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	0a 94       	dec	r0
 858:	e2 f7       	brpl	.-8      	; 0x852 <mcal_gpio_pin_init+0x122>
 85a:	84 2b       	or	r24, r20
 85c:	8c 93       	st	X, r24
 85e:	08 c0       	rjmp	.+16     	; 0x870 <mcal_gpio_pin_init+0x140>
        break;

      default:
        error = GPIO_STATE_INVALID_DIR;
 860:	84 e0       	ldi	r24, 0x04	; 4
 862:	89 83       	std	Y+1, r24	; 0x01
 864:	05 c0       	rjmp	.+10     	; 0x870 <mcal_gpio_pin_init+0x140>
        break;
      }
    }
    else
    {
      error = GPIO_STATE_INVAILD_PIN;
 866:	83 e0       	ldi	r24, 0x03	; 3
 868:	89 83       	std	Y+1, r24	; 0x01
 86a:	02 c0       	rjmp	.+4      	; 0x870 <mcal_gpio_pin_init+0x140>
    }
  }
  else
  {
    error = GPIO_STATE_INVALID_ADDR;
 86c:	82 e0       	ldi	r24, 0x02	; 2
 86e:	89 83       	std	Y+1, r24	; 0x01
  }
  return error;
 870:	89 81       	ldd	r24, Y+1	; 0x01
}
 872:	26 96       	adiw	r28, 0x06	; 6
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	f8 94       	cli
 878:	de bf       	out	0x3e, r29	; 62
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	cd bf       	out	0x3d, r28	; 61
 87e:	cf 91       	pop	r28
 880:	df 91       	pop	r29
 882:	08 95       	ret

00000884 <mcal_gpio_pin_write>:

GPIO_STATE_ERROR_t mcal_gpio_pin_write(u8_t base, u8_t pin, u8_t value)
{
 884:	df 93       	push	r29
 886:	cf 93       	push	r28
 888:	00 d0       	rcall	.+0      	; 0x88a <mcal_gpio_pin_write+0x6>
 88a:	00 d0       	rcall	.+0      	; 0x88c <mcal_gpio_pin_write+0x8>
 88c:	00 d0       	rcall	.+0      	; 0x88e <mcal_gpio_pin_write+0xa>
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
 892:	8a 83       	std	Y+2, r24	; 0x02
 894:	6b 83       	std	Y+3, r22	; 0x03
 896:	4c 83       	std	Y+4, r20	; 0x04
  GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
 898:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 89a:	8a 81       	ldd	r24, Y+2	; 0x02
 89c:	89 33       	cpi	r24, 0x39	; 57
 89e:	51 f0       	breq	.+20     	; 0x8b4 <mcal_gpio_pin_write+0x30>
 8a0:	8a 81       	ldd	r24, Y+2	; 0x02
 8a2:	86 33       	cpi	r24, 0x36	; 54
 8a4:	39 f0       	breq	.+14     	; 0x8b4 <mcal_gpio_pin_write+0x30>
 8a6:	8a 81       	ldd	r24, Y+2	; 0x02
 8a8:	83 33       	cpi	r24, 0x33	; 51
 8aa:	21 f0       	breq	.+8      	; 0x8b4 <mcal_gpio_pin_write+0x30>
 8ac:	8a 81       	ldd	r24, Y+2	; 0x02
 8ae:	80 33       	cpi	r24, 0x30	; 48
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <mcal_gpio_pin_write+0x30>
 8b2:	46 c0       	rjmp	.+140    	; 0x940 <mcal_gpio_pin_write+0xbc>
  {
    switch (value)
 8b4:	8c 81       	ldd	r24, Y+4	; 0x04
 8b6:	28 2f       	mov	r18, r24
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	3e 83       	std	Y+6, r19	; 0x06
 8bc:	2d 83       	std	Y+5, r18	; 0x05
 8be:	8d 81       	ldd	r24, Y+5	; 0x05
 8c0:	9e 81       	ldd	r25, Y+6	; 0x06
 8c2:	00 97       	sbiw	r24, 0x00	; 0
 8c4:	f9 f0       	breq	.+62     	; 0x904 <mcal_gpio_pin_write+0x80>
 8c6:	2d 81       	ldd	r18, Y+5	; 0x05
 8c8:	3e 81       	ldd	r19, Y+6	; 0x06
 8ca:	21 30       	cpi	r18, 0x01	; 1
 8cc:	31 05       	cpc	r19, r1
 8ce:	a9 f5       	brne	.+106    	; 0x93a <mcal_gpio_pin_write+0xb6>
    {
    case HIGH:
      set_bit(base + OFFSET_PORT, pin);
 8d0:	8a 81       	ldd	r24, Y+2	; 0x02
 8d2:	88 2f       	mov	r24, r24
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	02 96       	adiw	r24, 0x02	; 2
 8d8:	dc 01       	movw	r26, r24
 8da:	8a 81       	ldd	r24, Y+2	; 0x02
 8dc:	88 2f       	mov	r24, r24
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	02 96       	adiw	r24, 0x02	; 2
 8e2:	fc 01       	movw	r30, r24
 8e4:	80 81       	ld	r24, Z
 8e6:	48 2f       	mov	r20, r24
 8e8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ea:	28 2f       	mov	r18, r24
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	02 2e       	mov	r0, r18
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <mcal_gpio_pin_write+0x76>
 8f6:	88 0f       	add	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	0a 94       	dec	r0
 8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <mcal_gpio_pin_write+0x72>
 8fe:	84 2b       	or	r24, r20
 900:	8c 93       	st	X, r24
 902:	20 c0       	rjmp	.+64     	; 0x944 <mcal_gpio_pin_write+0xc0>
      break;

    case LOW:
      clr_bit(base + OFFSET_PORT, pin);
 904:	8a 81       	ldd	r24, Y+2	; 0x02
 906:	88 2f       	mov	r24, r24
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	02 96       	adiw	r24, 0x02	; 2
 90c:	dc 01       	movw	r26, r24
 90e:	8a 81       	ldd	r24, Y+2	; 0x02
 910:	88 2f       	mov	r24, r24
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	02 96       	adiw	r24, 0x02	; 2
 916:	fc 01       	movw	r30, r24
 918:	80 81       	ld	r24, Z
 91a:	48 2f       	mov	r20, r24
 91c:	8b 81       	ldd	r24, Y+3	; 0x03
 91e:	28 2f       	mov	r18, r24
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	02 2e       	mov	r0, r18
 928:	02 c0       	rjmp	.+4      	; 0x92e <mcal_gpio_pin_write+0xaa>
 92a:	88 0f       	add	r24, r24
 92c:	99 1f       	adc	r25, r25
 92e:	0a 94       	dec	r0
 930:	e2 f7       	brpl	.-8      	; 0x92a <mcal_gpio_pin_write+0xa6>
 932:	80 95       	com	r24
 934:	84 23       	and	r24, r20
 936:	8c 93       	st	X, r24
 938:	05 c0       	rjmp	.+10     	; 0x944 <mcal_gpio_pin_write+0xc0>
      break;

    default:
      error = GPIO_STATE_INVALID_VALUE;
 93a:	85 e0       	ldi	r24, 0x05	; 5
 93c:	89 83       	std	Y+1, r24	; 0x01
 93e:	02 c0       	rjmp	.+4      	; 0x944 <mcal_gpio_pin_write+0xc0>
      break;
    }
  }
  else
  {
    error = GPIO_STATE_INVALID_ADDR;
 940:	82 e0       	ldi	r24, 0x02	; 2
 942:	89 83       	std	Y+1, r24	; 0x01
  }

  return error;
 944:	89 81       	ldd	r24, Y+1	; 0x01
}
 946:	26 96       	adiw	r28, 0x06	; 6
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	f8 94       	cli
 94c:	de bf       	out	0x3e, r29	; 62
 94e:	0f be       	out	0x3f, r0	; 63
 950:	cd bf       	out	0x3d, r28	; 61
 952:	cf 91       	pop	r28
 954:	df 91       	pop	r29
 956:	08 95       	ret

00000958 <mcal_gpio_pin_toggle>:

GPIO_STATE_ERROR_t mcal_gpio_pin_toggle(u8_t base, u8_t pin)
{
 958:	df 93       	push	r29
 95a:	cf 93       	push	r28
 95c:	00 d0       	rcall	.+0      	; 0x95e <mcal_gpio_pin_toggle+0x6>
 95e:	0f 92       	push	r0
 960:	cd b7       	in	r28, 0x3d	; 61
 962:	de b7       	in	r29, 0x3e	; 62
 964:	8a 83       	std	Y+2, r24	; 0x02
 966:	6b 83       	std	Y+3, r22	; 0x03
  GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
 968:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 96a:	8a 81       	ldd	r24, Y+2	; 0x02
 96c:	89 33       	cpi	r24, 0x39	; 57
 96e:	49 f0       	breq	.+18     	; 0x982 <mcal_gpio_pin_toggle+0x2a>
 970:	8a 81       	ldd	r24, Y+2	; 0x02
 972:	86 33       	cpi	r24, 0x36	; 54
 974:	31 f0       	breq	.+12     	; 0x982 <mcal_gpio_pin_toggle+0x2a>
 976:	8a 81       	ldd	r24, Y+2	; 0x02
 978:	83 33       	cpi	r24, 0x33	; 51
 97a:	19 f0       	breq	.+6      	; 0x982 <mcal_gpio_pin_toggle+0x2a>
 97c:	8a 81       	ldd	r24, Y+2	; 0x02
 97e:	80 33       	cpi	r24, 0x30	; 48
 980:	d1 f4       	brne	.+52     	; 0x9b6 <mcal_gpio_pin_toggle+0x5e>
  {

    tog_bit(base + OFFSET_PORT, pin);
 982:	8a 81       	ldd	r24, Y+2	; 0x02
 984:	88 2f       	mov	r24, r24
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	02 96       	adiw	r24, 0x02	; 2
 98a:	dc 01       	movw	r26, r24
 98c:	8a 81       	ldd	r24, Y+2	; 0x02
 98e:	88 2f       	mov	r24, r24
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	02 96       	adiw	r24, 0x02	; 2
 994:	fc 01       	movw	r30, r24
 996:	80 81       	ld	r24, Z
 998:	48 2f       	mov	r20, r24
 99a:	8b 81       	ldd	r24, Y+3	; 0x03
 99c:	28 2f       	mov	r18, r24
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	02 2e       	mov	r0, r18
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <mcal_gpio_pin_toggle+0x54>
 9a8:	88 0f       	add	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	0a 94       	dec	r0
 9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <mcal_gpio_pin_toggle+0x50>
 9b0:	84 27       	eor	r24, r20
 9b2:	8c 93       	st	X, r24
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <mcal_gpio_pin_toggle+0x62>
  }
  else
  {
    error = GPIO_STATE_INVALID_ADDR;
 9b6:	82 e0       	ldi	r24, 0x02	; 2
 9b8:	89 83       	std	Y+1, r24	; 0x01
  }

  return error;
 9ba:	89 81       	ldd	r24, Y+1	; 0x01
}
 9bc:	0f 90       	pop	r0
 9be:	0f 90       	pop	r0
 9c0:	0f 90       	pop	r0
 9c2:	cf 91       	pop	r28
 9c4:	df 91       	pop	r29
 9c6:	08 95       	ret

000009c8 <mcal_gpio_pin_read>:

GPIO_STATE_ERROR_t mcal_gpio_pin_read(u8_t base, u8_t pin, u8_t *value)
{
 9c8:	df 93       	push	r29
 9ca:	cf 93       	push	r28
 9cc:	00 d0       	rcall	.+0      	; 0x9ce <mcal_gpio_pin_read+0x6>
 9ce:	00 d0       	rcall	.+0      	; 0x9d0 <mcal_gpio_pin_read+0x8>
 9d0:	0f 92       	push	r0
 9d2:	cd b7       	in	r28, 0x3d	; 61
 9d4:	de b7       	in	r29, 0x3e	; 62
 9d6:	8a 83       	std	Y+2, r24	; 0x02
 9d8:	6b 83       	std	Y+3, r22	; 0x03
 9da:	5d 83       	std	Y+5, r21	; 0x05
 9dc:	4c 83       	std	Y+4, r20	; 0x04
  GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
 9de:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 9e0:	8a 81       	ldd	r24, Y+2	; 0x02
 9e2:	89 33       	cpi	r24, 0x39	; 57
 9e4:	49 f0       	breq	.+18     	; 0x9f8 <mcal_gpio_pin_read+0x30>
 9e6:	8a 81       	ldd	r24, Y+2	; 0x02
 9e8:	86 33       	cpi	r24, 0x36	; 54
 9ea:	31 f0       	breq	.+12     	; 0x9f8 <mcal_gpio_pin_read+0x30>
 9ec:	8a 81       	ldd	r24, Y+2	; 0x02
 9ee:	83 33       	cpi	r24, 0x33	; 51
 9f0:	19 f0       	breq	.+6      	; 0x9f8 <mcal_gpio_pin_read+0x30>
 9f2:	8a 81       	ldd	r24, Y+2	; 0x02
 9f4:	80 33       	cpi	r24, 0x30	; 48
 9f6:	e1 f4       	brne	.+56     	; 0xa30 <mcal_gpio_pin_read+0x68>
  {
    if (pin < MAX_PIN_NUMBER)
 9f8:	8b 81       	ldd	r24, Y+3	; 0x03
 9fa:	88 30       	cpi	r24, 0x08	; 8
 9fc:	b0 f4       	brcc	.+44     	; 0xa2a <mcal_gpio_pin_read+0x62>
    {
      *value = bit_is_set(base + OFFSET_PIN, pin);
 9fe:	8a 81       	ldd	r24, Y+2	; 0x02
 a00:	88 2f       	mov	r24, r24
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	fc 01       	movw	r30, r24
 a06:	80 81       	ld	r24, Z
 a08:	28 2f       	mov	r18, r24
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	8b 81       	ldd	r24, Y+3	; 0x03
 a0e:	88 2f       	mov	r24, r24
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	a9 01       	movw	r20, r18
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <mcal_gpio_pin_read+0x52>
 a16:	55 95       	asr	r21
 a18:	47 95       	ror	r20
 a1a:	8a 95       	dec	r24
 a1c:	e2 f7       	brpl	.-8      	; 0xa16 <mcal_gpio_pin_read+0x4e>
 a1e:	ca 01       	movw	r24, r20
 a20:	81 70       	andi	r24, 0x01	; 1
 a22:	ec 81       	ldd	r30, Y+4	; 0x04
 a24:	fd 81       	ldd	r31, Y+5	; 0x05
 a26:	80 83       	st	Z, r24
 a28:	05 c0       	rjmp	.+10     	; 0xa34 <mcal_gpio_pin_read+0x6c>
    }
    else
    {
      error = GPIO_STATE_INVAILD_PIN;
 a2a:	83 e0       	ldi	r24, 0x03	; 3
 a2c:	89 83       	std	Y+1, r24	; 0x01
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <mcal_gpio_pin_read+0x6c>
    }
  }
  else
  {
    error = GPIO_STATE_INVALID_ADDR;
 a30:	82 e0       	ldi	r24, 0x02	; 2
 a32:	89 83       	std	Y+1, r24	; 0x01
  }
  return error;
 a34:	89 81       	ldd	r24, Y+1	; 0x01
}
 a36:	0f 90       	pop	r0
 a38:	0f 90       	pop	r0
 a3a:	0f 90       	pop	r0
 a3c:	0f 90       	pop	r0
 a3e:	0f 90       	pop	r0
 a40:	cf 91       	pop	r28
 a42:	df 91       	pop	r29
 a44:	08 95       	ret

00000a46 <hal_led_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

led_error_t hal_led_init(led_t *the_led)
{
 a46:	df 93       	push	r29
 a48:	cf 93       	push	r28
 a4a:	00 d0       	rcall	.+0      	; 0xa4c <hal_led_init+0x6>
 a4c:	0f 92       	push	r0
 a4e:	cd b7       	in	r28, 0x3d	; 61
 a50:	de b7       	in	r29, 0x3e	; 62
 a52:	9b 83       	std	Y+3, r25	; 0x03
 a54:	8a 83       	std	Y+2, r24	; 0x02
  led_error_t error = LED_GPIO_STATE_SUCCESS;
 a56:	19 82       	std	Y+1, r1	; 0x01

  if (the_led->wiring == CURRENT_SOURCING ||
 a58:	ea 81       	ldd	r30, Y+2	; 0x02
 a5a:	fb 81       	ldd	r31, Y+3	; 0x03
 a5c:	82 81       	ldd	r24, Z+2	; 0x02
 a5e:	88 23       	and	r24, r24
 a60:	29 f0       	breq	.+10     	; 0xa6c <hal_led_init+0x26>
 a62:	ea 81       	ldd	r30, Y+2	; 0x02
 a64:	fb 81       	ldd	r31, Y+3	; 0x03
 a66:	82 81       	ldd	r24, Z+2	; 0x02
 a68:	81 30       	cpi	r24, 0x01	; 1
 a6a:	79 f4       	brne	.+30     	; 0xa8a <hal_led_init+0x44>
      the_led->wiring == CURRENT_SINKING)
  {
    if (GPIO_STATE_SUCCESS == mcal_gpio_pin_init(
 a6c:	ea 81       	ldd	r30, Y+2	; 0x02
 a6e:	fb 81       	ldd	r31, Y+3	; 0x03
 a70:	80 81       	ld	r24, Z
 a72:	ea 81       	ldd	r30, Y+2	; 0x02
 a74:	fb 81       	ldd	r31, Y+3	; 0x03
 a76:	91 81       	ldd	r25, Z+1	; 0x01
 a78:	69 2f       	mov	r22, r25
 a7a:	42 e0       	ldi	r20, 0x02	; 2
 a7c:	0e 94 98 03 	call	0x730	; 0x730 <mcal_gpio_pin_init>
 a80:	88 23       	and	r24, r24
 a82:	29 f0       	breq	.+10     	; 0xa8e <hal_led_init+0x48>
    {
      /* led initialized */
    }
    else
    {
      error = LED_GPIO_STATE_ERROR;
 a84:	82 e0       	ldi	r24, 0x02	; 2
 a86:	89 83       	std	Y+1, r24	; 0x01
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <hal_led_init+0x48>
    }
  }
  else
  {
    error = LED_GPIO_INVALID_CURRENT;
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	89 83       	std	Y+1, r24	; 0x01
  }
  return error;
 a8e:	89 81       	ldd	r24, Y+1	; 0x01
}
 a90:	0f 90       	pop	r0
 a92:	0f 90       	pop	r0
 a94:	0f 90       	pop	r0
 a96:	cf 91       	pop	r28
 a98:	df 91       	pop	r29
 a9a:	08 95       	ret

00000a9c <hal_led_set_state>:

led_error_t hal_led_set_state(led_t *the_led, u8_t value)
{
 a9c:	df 93       	push	r29
 a9e:	cf 93       	push	r28
 aa0:	cd b7       	in	r28, 0x3d	; 61
 aa2:	de b7       	in	r29, 0x3e	; 62
 aa4:	27 97       	sbiw	r28, 0x07	; 7
 aa6:	0f b6       	in	r0, 0x3f	; 63
 aa8:	f8 94       	cli
 aaa:	de bf       	out	0x3e, r29	; 62
 aac:	0f be       	out	0x3f, r0	; 63
 aae:	cd bf       	out	0x3d, r28	; 61
 ab0:	9b 83       	std	Y+3, r25	; 0x03
 ab2:	8a 83       	std	Y+2, r24	; 0x02
 ab4:	6c 83       	std	Y+4, r22	; 0x04
  led_error_t error = LED_GPIO_STATE_SUCCESS;
 ab6:	19 82       	std	Y+1, r1	; 0x01

  if (the_led->wiring == CURRENT_SOURCING)
 ab8:	ea 81       	ldd	r30, Y+2	; 0x02
 aba:	fb 81       	ldd	r31, Y+3	; 0x03
 abc:	82 81       	ldd	r24, Z+2	; 0x02
 abe:	88 23       	and	r24, r24
 ac0:	79 f4       	brne	.+30     	; 0xae0 <hal_led_set_state+0x44>
  {
    if (GPIO_STATE_SUCCESS == mcal_gpio_pin_write(
 ac2:	ea 81       	ldd	r30, Y+2	; 0x02
 ac4:	fb 81       	ldd	r31, Y+3	; 0x03
 ac6:	80 81       	ld	r24, Z
 ac8:	ea 81       	ldd	r30, Y+2	; 0x02
 aca:	fb 81       	ldd	r31, Y+3	; 0x03
 acc:	91 81       	ldd	r25, Z+1	; 0x01
 ace:	69 2f       	mov	r22, r25
 ad0:	4c 81       	ldd	r20, Y+4	; 0x04
 ad2:	0e 94 42 04 	call	0x884	; 0x884 <mcal_gpio_pin_write>
 ad6:	88 23       	and	r24, r24
 ad8:	11 f1       	breq	.+68     	; 0xb1e <hal_led_set_state+0x82>
    {
      /* led value is written */
    }
    else
    {
      error = LED_GPIO_STATE_ERROR;
 ada:	82 e0       	ldi	r24, 0x02	; 2
 adc:	89 83       	std	Y+1, r24	; 0x01
 ade:	1f c0       	rjmp	.+62     	; 0xb1e <hal_led_set_state+0x82>
    }
  }
  else if (the_led->wiring == CURRENT_SINKING)
 ae0:	ea 81       	ldd	r30, Y+2	; 0x02
 ae2:	fb 81       	ldd	r31, Y+3	; 0x03
 ae4:	82 81       	ldd	r24, Z+2	; 0x02
 ae6:	81 30       	cpi	r24, 0x01	; 1
 ae8:	c1 f4       	brne	.+48     	; 0xb1a <hal_led_set_state+0x7e>
  {
    if (GPIO_STATE_SUCCESS == mcal_gpio_pin_write(
 aea:	ea 81       	ldd	r30, Y+2	; 0x02
 aec:	fb 81       	ldd	r31, Y+3	; 0x03
 aee:	80 81       	ld	r24, Z
 af0:	8f 83       	std	Y+7, r24	; 0x07
 af2:	ea 81       	ldd	r30, Y+2	; 0x02
 af4:	fb 81       	ldd	r31, Y+3	; 0x03
 af6:	81 81       	ldd	r24, Z+1	; 0x01
 af8:	8e 83       	std	Y+6, r24	; 0x06
 afa:	1d 82       	std	Y+5, r1	; 0x05
 afc:	8c 81       	ldd	r24, Y+4	; 0x04
 afe:	88 23       	and	r24, r24
 b00:	11 f4       	brne	.+4      	; 0xb06 <hal_led_set_state+0x6a>
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	8d 83       	std	Y+5, r24	; 0x05
 b06:	8f 81       	ldd	r24, Y+7	; 0x07
 b08:	6e 81       	ldd	r22, Y+6	; 0x06
 b0a:	4d 81       	ldd	r20, Y+5	; 0x05
 b0c:	0e 94 42 04 	call	0x884	; 0x884 <mcal_gpio_pin_write>
 b10:	88 23       	and	r24, r24
 b12:	29 f0       	breq	.+10     	; 0xb1e <hal_led_set_state+0x82>
    {
      /* led value is written */
    }
    else
    {
      error = LED_GPIO_STATE_ERROR;
 b14:	82 e0       	ldi	r24, 0x02	; 2
 b16:	89 83       	std	Y+1, r24	; 0x01
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <hal_led_set_state+0x82>
    }
  }
  else
  {
    error = LED_GPIO_INVALID_CURRENT;
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	89 83       	std	Y+1, r24	; 0x01
  }
  return error;
 b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
 b20:	27 96       	adiw	r28, 0x07	; 7
 b22:	0f b6       	in	r0, 0x3f	; 63
 b24:	f8 94       	cli
 b26:	de bf       	out	0x3e, r29	; 62
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	cd bf       	out	0x3d, r28	; 61
 b2c:	cf 91       	pop	r28
 b2e:	df 91       	pop	r29
 b30:	08 95       	ret

00000b32 <hal_led_toggle_state>:

led_error_t hal_led_toggle_state(led_t *the_led)
{
 b32:	df 93       	push	r29
 b34:	cf 93       	push	r28
 b36:	00 d0       	rcall	.+0      	; 0xb38 <hal_led_toggle_state+0x6>
 b38:	0f 92       	push	r0
 b3a:	cd b7       	in	r28, 0x3d	; 61
 b3c:	de b7       	in	r29, 0x3e	; 62
 b3e:	9b 83       	std	Y+3, r25	; 0x03
 b40:	8a 83       	std	Y+2, r24	; 0x02
  led_error_t error = LED_GPIO_STATE_SUCCESS;
 b42:	19 82       	std	Y+1, r1	; 0x01

  if (the_led->wiring == CURRENT_SOURCING)
 b44:	ea 81       	ldd	r30, Y+2	; 0x02
 b46:	fb 81       	ldd	r31, Y+3	; 0x03
 b48:	82 81       	ldd	r24, Z+2	; 0x02
 b4a:	88 23       	and	r24, r24
 b4c:	69 f4       	brne	.+26     	; 0xb68 <hal_led_toggle_state+0x36>
  {
    if (GPIO_STATE_SUCCESS == mcal_gpio_pin_toggle(
 b4e:	ea 81       	ldd	r30, Y+2	; 0x02
 b50:	fb 81       	ldd	r31, Y+3	; 0x03
 b52:	80 81       	ld	r24, Z
 b54:	ea 81       	ldd	r30, Y+2	; 0x02
 b56:	fb 81       	ldd	r31, Y+3	; 0x03
 b58:	91 81       	ldd	r25, Z+1	; 0x01
 b5a:	69 2f       	mov	r22, r25
 b5c:	0e 94 ac 04 	call	0x958	; 0x958 <mcal_gpio_pin_toggle>
 b60:	88 23       	and	r24, r24
 b62:	11 f0       	breq	.+4      	; 0xb68 <hal_led_toggle_state+0x36>
    {
      /* led value is written */
    }
    else
    {
      error = LED_GPIO_STATE_ERROR;
 b64:	82 e0       	ldi	r24, 0x02	; 2
 b66:	89 83       	std	Y+1, r24	; 0x01
    }
  }
  return error;
 b68:	89 81       	ldd	r24, Y+1	; 0x01
}
 b6a:	0f 90       	pop	r0
 b6c:	0f 90       	pop	r0
 b6e:	0f 90       	pop	r0
 b70:	cf 91       	pop	r28
 b72:	df 91       	pop	r29
 b74:	08 95       	ret

00000b76 <hal_led_get_state>:

led_error_t hal_led_get_state(led_t *the_led, u8_t *result)
{
 b76:	df 93       	push	r29
 b78:	cf 93       	push	r28
 b7a:	cd b7       	in	r28, 0x3d	; 61
 b7c:	de b7       	in	r29, 0x3e	; 62
 b7e:	27 97       	sbiw	r28, 0x07	; 7
 b80:	0f b6       	in	r0, 0x3f	; 63
 b82:	f8 94       	cli
 b84:	de bf       	out	0x3e, r29	; 62
 b86:	0f be       	out	0x3f, r0	; 63
 b88:	cd bf       	out	0x3d, r28	; 61
 b8a:	9c 83       	std	Y+4, r25	; 0x04
 b8c:	8b 83       	std	Y+3, r24	; 0x03
 b8e:	7e 83       	std	Y+6, r23	; 0x06
 b90:	6d 83       	std	Y+5, r22	; 0x05
  led_error_t error = LED_GPIO_STATE_SUCCESS;
 b92:	19 82       	std	Y+1, r1	; 0x01

  u8_t pin;

  if (GPIO_STATE_SUCCESS == mcal_gpio_pin_read(
 b94:	eb 81       	ldd	r30, Y+3	; 0x03
 b96:	fc 81       	ldd	r31, Y+4	; 0x04
 b98:	80 81       	ld	r24, Z
 b9a:	eb 81       	ldd	r30, Y+3	; 0x03
 b9c:	fc 81       	ldd	r31, Y+4	; 0x04
 b9e:	91 81       	ldd	r25, Z+1	; 0x01
 ba0:	9e 01       	movw	r18, r28
 ba2:	2e 5f       	subi	r18, 0xFE	; 254
 ba4:	3f 4f       	sbci	r19, 0xFF	; 255
 ba6:	69 2f       	mov	r22, r25
 ba8:	a9 01       	movw	r20, r18
 baa:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <mcal_gpio_pin_read>
 bae:	88 23       	and	r24, r24
 bb0:	e9 f4       	brne	.+58     	; 0xbec <hal_led_get_state+0x76>
                           the_led->base_addr,
                           the_led->pin_num, &pin))
  {
    if (the_led->wiring == CURRENT_SOURCING)
 bb2:	eb 81       	ldd	r30, Y+3	; 0x03
 bb4:	fc 81       	ldd	r31, Y+4	; 0x04
 bb6:	82 81       	ldd	r24, Z+2	; 0x02
 bb8:	88 23       	and	r24, r24
 bba:	29 f4       	brne	.+10     	; 0xbc6 <hal_led_get_state+0x50>
    {
      *result = pin;
 bbc:	8a 81       	ldd	r24, Y+2	; 0x02
 bbe:	ed 81       	ldd	r30, Y+5	; 0x05
 bc0:	fe 81       	ldd	r31, Y+6	; 0x06
 bc2:	80 83       	st	Z, r24
 bc4:	15 c0       	rjmp	.+42     	; 0xbf0 <hal_led_get_state+0x7a>
    }
    else if (the_led->wiring == CURRENT_SINKING)
 bc6:	eb 81       	ldd	r30, Y+3	; 0x03
 bc8:	fc 81       	ldd	r31, Y+4	; 0x04
 bca:	82 81       	ldd	r24, Z+2	; 0x02
 bcc:	81 30       	cpi	r24, 0x01	; 1
 bce:	59 f4       	brne	.+22     	; 0xbe6 <hal_led_get_state+0x70>
    {
      *result = !pin;
 bd0:	8a 81       	ldd	r24, Y+2	; 0x02
 bd2:	1f 82       	std	Y+7, r1	; 0x07
 bd4:	88 23       	and	r24, r24
 bd6:	11 f4       	brne	.+4      	; 0xbdc <hal_led_get_state+0x66>
 bd8:	81 e0       	ldi	r24, 0x01	; 1
 bda:	8f 83       	std	Y+7, r24	; 0x07
 bdc:	ed 81       	ldd	r30, Y+5	; 0x05
 bde:	fe 81       	ldd	r31, Y+6	; 0x06
 be0:	8f 81       	ldd	r24, Y+7	; 0x07
 be2:	80 83       	st	Z, r24
 be4:	05 c0       	rjmp	.+10     	; 0xbf0 <hal_led_get_state+0x7a>
    }
    else
    {
      error = LED_GPIO_INVALID_CURRENT;
 be6:	81 e0       	ldi	r24, 0x01	; 1
 be8:	89 83       	std	Y+1, r24	; 0x01
 bea:	02 c0       	rjmp	.+4      	; 0xbf0 <hal_led_get_state+0x7a>
    }
  }
  else
  {
    error = LED_GPIO_STATE_ERROR;
 bec:	82 e0       	ldi	r24, 0x02	; 2
 bee:	89 83       	std	Y+1, r24	; 0x01
  }

  return error;
 bf0:	89 81       	ldd	r24, Y+1	; 0x01
 bf2:	27 96       	adiw	r28, 0x07	; 7
 bf4:	0f b6       	in	r0, 0x3f	; 63
 bf6:	f8 94       	cli
 bf8:	de bf       	out	0x3e, r29	; 62
 bfa:	0f be       	out	0x3f, r0	; 63
 bfc:	cd bf       	out	0x3d, r28	; 61
 bfe:	cf 91       	pop	r28
 c00:	df 91       	pop	r29
 c02:	08 95       	ret

00000c04 <hal_button_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

button_error_t hal_button_init(button_t *the_button)
{
 c04:	df 93       	push	r29
 c06:	cf 93       	push	r28
 c08:	00 d0       	rcall	.+0      	; 0xc0a <hal_button_init+0x6>
 c0a:	00 d0       	rcall	.+0      	; 0xc0c <hal_button_init+0x8>
 c0c:	0f 92       	push	r0
 c0e:	cd b7       	in	r28, 0x3d	; 61
 c10:	de b7       	in	r29, 0x3e	; 62
 c12:	9b 83       	std	Y+3, r25	; 0x03
 c14:	8a 83       	std	Y+2, r24	; 0x02
    button_error_t error = BUTTON_GPIO_STATE_SUCCESS;
 c16:	19 82       	std	Y+1, r1	; 0x01

    switch (the_button->connection)
 c18:	ea 81       	ldd	r30, Y+2	; 0x02
 c1a:	fb 81       	ldd	r31, Y+3	; 0x03
 c1c:	82 81       	ldd	r24, Z+2	; 0x02
 c1e:	28 2f       	mov	r18, r24
 c20:	30 e0       	ldi	r19, 0x00	; 0
 c22:	3d 83       	std	Y+5, r19	; 0x05
 c24:	2c 83       	std	Y+4, r18	; 0x04
 c26:	8c 81       	ldd	r24, Y+4	; 0x04
 c28:	9d 81       	ldd	r25, Y+5	; 0x05
 c2a:	00 97       	sbiw	r24, 0x00	; 0
 c2c:	31 f0       	breq	.+12     	; 0xc3a <hal_button_init+0x36>
 c2e:	2c 81       	ldd	r18, Y+4	; 0x04
 c30:	3d 81       	ldd	r19, Y+5	; 0x05
 c32:	21 30       	cpi	r18, 0x01	; 1
 c34:	31 05       	cpc	r19, r1
 c36:	81 f0       	breq	.+32     	; 0xc58 <hal_button_init+0x54>
 c38:	1e c0       	rjmp	.+60     	; 0xc76 <hal_button_init+0x72>
    {
    case PULLUP_CONNECTION:
        if (GPIO_STATE_SUCCESS == mcal_gpio_pin_init(
 c3a:	ea 81       	ldd	r30, Y+2	; 0x02
 c3c:	fb 81       	ldd	r31, Y+3	; 0x03
 c3e:	80 81       	ld	r24, Z
 c40:	ea 81       	ldd	r30, Y+2	; 0x02
 c42:	fb 81       	ldd	r31, Y+3	; 0x03
 c44:	91 81       	ldd	r25, Z+1	; 0x01
 c46:	69 2f       	mov	r22, r25
 c48:	40 e0       	ldi	r20, 0x00	; 0
 c4a:	0e 94 98 03 	call	0x730	; 0x730 <mcal_gpio_pin_init>
 c4e:	88 23       	and	r24, r24
 c50:	a1 f0       	breq	.+40     	; 0xc7a <hal_button_init+0x76>
        {
            /* button initialized */
        }
        else
        {
            error = BUTTON_GPIO_STATE_ERROR;
 c52:	82 e0       	ldi	r24, 0x02	; 2
 c54:	89 83       	std	Y+1, r24	; 0x01
 c56:	11 c0       	rjmp	.+34     	; 0xc7a <hal_button_init+0x76>
        }
        break;

    case PULLDOWN_CONNECTION:
        if (GPIO_STATE_SUCCESS == mcal_gpio_pin_init(
 c58:	ea 81       	ldd	r30, Y+2	; 0x02
 c5a:	fb 81       	ldd	r31, Y+3	; 0x03
 c5c:	80 81       	ld	r24, Z
 c5e:	ea 81       	ldd	r30, Y+2	; 0x02
 c60:	fb 81       	ldd	r31, Y+3	; 0x03
 c62:	91 81       	ldd	r25, Z+1	; 0x01
 c64:	69 2f       	mov	r22, r25
 c66:	41 e0       	ldi	r20, 0x01	; 1
 c68:	0e 94 98 03 	call	0x730	; 0x730 <mcal_gpio_pin_init>
 c6c:	88 23       	and	r24, r24
 c6e:	29 f0       	breq	.+10     	; 0xc7a <hal_button_init+0x76>
        {
            /* button initialized */
        }
        else
        {
            error = BUTTON_GPIO_STATE_ERROR;
 c70:	82 e0       	ldi	r24, 0x02	; 2
 c72:	89 83       	std	Y+1, r24	; 0x01
 c74:	02 c0       	rjmp	.+4      	; 0xc7a <hal_button_init+0x76>
        }
        break;

    default:
        error = BUTTON_GPIO_INVALID_CONNECTION;
 c76:	81 e0       	ldi	r24, 0x01	; 1
 c78:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return error;
 c7a:	89 81       	ldd	r24, Y+1	; 0x01
}
 c7c:	0f 90       	pop	r0
 c7e:	0f 90       	pop	r0
 c80:	0f 90       	pop	r0
 c82:	0f 90       	pop	r0
 c84:	0f 90       	pop	r0
 c86:	cf 91       	pop	r28
 c88:	df 91       	pop	r29
 c8a:	08 95       	ret

00000c8c <hal_button_get_state>:

button_error_t hal_button_get_state(
    button_t *the_button,
    button_states_t *result)
{
 c8c:	df 93       	push	r29
 c8e:	cf 93       	push	r28
 c90:	cd b7       	in	r28, 0x3d	; 61
 c92:	de b7       	in	r29, 0x3e	; 62
 c94:	27 97       	sbiw	r28, 0x07	; 7
 c96:	0f b6       	in	r0, 0x3f	; 63
 c98:	f8 94       	cli
 c9a:	de bf       	out	0x3e, r29	; 62
 c9c:	0f be       	out	0x3f, r0	; 63
 c9e:	cd bf       	out	0x3d, r28	; 61
 ca0:	9c 83       	std	Y+4, r25	; 0x04
 ca2:	8b 83       	std	Y+3, r24	; 0x03
 ca4:	7e 83       	std	Y+6, r23	; 0x06
 ca6:	6d 83       	std	Y+5, r22	; 0x05
    button_error_t error = BUTTON_GPIO_STATE_SUCCESS;
 ca8:	19 82       	std	Y+1, r1	; 0x01

    button_states_t states;

    if (GPIO_STATE_SUCCESS == mcal_gpio_pin_read(
 caa:	eb 81       	ldd	r30, Y+3	; 0x03
 cac:	fc 81       	ldd	r31, Y+4	; 0x04
 cae:	80 81       	ld	r24, Z
 cb0:	eb 81       	ldd	r30, Y+3	; 0x03
 cb2:	fc 81       	ldd	r31, Y+4	; 0x04
 cb4:	91 81       	ldd	r25, Z+1	; 0x01
 cb6:	9e 01       	movw	r18, r28
 cb8:	2e 5f       	subi	r18, 0xFE	; 254
 cba:	3f 4f       	sbci	r19, 0xFF	; 255
 cbc:	69 2f       	mov	r22, r25
 cbe:	a9 01       	movw	r20, r18
 cc0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <mcal_gpio_pin_read>
 cc4:	88 23       	and	r24, r24
 cc6:	e9 f4       	brne	.+58     	; 0xd02 <hal_button_get_state+0x76>
                             the_button->base_addr,
                             the_button->pin_num, &states))
    {
        if (the_button->connection == PULLDOWN_CONNECTION)
 cc8:	eb 81       	ldd	r30, Y+3	; 0x03
 cca:	fc 81       	ldd	r31, Y+4	; 0x04
 ccc:	82 81       	ldd	r24, Z+2	; 0x02
 cce:	81 30       	cpi	r24, 0x01	; 1
 cd0:	29 f4       	brne	.+10     	; 0xcdc <hal_button_get_state+0x50>
        {
            *result = (button_states_t)states;
 cd2:	8a 81       	ldd	r24, Y+2	; 0x02
 cd4:	ed 81       	ldd	r30, Y+5	; 0x05
 cd6:	fe 81       	ldd	r31, Y+6	; 0x06
 cd8:	80 83       	st	Z, r24
 cda:	15 c0       	rjmp	.+42     	; 0xd06 <hal_button_get_state+0x7a>
        }
        else if (the_button->connection == PULLUP_CONNECTION)
 cdc:	eb 81       	ldd	r30, Y+3	; 0x03
 cde:	fc 81       	ldd	r31, Y+4	; 0x04
 ce0:	82 81       	ldd	r24, Z+2	; 0x02
 ce2:	88 23       	and	r24, r24
 ce4:	59 f4       	brne	.+22     	; 0xcfc <hal_button_get_state+0x70>
        {
            *result = (button_states_t)(!states);
 ce6:	8a 81       	ldd	r24, Y+2	; 0x02
 ce8:	1f 82       	std	Y+7, r1	; 0x07
 cea:	88 23       	and	r24, r24
 cec:	11 f4       	brne	.+4      	; 0xcf2 <hal_button_get_state+0x66>
 cee:	81 e0       	ldi	r24, 0x01	; 1
 cf0:	8f 83       	std	Y+7, r24	; 0x07
 cf2:	ed 81       	ldd	r30, Y+5	; 0x05
 cf4:	fe 81       	ldd	r31, Y+6	; 0x06
 cf6:	8f 81       	ldd	r24, Y+7	; 0x07
 cf8:	80 83       	st	Z, r24
 cfa:	05 c0       	rjmp	.+10     	; 0xd06 <hal_button_get_state+0x7a>
        }
        else
        {
            error = BUTTON_GPIO_INVALID_CONNECTION;
 cfc:	81 e0       	ldi	r24, 0x01	; 1
 cfe:	89 83       	std	Y+1, r24	; 0x01
 d00:	02 c0       	rjmp	.+4      	; 0xd06 <hal_button_get_state+0x7a>
        }
    }
    else
    {
        error = BUTTON_GPIO_STATE_ERROR;
 d02:	82 e0       	ldi	r24, 0x02	; 2
 d04:	89 83       	std	Y+1, r24	; 0x01
    }

    return error;
 d06:	89 81       	ldd	r24, Y+1	; 0x01
 d08:	27 96       	adiw	r28, 0x07	; 7
 d0a:	0f b6       	in	r0, 0x3f	; 63
 d0c:	f8 94       	cli
 d0e:	de bf       	out	0x3e, r29	; 62
 d10:	0f be       	out	0x3f, r0	; 63
 d12:	cd bf       	out	0x3d, r28	; 61
 d14:	cf 91       	pop	r28
 d16:	df 91       	pop	r29
 d18:	08 95       	ret

00000d1a <main>:
} operationMode;
/*************************************************************************/
/*                               Main test                               */
/*************************************************************************/
int main(void)
{
 d1a:	df 93       	push	r29
 d1c:	cf 93       	push	r28
 d1e:	00 d0       	rcall	.+0      	; 0xd20 <main+0x6>
 d20:	0f 92       	push	r0
 d22:	cd b7       	in	r28, 0x3d	; 61
 d24:	de b7       	in	r29, 0x3e	; 62
  operationMode mode = PORT_PROGRAM;
 d26:	19 82       	std	Y+1, r1	; 0x01

  switch (mode)
 d28:	89 81       	ldd	r24, Y+1	; 0x01
 d2a:	28 2f       	mov	r18, r24
 d2c:	30 e0       	ldi	r19, 0x00	; 0
 d2e:	3b 83       	std	Y+3, r19	; 0x03
 d30:	2a 83       	std	Y+2, r18	; 0x02
 d32:	8a 81       	ldd	r24, Y+2	; 0x02
 d34:	9b 81       	ldd	r25, Y+3	; 0x03
 d36:	81 30       	cpi	r24, 0x01	; 1
 d38:	91 05       	cpc	r25, r1
 d3a:	61 f0       	breq	.+24     	; 0xd54 <main+0x3a>
 d3c:	2a 81       	ldd	r18, Y+2	; 0x02
 d3e:	3b 81       	ldd	r19, Y+3	; 0x03
 d40:	22 30       	cpi	r18, 0x02	; 2
 d42:	31 05       	cpc	r19, r1
 d44:	51 f0       	breq	.+20     	; 0xd5a <main+0x40>
 d46:	8a 81       	ldd	r24, Y+2	; 0x02
 d48:	9b 81       	ldd	r25, Y+3	; 0x03
 d4a:	00 97       	sbiw	r24, 0x00	; 0
 d4c:	41 f4       	brne	.+16     	; 0xd5e <main+0x44>
  {
  case PORT_PROGRAM:
  {
    execute_port_program();
 d4e:	0e 94 3e 00 	call	0x7c	; 0x7c <execute_port_program>
 d52:	05 c0       	rjmp	.+10     	; 0xd5e <main+0x44>
    break;
  }

  case GPIO_PROGRAM:
  {
    execute_gpio_program();
 d54:	0e 94 69 00 	call	0xd2	; 0xd2 <execute_gpio_program>
 d58:	02 c0       	rjmp	.+4      	; 0xd5e <main+0x44>
    break;
  }

  case INTERRUPT_PROGRAM:
  {
    execute_interrupt_program();
 d5a:	0e 94 c9 00 	call	0x192	; 0x192 <execute_interrupt_program>
  {
    /* do nothing */
  }
  }

  return 0;
 d5e:	80 e0       	ldi	r24, 0x00	; 0
 d60:	90 e0       	ldi	r25, 0x00	; 0
}
 d62:	0f 90       	pop	r0
 d64:	0f 90       	pop	r0
 d66:	0f 90       	pop	r0
 d68:	cf 91       	pop	r28
 d6a:	df 91       	pop	r29
 d6c:	08 95       	ret

00000d6e <_exit>:
 d6e:	f8 94       	cli

00000d70 <__stop_program>:
 d70:	ff cf       	rjmp	.-2      	; 0xd70 <__stop_program>
