
stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000443  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000255  00000000  00000000  00000847  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000325  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00000dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000022e  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000156  00000000  00000000  000010ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 76 00 	call	0xec	; 0xec <main>
  74:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <display_initialization>:

void display_initialization()
{

  /* make enable pins of 7 segment as output */
  SEGMENT_ENABLE_DDR = 0b00111111;
  7c:	8f e3       	ldi	r24, 0x3F	; 63
  7e:	8a bb       	out	0x1a, r24	; 26
  SEGMENT_CONTROL_DDR = 0b00001111;
  80:	8f e0       	ldi	r24, 0x0F	; 15
  82:	84 bb       	out	0x14, r24	; 20
  84:	08 95       	ret

00000086 <display_enable>:
}

void display_enable(u8_t pin, control_t control)
{
  if (control == OFF)
  86:	61 11       	cpse	r22, r1
  88:	0e c0       	rjmp	.+28     	; 0xa6 <display_enable+0x20>
  {
    clr_bit(SEGMENT_ENABLE_PORT, pin);
  8a:	4b b3       	in	r20, 0x1b	; 27
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	b9 01       	movw	r22, r18
  92:	02 c0       	rjmp	.+4      	; 0x98 <display_enable+0x12>
  94:	66 0f       	add	r22, r22
  96:	77 1f       	adc	r23, r23
  98:	8a 95       	dec	r24
  9a:	e2 f7       	brpl	.-8      	; 0x94 <display_enable+0xe>
  9c:	cb 01       	movw	r24, r22
  9e:	80 95       	com	r24
  a0:	84 23       	and	r24, r20
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	08 95       	ret
  }
  else
  {
    set_bit(SEGMENT_ENABLE_PORT, pin);
  a6:	4b b3       	in	r20, 0x1b	; 27
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	b9 01       	movw	r22, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <display_enable+0x2e>
  b0:	66 0f       	add	r22, r22
  b2:	77 1f       	adc	r23, r23
  b4:	8a 95       	dec	r24
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <display_enable+0x2a>
  b8:	cb 01       	movw	r24, r22
  ba:	84 2b       	or	r24, r20
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	08 95       	ret

000000c0 <display_write>:
  }
}

void display_write(u8_t number, u8_t digit)
{
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	d8 2f       	mov	r29, r24
  c8:	16 2f       	mov	r17, r22
  ca:	c0 e0       	ldi	r28, 0x00	; 0
  for (int i = 0; i < 5; i++)
  {
    display_enable(i, OFF);
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	8c 2f       	mov	r24, r28
  d0:	0e 94 43 00 	call	0x86	; 0x86 <display_enable>
  d4:	cf 5f       	subi	r28, 0xFF	; 255
  }
}

void display_write(u8_t number, u8_t digit)
{
  for (int i = 0; i < 5; i++)
  d6:	c5 30       	cpi	r28, 0x05	; 5
  d8:	c9 f7       	brne	.-14     	; 0xcc <display_write+0xc>
  {
    display_enable(i, OFF);
  }

  /*enable corrsponding digit */
  display_enable(digit, ON);
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	81 2f       	mov	r24, r17
  de:	0e 94 43 00 	call	0x86	; 0x86 <display_enable>

  SEGMENT_CONTROL_PORT = number;
  e2:	d5 bb       	out	0x15, r29	; 21
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	08 95       	ret

000000ec <main>:
/*                   Static Functions Implementations                    */
/*************************************************************************/

static void system_init()
{
  display_initialization();
  ec:	0e 94 3e 00 	call	0x7c	; 0x7c <display_initialization>
  timer_initialization();
  f0:	0e 94 43 01 	call	0x286	; 0x286 <timer_initialization>
  {
    display_write(seconds, 0);
  }
  else
  {
    display_write(seconds % 10, 0);
  f4:	cd ec       	ldi	r28, 0xCD	; 205
  timer_initialization();
}

static void updateTime()
{
  if (seconds == 60)
  f6:	80 91 62 00 	lds	r24, 0x0062
  fa:	8c 33       	cpi	r24, 0x3C	; 60
  fc:	39 f4       	brne	.+14     	; 0x10c <main+0x20>
  {
    seconds = 0;
  fe:	10 92 62 00 	sts	0x0062, r1
    minutes++;
 102:	80 91 61 00 	lds	r24, 0x0061
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 61 00 	sts	0x0061, r24
  }

  if (minutes == 60)
 10c:	80 91 61 00 	lds	r24, 0x0061
 110:	8c 33       	cpi	r24, 0x3C	; 60
 112:	39 f4       	brne	.+14     	; 0x122 <main+0x36>
  {
    minutes = 0;
 114:	10 92 61 00 	sts	0x0061, r1
    hours++;
 118:	80 91 60 00 	lds	r24, 0x0060
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	80 93 60 00 	sts	0x0060, r24
  }

  if (hours == 24)
 122:	80 91 60 00 	lds	r24, 0x0060
 126:	88 31       	cpi	r24, 0x18	; 24
 128:	31 f4       	brne	.+12     	; 0x136 <main+0x4a>
  {
    seconds = 0;
 12a:	10 92 62 00 	sts	0x0062, r1
    minutes = 0;
 12e:	10 92 61 00 	sts	0x0061, r1
    hours = 0;
 132:	10 92 60 00 	sts	0x0060, r1
  }
}

static void updateDisplay()
{
  if (seconds < 10)
 136:	80 91 62 00 	lds	r24, 0x0062
 13a:	8a 30       	cpi	r24, 0x0A	; 10
 13c:	30 f4       	brcc	.+12     	; 0x14a <main+0x5e>
  {
    display_write(seconds, 0);
 13e:	80 91 62 00 	lds	r24, 0x0062
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	0e 94 60 00 	call	0xc0	; 0xc0 <display_write>
 148:	28 c0       	rjmp	.+80     	; 0x19a <main+0xae>
  }
  else
  {
    display_write(seconds % 10, 0);
 14a:	80 91 62 00 	lds	r24, 0x0062
 14e:	8c 9f       	mul	r24, r28
 150:	91 2d       	mov	r25, r1
 152:	11 24       	eor	r1, r1
 154:	96 95       	lsr	r25
 156:	96 95       	lsr	r25
 158:	96 95       	lsr	r25
 15a:	99 0f       	add	r25, r25
 15c:	29 2f       	mov	r18, r25
 15e:	22 0f       	add	r18, r18
 160:	22 0f       	add	r18, r18
 162:	92 0f       	add	r25, r18
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	89 1b       	sub	r24, r25
 168:	0e 94 60 00 	call	0xc0	; 0xc0 <display_write>
    display_write((seconds / 10) % 10, 1);
 16c:	80 91 62 00 	lds	r24, 0x0062
 170:	8c 9f       	mul	r24, r28
 172:	81 2d       	mov	r24, r1
 174:	11 24       	eor	r1, r1
 176:	86 95       	lsr	r24
 178:	86 95       	lsr	r24
 17a:	86 95       	lsr	r24
 17c:	8c 9f       	mul	r24, r28
 17e:	91 2d       	mov	r25, r1
 180:	11 24       	eor	r1, r1
 182:	96 95       	lsr	r25
 184:	96 95       	lsr	r25
 186:	96 95       	lsr	r25
 188:	99 0f       	add	r25, r25
 18a:	29 2f       	mov	r18, r25
 18c:	22 0f       	add	r18, r18
 18e:	22 0f       	add	r18, r18
 190:	92 0f       	add	r25, r18
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	89 1b       	sub	r24, r25
 196:	0e 94 60 00 	call	0xc0	; 0xc0 <display_write>
  }
  if (minutes < 10)
 19a:	80 91 61 00 	lds	r24, 0x0061
 19e:	8a 30       	cpi	r24, 0x0A	; 10
 1a0:	30 f4       	brcc	.+12     	; 0x1ae <main+0xc2>
  {
    display_write(minutes, 2);
 1a2:	80 91 61 00 	lds	r24, 0x0061
 1a6:	62 e0       	ldi	r22, 0x02	; 2
 1a8:	0e 94 60 00 	call	0xc0	; 0xc0 <display_write>
 1ac:	28 c0       	rjmp	.+80     	; 0x1fe <main+0x112>
  }
  else
  {
    display_write(minutes % 10, 2);
 1ae:	80 91 61 00 	lds	r24, 0x0061
 1b2:	8c 9f       	mul	r24, r28
 1b4:	91 2d       	mov	r25, r1
 1b6:	11 24       	eor	r1, r1
 1b8:	96 95       	lsr	r25
 1ba:	96 95       	lsr	r25
 1bc:	96 95       	lsr	r25
 1be:	99 0f       	add	r25, r25
 1c0:	29 2f       	mov	r18, r25
 1c2:	22 0f       	add	r18, r18
 1c4:	22 0f       	add	r18, r18
 1c6:	92 0f       	add	r25, r18
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	89 1b       	sub	r24, r25
 1cc:	0e 94 60 00 	call	0xc0	; 0xc0 <display_write>
    display_write((minutes / 10) % 10, 3);
 1d0:	80 91 61 00 	lds	r24, 0x0061
 1d4:	8c 9f       	mul	r24, r28
 1d6:	81 2d       	mov	r24, r1
 1d8:	11 24       	eor	r1, r1
 1da:	86 95       	lsr	r24
 1dc:	86 95       	lsr	r24
 1de:	86 95       	lsr	r24
 1e0:	8c 9f       	mul	r24, r28
 1e2:	91 2d       	mov	r25, r1
 1e4:	11 24       	eor	r1, r1
 1e6:	96 95       	lsr	r25
 1e8:	96 95       	lsr	r25
 1ea:	96 95       	lsr	r25
 1ec:	99 0f       	add	r25, r25
 1ee:	29 2f       	mov	r18, r25
 1f0:	22 0f       	add	r18, r18
 1f2:	22 0f       	add	r18, r18
 1f4:	92 0f       	add	r25, r18
 1f6:	63 e0       	ldi	r22, 0x03	; 3
 1f8:	89 1b       	sub	r24, r25
 1fa:	0e 94 60 00 	call	0xc0	; 0xc0 <display_write>
  }
  if (hours < 10)
 1fe:	80 91 60 00 	lds	r24, 0x0060
 202:	8a 30       	cpi	r24, 0x0A	; 10
 204:	30 f4       	brcc	.+12     	; 0x212 <main+0x126>
  {
    display_write(hours, 4);
 206:	80 91 60 00 	lds	r24, 0x0060
 20a:	64 e0       	ldi	r22, 0x04	; 4
 20c:	0e 94 60 00 	call	0xc0	; 0xc0 <display_write>
 210:	72 cf       	rjmp	.-284    	; 0xf6 <main+0xa>
  }
  else
  {
    display_write(hours % 10, 2);
 212:	80 91 60 00 	lds	r24, 0x0060
 216:	8c 9f       	mul	r24, r28
 218:	91 2d       	mov	r25, r1
 21a:	11 24       	eor	r1, r1
 21c:	96 95       	lsr	r25
 21e:	96 95       	lsr	r25
 220:	96 95       	lsr	r25
 222:	99 0f       	add	r25, r25
 224:	29 2f       	mov	r18, r25
 226:	22 0f       	add	r18, r18
 228:	22 0f       	add	r18, r18
 22a:	92 0f       	add	r25, r18
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	89 1b       	sub	r24, r25
 230:	0e 94 60 00 	call	0xc0	; 0xc0 <display_write>
    display_write((hours / 10) % 10, 5);
 234:	80 91 60 00 	lds	r24, 0x0060
 238:	8c 9f       	mul	r24, r28
 23a:	81 2d       	mov	r24, r1
 23c:	11 24       	eor	r1, r1
 23e:	86 95       	lsr	r24
 240:	86 95       	lsr	r24
 242:	86 95       	lsr	r24
 244:	8c 9f       	mul	r24, r28
 246:	91 2d       	mov	r25, r1
 248:	11 24       	eor	r1, r1
 24a:	96 95       	lsr	r25
 24c:	96 95       	lsr	r25
 24e:	96 95       	lsr	r25
 250:	99 0f       	add	r25, r25
 252:	29 2f       	mov	r18, r25
 254:	22 0f       	add	r18, r18
 256:	22 0f       	add	r18, r18
 258:	92 0f       	add	r25, r18
 25a:	65 e0       	ldi	r22, 0x05	; 5
 25c:	89 1b       	sub	r24, r25
 25e:	0e 94 60 00 	call	0xc0	; 0xc0 <display_write>
 262:	49 cf       	rjmp	.-366    	; 0xf6 <main+0xa>

00000264 <__vector_6>:

/*************************************************************************/
/*                            Interrupt Handlers                         */
/*************************************************************************/
ISR(TIMER1_COMPA_vect)
{
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	8f 93       	push	r24
  seconds++;
 270:	80 91 62 00 	lds	r24, 0x0062
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	80 93 62 00 	sts	0x0062, r24
 27a:	8f 91       	pop	r24
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <timer_initialization>:

void timer_initialization()
{

  /* enable global interrupts */
  SREG |= (1 << 7);
 286:	8f b7       	in	r24, 0x3f	; 63
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	8f bf       	out	0x3f, r24	; 63

  /*init the counter register*/
  TCNT1 = 0;
 28c:	1d bc       	out	0x2d, r1	; 45
 28e:	1c bc       	out	0x2c, r1	; 44

  /*adjust compare match to 976 
    using prescaller 1024 resolution is 1024/1MHZ timer tick = 1024 Micro 
    then 1 seconds / 1024 Microsecond = 976
  */
  OCR1A = 976;
 290:	80 ed       	ldi	r24, 0xD0	; 208
 292:	93 e0       	ldi	r25, 0x03	; 3
 294:	9b bd       	out	0x2b, r25	; 43
 296:	8a bd       	out	0x2a, r24	; 42

  /* enable timer 1 compare register interrupt */
  TIMSK |= (1 << OCIE1A);
 298:	89 b7       	in	r24, 0x39	; 57
 29a:	80 61       	ori	r24, 0x10	; 16
 29c:	89 bf       	out	0x39, r24	; 57

  /*init configuration register to enable
  CTC Mode
  prescaller 1024
  */
  TCCR1A = (1 << FOC1A);
 29e:	88 e0       	ldi	r24, 0x08	; 8
 2a0:	8f bd       	out	0x2f, r24	; 47
  TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS12);
 2a2:	8d e0       	ldi	r24, 0x0D	; 13
 2a4:	8e bd       	out	0x2e, r24	; 46
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
