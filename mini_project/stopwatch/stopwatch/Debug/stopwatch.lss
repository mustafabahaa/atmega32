
stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001f1  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000012b  00000000  00000000  00000491  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000193  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c8  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b7  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00000ba3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_timer>:
  init_timer();
}

void init_timer()
{
  SREG |= (1 << 7); /* Enable global interrupts in MC */
  7c:	8f b7       	in	r24, 0x3f	; 63
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8f bf       	out	0x3f, r24	; 63

  TCNT1 = 0; /* Set timer1 initial count to zero */
  82:	1d bc       	out	0x2d, r1	; 45
  84:	1c bc       	out	0x2c, r1	; 44

  /* using 1024 prescaller / tick takes 1024 Micro  
  then 1 second / 1024 micro = 976
  */
  OCR1A = 976;
  86:	80 ed       	ldi	r24, 0xD0	; 208
  88:	93 e0       	ldi	r25, 0x03	; 3
  8a:	9b bd       	out	0x2b, r25	; 43
  8c:	8a bd       	out	0x2a, r24	; 42

  TIMSK |= (1 << OCIE1A); /* Enable Timer1 Compare A Interrupt */
  8e:	89 b7       	in	r24, 0x39	; 57
  90:	80 61       	ori	r24, 0x10	; 16
  92:	89 bf       	out	0x39, r24	; 57
  /* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=0
	 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
	 */
  TCCR1A = (1 << FOC1A);
  94:	88 e0       	ldi	r24, 0x08	; 8
  96:	8f bd       	out	0x2f, r24	; 47

  /* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	 * 2. Prescaler = F_CPU/1024 CS10=1 CS11=0 CS12=1
	 */
  TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS12);
  98:	8d e0       	ldi	r24, 0x0D	; 13
  9a:	8e bd       	out	0x2e, r24	; 46
  9c:	08 95       	ret

0000009e <init_7_segment>:

void init_7_segment()
{

  /* make enable pins of 7 segment as output */
  SEGMENT_ENABLE_DDR = 0b00111111;
  9e:	8f e3       	ldi	r24, 0x3F	; 63
  a0:	8a bb       	out	0x1a, r24	; 26

  SEGMENT_CONTROL_DDR = 0b00001111;
  a2:	8f e0       	ldi	r24, 0x0F	; 15
  a4:	84 bb       	out	0x14, r24	; 20
  a6:	08 95       	ret

000000a8 <system_init>:
  }
}

void system_init()
{
  init_7_segment();
  a8:	0e 94 4f 00 	call	0x9e	; 0x9e <init_7_segment>
  init_timer();
  ac:	0e 94 3e 00 	call	0x7c	; 0x7c <init_timer>
  b0:	08 95       	ret

000000b2 <main>:
/* global variable contain the ticks count of the timer */
unsigned char g_tick = 0;

int main(void)
{
  system_init();
  b2:	0e 94 54 00 	call	0xa8	; 0xa8 <system_init>

  while (1)
  {
  }
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x4>

000000b8 <control_7_segment_pin>:
  SEGMENT_CONTROL_DDR = 0b00001111;
}

void control_7_segment_pin(unsigned char pin, control_t control)
{
  if (control == OFF)
  b8:	61 11       	cpse	r22, r1
  ba:	0e c0       	rjmp	.+28     	; 0xd8 <control_7_segment_pin+0x20>
  {
    clr_bit(SEGMENT_ENABLE_PORT, pin);
  bc:	4b b3       	in	r20, 0x1b	; 27
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <control_7_segment_pin+0x12>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <control_7_segment_pin+0xe>
  ce:	cb 01       	movw	r24, r22
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
  }
  else
  {
    set_bit(SEGMENT_ENABLE_PORT, pin);
  d8:	4b b3       	in	r20, 0x1b	; 27
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	b9 01       	movw	r22, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <control_7_segment_pin+0x2e>
  e2:	66 0f       	add	r22, r22
  e4:	77 1f       	adc	r23, r23
  e6:	8a 95       	dec	r24
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <control_7_segment_pin+0x2a>
  ea:	cb 01       	movw	r24, r22
  ec:	84 2b       	or	r24, r20
  ee:	8b bb       	out	0x1b, r24	; 27
  f0:	08 95       	ret

000000f2 <write_7_segment_pin>:
  }
}

void write_7_segment_pin(unsigned char number, unsigned char digit)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
  f6:	86 2f       	mov	r24, r22
  /*enable corrsponding digit */
  control_7_segment_pin(digit, ON);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	0e 94 5c 00 	call	0xb8	; 0xb8 <control_7_segment_pin>

  SEGMENT_CONTROL_PORT = number;
  fe:	c5 bb       	out	0x15, r28	; 21
}
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
  g_tick++;
 126:	80 91 60 00 	lds	r24, 0x0060
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 60 00 	sts	0x0060, r24
  write_7_segment_pin(g_tick, 0);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	0e 94 79 00 	call	0xf2	; 0xf2 <write_7_segment_pin>

  if (g_tick == 10)
 136:	80 91 60 00 	lds	r24, 0x0060
 13a:	8a 30       	cpi	r24, 0x0A	; 10
 13c:	31 f4       	brne	.+12     	; 0x14a <__vector_6+0x46>
  {
    g_tick = 0;
 13e:	10 92 60 00 	sts	0x0060, r1
    write_7_segment_pin(0, 0);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 79 00 	call	0xf2	; 0xf2 <write_7_segment_pin>
  };
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
