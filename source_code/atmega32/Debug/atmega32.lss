
atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000424  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000498  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001959  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa8  00000000  00000000  00001f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008df  00000000  00000000  000029fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  000032dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082f  00000000  00000000  000034e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000123f  00000000  00000000  00003d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004f4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  74:	0c 94 10 02 	jmp	0x420	; 0x420 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <hal_button_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

button_error_t hal_button_init(button_t *the_button)
{
  7c:	fc 01       	movw	r30, r24
    button_error_t error = BUTTON_STATE_SUCCESS;

    switch (the_button->connection)
  7e:	82 81       	ldd	r24, Z+2	; 0x02
  80:	88 23       	and	r24, r24
  82:	19 f0       	breq	.+6      	; 0x8a <hal_button_init+0xe>
  84:	81 30       	cpi	r24, 0x01	; 1
  86:	51 f0       	breq	.+20     	; 0x9c <hal_button_init+0x20>
  88:	12 c0       	rjmp	.+36     	; 0xae <hal_button_init+0x32>
    {
    case PULLUP_CONNECTION:
        if (STATE_SUCCESS == mcal_gpio_pin_init(
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	61 81       	ldd	r22, Z+1	; 0x01
  8e:	80 81       	ld	r24, Z
  90:	0e 94 1c 01 	call	0x238	; 0x238 <mcal_gpio_pin_init>
  94:	88 23       	and	r24, r24
  96:	69 f0       	breq	.+26     	; 0xb2 <hal_button_init+0x36>
        {
            /* button initialized */
        }
        else
        {
            error = BUTTON_GPIO_ERROR;
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	08 95       	ret
        }
        break;

    case PULLDOWN_CONNECTION:
        if (STATE_SUCCESS == mcal_gpio_pin_init(
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	61 81       	ldd	r22, Z+1	; 0x01
  a0:	80 81       	ld	r24, Z
  a2:	0e 94 1c 01 	call	0x238	; 0x238 <mcal_gpio_pin_init>
  a6:	88 23       	and	r24, r24
  a8:	31 f0       	breq	.+12     	; 0xb6 <hal_button_init+0x3a>
        {
            /* button initialized */
        }
        else
        {
            error = BUTTON_GPIO_ERROR;
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	08 95       	ret
        }
        break;

    default:
        error = BUTTON_STATE_INVALID_CONNECTION;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	08 95       	ret
/*                     Functions Implementation                          */
/*************************************************************************/

button_error_t hal_button_init(button_t *the_button)
{
    button_error_t error = BUTTON_STATE_SUCCESS;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	08 95       	ret
  b6:	80 e0       	ldi	r24, 0x00	; 0
    default:
        error = BUTTON_STATE_INVALID_CONNECTION;
        break;
    }
    return error;
}
  b8:	08 95       	ret

000000ba <hal_button_get_state>:

button_error_t hal_button_get_state(
    button_t *the_button,
    button_states_t *result)
{
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	1f 92       	push	r1
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	8c 01       	movw	r16, r24
  ce:	7b 01       	movw	r14, r22
    button_error_t error = BUTTON_STATE_SUCCESS;

    button_states_t states;

    if (STATE_SUCCESS == mcal_gpio_pin_read(
  d0:	ae 01       	movw	r20, r28
  d2:	4f 5f       	subi	r20, 0xFF	; 255
  d4:	5f 4f       	sbci	r21, 0xFF	; 255
  d6:	fc 01       	movw	r30, r24
  d8:	61 81       	ldd	r22, Z+1	; 0x01
  da:	80 81       	ld	r24, Z
  dc:	0e 94 96 01 	call	0x32c	; 0x32c <mcal_gpio_pin_read>
  e0:	81 11       	cpse	r24, r1
  e2:	13 c0       	rjmp	.+38     	; 0x10a <hal_button_get_state+0x50>
                             the_button->base_addr,
                             the_button->pin_num, &states))
    {
        if (the_button->connection == PULLDOWN_CONNECTION)
  e4:	f8 01       	movw	r30, r16
  e6:	82 81       	ldd	r24, Z+2	; 0x02
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	29 f4       	brne	.+10     	; 0xf6 <hal_button_get_state+0x3c>
        {
            *result = (button_states_t)states;
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	f7 01       	movw	r30, r14
  f0:	80 83       	st	Z, r24

button_error_t hal_button_get_state(
    button_t *the_button,
    button_states_t *result)
{
    button_error_t error = BUTTON_STATE_SUCCESS;
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0d c0       	rjmp	.+26     	; 0x110 <hal_button_get_state+0x56>
    {
        if (the_button->connection == PULLDOWN_CONNECTION)
        {
            *result = (button_states_t)states;
        }
        else if (the_button->connection == PULLUP_CONNECTION)
  f6:	81 11       	cpse	r24, r1
  f8:	0a c0       	rjmp	.+20     	; 0x10e <hal_button_get_state+0x54>
        {
            *result = (button_states_t)(!states);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	99 81       	ldd	r25, Y+1	; 0x01
  fe:	91 11       	cpse	r25, r1
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	f7 01       	movw	r30, r14
 104:	80 83       	st	Z, r24

button_error_t hal_button_get_state(
    button_t *the_button,
    button_states_t *result)
{
    button_error_t error = BUTTON_STATE_SUCCESS;
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	03 c0       	rjmp	.+6      	; 0x110 <hal_button_get_state+0x56>
            error = BUTTON_STATE_INVALID_CONNECTION;
        }
    }
    else
    {
        error = BUTTON_GPIO_ERROR;
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <hal_button_get_state+0x56>
        {
            *result = (button_states_t)(!states);
        }
        else
        {
            error = BUTTON_STATE_INVALID_CONNECTION;
 10e:	81 e0       	ldi	r24, 0x01	; 1
    {
        error = BUTTON_GPIO_ERROR;
    }

    return error;
 110:	0f 90       	pop	r0
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	08 95       	ret

00000120 <hal_led_init>:

led_error_t hal_led_init(led_t *the_led)
{
    led_error_t error = LED_STATE_SUCCESS;

    if (the_led->wiring == CURRENT_SOURCING ||
 120:	fc 01       	movw	r30, r24
 122:	22 81       	ldd	r18, Z+2	; 0x02
 124:	22 30       	cpi	r18, 0x02	; 2
 126:	48 f4       	brcc	.+18     	; 0x13a <hal_led_init+0x1a>
        the_led->wiring == CURRENT_SINKING)
    {
        if (STATE_SUCCESS == mcal_gpio_pin_init(
 128:	42 e0       	ldi	r20, 0x02	; 2
 12a:	61 81       	ldd	r22, Z+1	; 0x01
 12c:	80 81       	ld	r24, Z
 12e:	0e 94 1c 01 	call	0x238	; 0x238 <mcal_gpio_pin_init>
 132:	88 23       	and	r24, r24
 134:	21 f0       	breq	.+8      	; 0x13e <hal_led_init+0x1e>
        {
            /* led initialized */
        }
        else
        {
            error = LED_GPIO_ERROR;
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	08 95       	ret
        }
    }
    else
    {
        error = LED_STATE_INVALID_CURRENT;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret
/*                     Functions Implementation                          */
/*************************************************************************/

led_error_t hal_led_init(led_t *the_led)
{
    led_error_t error = LED_STATE_SUCCESS;
 13e:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        error = LED_STATE_INVALID_CURRENT;
    }
    return error;
}
 140:	08 95       	ret

00000142 <hal_led_set_state>:

led_error_t hal_led_set_state(led_t *the_led, u8_t value)
{
    led_error_t error = LED_STATE_SUCCESS;

    if (the_led->wiring == CURRENT_SOURCING)
 142:	fc 01       	movw	r30, r24
 144:	22 81       	ldd	r18, Z+2	; 0x02
 146:	21 11       	cpse	r18, r1
 148:	09 c0       	rjmp	.+18     	; 0x15c <hal_led_set_state+0x1a>
    {
        if (STATE_SUCCESS == mcal_gpio_pin_write(
 14a:	46 2f       	mov	r20, r22
 14c:	61 81       	ldd	r22, Z+1	; 0x01
 14e:	80 81       	ld	r24, Z
 150:	0e 94 67 01 	call	0x2ce	; 0x2ce <mcal_gpio_pin_write>
 154:	88 23       	and	r24, r24
 156:	81 f0       	breq	.+32     	; 0x178 <hal_led_set_state+0x36>
        {
            /* led value is written */
        }
        else
        {
            error = LED_GPIO_ERROR;
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	08 95       	ret
        }
    }
    else if (the_led->wiring == CURRENT_SINKING)
 15c:	21 30       	cpi	r18, 0x01	; 1
 15e:	71 f4       	brne	.+28     	; 0x17c <hal_led_set_state+0x3a>
    {
        if (STATE_SUCCESS == mcal_gpio_pin_write(
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	61 11       	cpse	r22, r1
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	fc 01       	movw	r30, r24
 168:	61 81       	ldd	r22, Z+1	; 0x01
 16a:	80 81       	ld	r24, Z
 16c:	0e 94 67 01 	call	0x2ce	; 0x2ce <mcal_gpio_pin_write>
 170:	88 23       	and	r24, r24
 172:	31 f0       	breq	.+12     	; 0x180 <hal_led_set_state+0x3e>
        {
            /* led value is written */
        }
        else
        {
            error = LED_GPIO_ERROR;
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	08 95       	ret
    return error;
}

led_error_t hal_led_set_state(led_t *the_led, u8_t value)
{
    led_error_t error = LED_STATE_SUCCESS;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
            error = LED_GPIO_ERROR;
        }
    }
    else
    {
        error = LED_STATE_INVALID_CURRENT;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	08 95       	ret
    return error;
}

led_error_t hal_led_set_state(led_t *the_led, u8_t value)
{
    led_error_t error = LED_STATE_SUCCESS;
 180:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        error = LED_STATE_INVALID_CURRENT;
    }
    return error;
}
 182:	08 95       	ret

00000184 <main>:
button_t button_1;
/*************************************************************************/
/*                             Application                               */
/*************************************************************************/
int main(void)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	1f 92       	push	r1
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
  init_interrupts();
}

static void init_led()
{
  red_led.base_addr = BASE_C;
 18e:	e0 e6       	ldi	r30, 0x60	; 96
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	13 e3       	ldi	r17, 0x33	; 51
 194:	10 83       	st	Z, r17
  red_led.pin_num = 0;
 196:	11 82       	std	Z+1, r1	; 0x01
  red_led.wiring = CURRENT_SOURCING;
 198:	12 82       	std	Z+2, r1	; 0x02
  hal_led_init(&red_led);
 19a:	cf 01       	movw	r24, r30
 19c:	0e 94 90 00 	call	0x120	; 0x120 <hal_led_init>
}

static void init_button()
{
  button_1.base_addr = BASE_C;
 1a0:	e3 e6       	ldi	r30, 0x63	; 99
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	10 83       	st	Z, r17
  button_1.pin_num = 1;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	81 83       	std	Z+1, r24	; 0x01
  button_1.connection = PULLDOWN_CONNECTION;
 1aa:	82 83       	std	Z+2, r24	; 0x02
  hal_button_init(&button_1);
 1ac:	cf 01       	movw	r24, r30
 1ae:	0e 94 3e 00 	call	0x7c	; 0x7c <hal_button_init>
}

static void init_interrupts()
{
  mcal_interrupt_initialize(INT0, RISING_EDGE);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	0e 94 b2 01 	call	0x364	; 0x364 <mcal_interrupt_initialize>
  button_states_t button_states;
  systemInit();

  while (1)
  {
    hal_button_get_state(&button_1, &button_states);
 1ba:	be 01       	movw	r22, r28
 1bc:	6f 5f       	subi	r22, 0xFF	; 255
 1be:	7f 4f       	sbci	r23, 0xFF	; 255
 1c0:	83 e6       	ldi	r24, 0x63	; 99
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 5d 00 	call	0xba	; 0xba <hal_button_get_state>

    switch (button_states)
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	88 23       	and	r24, r24
 1cc:	41 f0       	breq	.+16     	; 0x1de <main+0x5a>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	a1 f7       	brne	.-24     	; 0x1ba <main+0x36>
    {
    case BUTTON_PRESSED:
      hal_led_set_state(&red_led, ON);
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	80 e6       	ldi	r24, 0x60	; 96
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 a1 00 	call	0x142	; 0x142 <hal_led_set_state>
      break;
 1dc:	ee cf       	rjmp	.-36     	; 0x1ba <main+0x36>

    case BUTTON_NOT_PRESSED:
      hal_led_set_state(&red_led, OFF);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	80 e6       	ldi	r24, 0x60	; 96
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 a1 00 	call	0x142	; 0x142 <hal_led_set_state>
      break;
 1e8:	e8 cf       	rjmp	.-48     	; 0x1ba <main+0x36>

000001ea <__vector_1>:
/*            External Interrupts ISR Implementations                    */
/*************************************************************************/

/* INT0_vect */
void __vector_1(void)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
  hal_led_set_state(&red_led, ON);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	80 e6       	ldi	r24, 0x60	; 96
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 a1 00 	call	0x142	; 0x142 <hal_led_set_state>
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <mcal_gpio_pin_init>:

gpio_error_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
    gpio_error_t error = STATE_SUCCESS;

    if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 238:	89 33       	cpi	r24, 0x39	; 57
 23a:	31 f0       	breq	.+12     	; 0x248 <mcal_gpio_pin_init+0x10>
 23c:	86 33       	cpi	r24, 0x36	; 54
 23e:	21 f0       	breq	.+8      	; 0x248 <mcal_gpio_pin_init+0x10>
 240:	83 33       	cpi	r24, 0x33	; 51
 242:	11 f0       	breq	.+4      	; 0x248 <mcal_gpio_pin_init+0x10>
 244:	80 33       	cpi	r24, 0x30	; 48
 246:	e9 f5       	brne	.+122    	; 0x2c2 <mcal_gpio_pin_init+0x8a>
    {
        if (pin < MAX_PIN_NUMBER)
 248:	68 30       	cpi	r22, 0x08	; 8
 24a:	e8 f5       	brcc	.+122    	; 0x2c6 <mcal_gpio_pin_init+0x8e>
        {
            switch (dir)
 24c:	41 30       	cpi	r20, 0x01	; 1
 24e:	91 f0       	breq	.+36     	; 0x274 <mcal_gpio_pin_init+0x3c>
 250:	08 f1       	brcs	.+66     	; 0x294 <mcal_gpio_pin_init+0x5c>
 252:	42 30       	cpi	r20, 0x02	; 2
 254:	d1 f5       	brne	.+116    	; 0x2ca <mcal_gpio_pin_init+0x92>
            {
            case DIR_OUTPUT:
                set_bit(base + OFFSET_DIR, pin);
 256:	8f 5f       	subi	r24, 0xFF	; 255

#define REGISTER (*((volatile u8_t *)(u16_t)reg_addr))

inline void set_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER |= (1 << bit_num);
 258:	e8 2f       	mov	r30, r24
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	20 81       	ld	r18, Z
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <mcal_gpio_pin_init+0x30>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <mcal_gpio_pin_init+0x2c>
 26c:	82 2b       	or	r24, r18
 26e:	80 83       	st	Z, r24
/*                     Functions Implementation                          */
/*************************************************************************/

gpio_error_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
    gpio_error_t error = STATE_SUCCESS;
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	08 95       	ret
            case DIR_OUTPUT:
                set_bit(base + OFFSET_DIR, pin);
                break;

            case DIR_INPUT_PULLDOWN:
                clr_bit(base + OFFSET_DIR, pin);
 274:	8f 5f       	subi	r24, 0xFF	; 255
}
inline void clr_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER &= ~(1 << bit_num);
 276:	e8 2f       	mov	r30, r24
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	20 81       	ld	r18, Z
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <mcal_gpio_pin_init+0x4e>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <mcal_gpio_pin_init+0x4a>
 28a:	80 95       	com	r24
 28c:	82 23       	and	r24, r18
 28e:	80 83       	st	Z, r24
/*                     Functions Implementation                          */
/*************************************************************************/

gpio_error_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
    gpio_error_t error = STATE_SUCCESS;
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	08 95       	ret
            case DIR_INPUT_PULLDOWN:
                clr_bit(base + OFFSET_DIR, pin);
                break;

            case DIR_INPUT_PULLUP:
                clr_bit(base + OFFSET_DIR, pin);
 294:	e1 e0       	ldi	r30, 0x01	; 1
 296:	e8 0f       	add	r30, r24
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	40 81       	ld	r20, Z
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <mcal_gpio_pin_init+0x6e>
 2a2:	22 0f       	add	r18, r18
 2a4:	33 1f       	adc	r19, r19
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <mcal_gpio_pin_init+0x6a>
 2aa:	92 2f       	mov	r25, r18
 2ac:	90 95       	com	r25
 2ae:	94 23       	and	r25, r20
 2b0:	90 83       	st	Z, r25
                set_bit(base + OFFSET_PORT, pin);
 2b2:	8e 5f       	subi	r24, 0xFE	; 254

#define REGISTER (*((volatile u8_t *)(u16_t)reg_addr))

inline void set_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER |= (1 << bit_num);
 2b4:	e8 2f       	mov	r30, r24
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	28 2b       	or	r18, r24
 2bc:	20 83       	st	Z, r18
/*                     Functions Implementation                          */
/*************************************************************************/

gpio_error_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
    gpio_error_t error = STATE_SUCCESS;
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 95       	ret
            error = STATE_INVAILD_PIN;
        }
    }
    else
    {
        error = STATE_INVALID_ADDR;
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	08 95       	ret
                break;
            }
        }
        else
        {
            error = STATE_INVAILD_PIN;
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	08 95       	ret
                clr_bit(base + OFFSET_DIR, pin);
                set_bit(base + OFFSET_PORT, pin);
                break;

            default:
                error = STATE_INVALID_DIR;
 2ca:	84 e0       	ldi	r24, 0x04	; 4
    else
    {
        error = STATE_INVALID_ADDR;
    }
    return error;
}
 2cc:	08 95       	ret

000002ce <mcal_gpio_pin_write>:

gpio_error_t mcal_gpio_pin_write(u8_t base, u8_t pin, u8_t value)
{
    gpio_error_t error = STATE_SUCCESS;

    if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 2ce:	89 33       	cpi	r24, 0x39	; 57
 2d0:	31 f0       	breq	.+12     	; 0x2de <mcal_gpio_pin_write+0x10>
 2d2:	86 33       	cpi	r24, 0x36	; 54
 2d4:	21 f0       	breq	.+8      	; 0x2de <mcal_gpio_pin_write+0x10>
 2d6:	83 33       	cpi	r24, 0x33	; 51
 2d8:	11 f0       	breq	.+4      	; 0x2de <mcal_gpio_pin_write+0x10>
 2da:	80 33       	cpi	r24, 0x30	; 48
 2dc:	19 f5       	brne	.+70     	; 0x324 <mcal_gpio_pin_write+0x56>
    {
        switch (value)
 2de:	44 23       	and	r20, r20
 2e0:	89 f0       	breq	.+34     	; 0x304 <mcal_gpio_pin_write+0x36>
 2e2:	41 30       	cpi	r20, 0x01	; 1
 2e4:	09 f5       	brne	.+66     	; 0x328 <mcal_gpio_pin_write+0x5a>
        {
        case HIGH:
            set_bit(base + OFFSET_PORT, pin);
 2e6:	8e 5f       	subi	r24, 0xFE	; 254
 2e8:	e8 2f       	mov	r30, r24
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	20 81       	ld	r18, Z
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <mcal_gpio_pin_write+0x2a>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <mcal_gpio_pin_write+0x26>
 2fc:	82 2b       	or	r24, r18
 2fe:	80 83       	st	Z, r24
    return error;
}

gpio_error_t mcal_gpio_pin_write(u8_t base, u8_t pin, u8_t value)
{
    gpio_error_t error = STATE_SUCCESS;
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret
        case HIGH:
            set_bit(base + OFFSET_PORT, pin);
            break;

        case LOW:
            clr_bit(base + OFFSET_PORT, pin);
 304:	8e 5f       	subi	r24, 0xFE	; 254
}
inline void clr_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER &= ~(1 << bit_num);
 306:	e8 2f       	mov	r30, r24
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	20 81       	ld	r18, Z
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <mcal_gpio_pin_write+0x48>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <mcal_gpio_pin_write+0x44>
 31a:	80 95       	com	r24
 31c:	82 23       	and	r24, r18
 31e:	80 83       	st	Z, r24
    return error;
}

gpio_error_t mcal_gpio_pin_write(u8_t base, u8_t pin, u8_t value)
{
    gpio_error_t error = STATE_SUCCESS;
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	08 95       	ret
            break;
        }
    }
    else
    {
        error = STATE_INVALID_ADDR;
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	08 95       	ret
        case LOW:
            clr_bit(base + OFFSET_PORT, pin);
            break;

        default:
            error = STATE_INVALID_VALUE;
 328:	85 e0       	ldi	r24, 0x05	; 5
    {
        error = STATE_INVALID_ADDR;
    }

    return error;
}
 32a:	08 95       	ret

0000032c <mcal_gpio_pin_read>:

gpio_error_t mcal_gpio_pin_read(u8_t base, u8_t pin, u8_t *value)
{
    gpio_error_t error = STATE_SUCCESS;

    if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 32c:	89 33       	cpi	r24, 0x39	; 57
 32e:	31 f0       	breq	.+12     	; 0x33c <mcal_gpio_pin_read+0x10>
 330:	86 33       	cpi	r24, 0x36	; 54
 332:	21 f0       	breq	.+8      	; 0x33c <mcal_gpio_pin_read+0x10>
 334:	83 33       	cpi	r24, 0x33	; 51
 336:	11 f0       	breq	.+4      	; 0x33c <mcal_gpio_pin_read+0x10>
 338:	80 33       	cpi	r24, 0x30	; 48
 33a:	81 f4       	brne	.+32     	; 0x35c <mcal_gpio_pin_read+0x30>
    {
        if (pin < MAX_PIN_NUMBER)
 33c:	68 30       	cpi	r22, 0x08	; 8
 33e:	80 f4       	brcc	.+32     	; 0x360 <mcal_gpio_pin_read+0x34>
  *value = REGISTER;
}

inline u8_t bit_is_set(u8_t reg_addr, u8_t bit_num)
{
  return (REGISTER & (1 << bit_num)) ? HIGH : LOW;
 340:	e8 2f       	mov	r30, r24
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <mcal_gpio_pin_read+0x22>
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <mcal_gpio_pin_read+0x1e>
 352:	81 70       	andi	r24, 0x01	; 1
        {
            *value = bit_is_set(base + OFFSET_PIN, pin);
 354:	fa 01       	movw	r30, r20
 356:	80 83       	st	Z, r24
    return error;
}

gpio_error_t mcal_gpio_pin_read(u8_t base, u8_t pin, u8_t *value)
{
    gpio_error_t error = STATE_SUCCESS;
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	08 95       	ret
            error = STATE_INVAILD_PIN;
        }
    }
    else
    {
        error = STATE_INVALID_ADDR;
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	08 95       	ret
        {
            *value = bit_is_set(base + OFFSET_PIN, pin);
        }
        else
        {
            error = STATE_INVAILD_PIN;
 360:	83 e0       	ldi	r24, 0x03	; 3
    else
    {
        error = STATE_INVALID_ADDR;
    }
    return error;
}
 362:	08 95       	ret

00000364 <mcal_interrupt_initialize>:

#define REGISTER (*((volatile u8_t *)(u16_t)reg_addr))

inline void set_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER |= (1 << bit_num);
 364:	9f b7       	in	r25, 0x3f	; 63
 366:	90 68       	ori	r25, 0x80	; 128
 368:	9f bf       	out	0x3f, r25	; 63
  interrupt_error error = INTERRUPT_STATE_SUCCESS;

  /*enable global interrupts*/
  setGlobalInterrupt;

  switch (interruptNo)
 36a:	86 30       	cpi	r24, 0x06	; 6
 36c:	31 f0       	breq	.+12     	; 0x37a <mcal_interrupt_initialize+0x16>
 36e:	87 30       	cpi	r24, 0x07	; 7
 370:	11 f1       	breq	.+68     	; 0x3b6 <mcal_interrupt_initialize+0x52>
 372:	85 30       	cpi	r24, 0x05	; 5
 374:	09 f0       	breq	.+2      	; 0x378 <mcal_interrupt_initialize+0x14>
 376:	4c c0       	rjmp	.+152    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 378:	3c c0       	rjmp	.+120    	; 0x3f2 <mcal_interrupt_initialize+0x8e>
  {

  case INT0:
  {
    switch (mode)
 37a:	61 30       	cpi	r22, 0x01	; 1
 37c:	61 f0       	breq	.+24     	; 0x396 <mcal_interrupt_initialize+0x32>
 37e:	18 f0       	brcs	.+6      	; 0x386 <mcal_interrupt_initialize+0x22>
 380:	62 30       	cpi	r22, 0x02	; 2
 382:	89 f0       	breq	.+34     	; 0x3a6 <mcal_interrupt_initialize+0x42>
 384:	47 c0       	rjmp	.+142    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 386:	85 b7       	in	r24, 0x35	; 53
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	85 bf       	out	0x35, r24	; 53
 38c:	85 b7       	in	r24, 0x35	; 53
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	85 bf       	out	0x35, r24	; 53
/*************************************************************************/

interrupt_error mcal_interrupt_initialize(u8_t interruptNo,
                                          interrupt_mode_t mode)
{
  interrupt_error error = INTERRUPT_STATE_SUCCESS;
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	08 95       	ret
 396:	85 b7       	in	r24, 0x35	; 53
 398:	82 60       	ori	r24, 0x02	; 2
 39a:	85 bf       	out	0x35, r24	; 53
}
inline void clr_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER &= ~(1 << bit_num);
 39c:	85 b7       	in	r24, 0x35	; 53
 39e:	8e 7f       	andi	r24, 0xFE	; 254
 3a0:	85 bf       	out	0x35, r24	; 53
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	08 95       	ret

#define REGISTER (*((volatile u8_t *)(u16_t)reg_addr))

inline void set_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER |= (1 << bit_num);
 3a6:	85 b7       	in	r24, 0x35	; 53
 3a8:	81 60       	ori	r24, 0x01	; 1
 3aa:	85 bf       	out	0x35, r24	; 53
}
inline void clr_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER &= ~(1 << bit_num);
 3ac:	85 b7       	in	r24, 0x35	; 53
 3ae:	8d 7f       	andi	r24, 0xFD	; 253
 3b0:	85 bf       	out	0x35, r24	; 53
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
    break;
  }

  case INT1:
  {
    switch (mode)
 3b6:	61 30       	cpi	r22, 0x01	; 1
 3b8:	61 f0       	breq	.+24     	; 0x3d2 <mcal_interrupt_initialize+0x6e>
 3ba:	18 f0       	brcs	.+6      	; 0x3c2 <mcal_interrupt_initialize+0x5e>
 3bc:	62 30       	cpi	r22, 0x02	; 2
 3be:	89 f0       	breq	.+34     	; 0x3e2 <mcal_interrupt_initialize+0x7e>
 3c0:	2b c0       	rjmp	.+86     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>

#define REGISTER (*((volatile u8_t *)(u16_t)reg_addr))

inline void set_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER |= (1 << bit_num);
 3c2:	85 b7       	in	r24, 0x35	; 53
 3c4:	88 60       	ori	r24, 0x08	; 8
 3c6:	85 bf       	out	0x35, r24	; 53
 3c8:	85 b7       	in	r24, 0x35	; 53
 3ca:	84 60       	ori	r24, 0x04	; 4
 3cc:	85 bf       	out	0x35, r24	; 53
/*************************************************************************/

interrupt_error mcal_interrupt_initialize(u8_t interruptNo,
                                          interrupt_mode_t mode)
{
  interrupt_error error = INTERRUPT_STATE_SUCCESS;
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	08 95       	ret
 3d2:	85 b7       	in	r24, 0x35	; 53
 3d4:	88 60       	ori	r24, 0x08	; 8
 3d6:	85 bf       	out	0x35, r24	; 53
}
inline void clr_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER &= ~(1 << bit_num);
 3d8:	85 b7       	in	r24, 0x35	; 53
 3da:	8b 7f       	andi	r24, 0xFB	; 251
 3dc:	85 bf       	out	0x35, r24	; 53
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	08 95       	ret

#define REGISTER (*((volatile u8_t *)(u16_t)reg_addr))

inline void set_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER |= (1 << bit_num);
 3e2:	85 b7       	in	r24, 0x35	; 53
 3e4:	84 60       	ori	r24, 0x04	; 4
 3e6:	85 bf       	out	0x35, r24	; 53
}
inline void clr_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER &= ~(1 << bit_num);
 3e8:	85 b7       	in	r24, 0x35	; 53
 3ea:	87 7f       	andi	r24, 0xF7	; 247
 3ec:	85 bf       	out	0x35, r24	; 53
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	08 95       	ret
    break;
  }

  case INT2:
  {
    switch (mode)
 3f2:	66 23       	and	r22, r22
 3f4:	19 f0       	breq	.+6      	; 0x3fc <mcal_interrupt_initialize+0x98>
 3f6:	61 30       	cpi	r22, 0x01	; 1
 3f8:	31 f0       	breq	.+12     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fa:	10 c0       	rjmp	.+32     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

#define REGISTER (*((volatile u8_t *)(u16_t)reg_addr))

inline void set_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER |= (1 << bit_num);
 3fc:	85 b7       	in	r24, 0x35	; 53
 3fe:	80 64       	ori	r24, 0x40	; 64
 400:	85 bf       	out	0x35, r24	; 53
/*************************************************************************/

interrupt_error mcal_interrupt_initialize(u8_t interruptNo,
                                          interrupt_mode_t mode)
{
  interrupt_error error = INTERRUPT_STATE_SUCCESS;
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	08 95       	ret
}
inline void clr_bit(u8_t reg_addr, u8_t bit_num)
{
  REGISTER &= ~(1 << bit_num);
 406:	84 b7       	in	r24, 0x34	; 52
 408:	8f 7b       	andi	r24, 0xBF	; 191
 40a:	84 bf       	out	0x34, r24	; 52
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	08 95       	ret
    break;
  }

  default:
  {
    error = INTERRUPT_STATE_INVAILD_INTERRUPT_NUMBER;
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	08 95       	ret
      set_bit(MCUCR, ISC00);
      clr_bit(MCUCR, ISC01);
      break;

    default:
      error = INTERRUPT_STATE_INVALID_OPERATION_MODE;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	08 95       	ret
      set_bit(MCUCR, ISC10);
      clr_bit(MCUCR, ISC11);
      break;

    default:
      error = INTERRUPT_STATE_INVALID_OPERATION_MODE;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	08 95       	ret
    case FALLING_EDGE:
      clr_bit(MCUCSR, ISC2);
      break;

    default:
      error = INTERRUPT_STATE_INVALID_OPERATION_MODE;
 41c:	81 e0       	ldi	r24, 0x01	; 1
  {
    error = INTERRUPT_STATE_INVAILD_INTERRUPT_NUMBER;
  }
  }
  return error;
}
 41e:	08 95       	ret

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
