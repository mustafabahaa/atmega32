
Door Locker - HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001954  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001cc  00800060  00001954  000019e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  0080022c  0080022c  00001bb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003643  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011cf  00000000  00000000  0000558b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002162  00000000  00000000  0000675a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000938  00000000  00000000  000088bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000122d  00000000  00000000  000091f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002551  00000000  00000000  0000a421  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000c972  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__vector_3>
      10:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__vector_4>
      14:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__vector_5>
      18:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__vector_6>
      1c:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__vector_7>
      20:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__vector_8>
      24:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 32       	cpi	r26, 0x2C	; 44
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ac e2       	ldi	r26, 0x2C	; 44
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 35       	cpi	r26, 0x57	; 87
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <main>
      8a:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <userAuthentication>:
	}
}

static void userAuthentication(authentication_t authentcated)
{
	if (authentcated)
      92:	88 23       	and	r24, r24
      94:	31 f0       	breq	.+12     	; 0xa2 <userAuthentication+0x10>
	{
		state = HOME_STATE;
      96:	85 e0       	ldi	r24, 0x05	; 5
      98:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>

		passwordErrorCounter = 0;
      9c:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <passwordErrorCounter>
      a0:	08 95       	ret
	}
	else if (MAX_INCORRECT_PASSWORD_ENTER == passwordErrorCounter)
      a2:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <passwordErrorCounter>
      a6:	83 30       	cpi	r24, 0x03	; 3
      a8:	21 f4       	brne	.+8      	; 0xb2 <userAuthentication+0x20>
	{
		state = ALARM_SYSTEM_STATE;
      aa:	84 e0       	ldi	r24, 0x04	; 4
      ac:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>
      b0:	08 95       	ret
	}
	else
	{
		passwordErrorCounter++;
      b2:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <passwordErrorCounter>
      b6:	8f 5f       	subi	r24, 0xFF	; 255
      b8:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <passwordErrorCounter>
      bc:	08 95       	ret

000000be <keypadInit>:
static system_error_t keypadInit()
{
	system_error_t error = SYSTEM_SUCCESS;

	/*define the port of the cols and rows */
	keypad.keypadColsPORT = BASE_A;
      be:	ed e4       	ldi	r30, 0x4D	; 77
      c0:	f2 e0       	ldi	r31, 0x02	; 2
      c2:	89 e3       	ldi	r24, 0x39	; 57
      c4:	80 83       	st	Z, r24
	keypad.keypadRowsPort = BASE_A;
      c6:	81 83       	std	Z+1, r24	; 0x01

	/*define the number of rows and cols */
	keypad.keypadRowsNo = 4;
      c8:	84 e0       	ldi	r24, 0x04	; 4
      ca:	82 83       	std	Z+2, r24	; 0x02
	keypad.keypadColsNo = 4;
      cc:	83 83       	std	Z+3, r24	; 0x03
			{'1', '2' , '3' , '-' },
			{'A', '0' , '=' , '+' }
	};

	/* attach the keypad rows and cols and mapping to keypad*/
	keypad.keypadRowsGPIOS = &keypadRowsGPIOS;
      ce:	84 e7       	ldi	r24, 0x74	; 116
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	95 83       	std	Z+5, r25	; 0x05
      d4:	84 83       	std	Z+4, r24	; 0x04
	keypad.keypadColumnsGPIOS = &keypadColumnsGPIOS;
      d6:	80 e7       	ldi	r24, 0x70	; 112
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	97 83       	std	Z+7, r25	; 0x07
      dc:	86 83       	std	Z+6, r24	; 0x06
	keypad.keypadMapping = &keypadMapping;
      de:	80 e6       	ldi	r24, 0x60	; 96
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	91 87       	std	Z+9, r25	; 0x09
      e4:	80 87       	std	Z+8, r24	; 0x08

	if (KEYPAD_SUCCESS != hal_keypad_init(&keypad))
      e6:	cf 01       	movw	r24, r30
      e8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <hal_keypad_init>
      ec:	81 11       	cpse	r24, r1
	{
		error = SYSTEM_FAIL;
      ee:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* keypad initialized */
	}

	return error;
}
      f0:	08 95       	ret

000000f2 <LCDInit>:

static system_error_t LCDInit()
{
	system_error_t error = SYSTEM_SUCCESS;

	lcd.lcdControlPort = BASE_D;
      f2:	eb e3       	ldi	r30, 0x3B	; 59
      f4:	f2 e0       	ldi	r31, 0x02	; 2
      f6:	80 e3       	ldi	r24, 0x30	; 48
      f8:	81 83       	std	Z+1, r24	; 0x01
	lcd.lcdDataPort = BASE_C;
      fa:	83 e3       	ldi	r24, 0x33	; 51
      fc:	80 83       	st	Z, r24
	lcd.lcdMode = MODE_8_BIT;
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	82 83       	std	Z+2, r24	; 0x02
	lcd.lcdRS = 5;
     102:	85 e0       	ldi	r24, 0x05	; 5
     104:	83 83       	std	Z+3, r24	; 0x03
	lcd.lcdRW = 6;
     106:	86 e0       	ldi	r24, 0x06	; 6
     108:	84 83       	std	Z+4, r24	; 0x04
	lcd.lcdE = 7;
     10a:	87 e0       	ldi	r24, 0x07	; 7
     10c:	85 83       	std	Z+5, r24	; 0x05

	if (LCD_SUCCESS != hal_lcd_init(&lcd))
     10e:	cf 01       	movw	r24, r30
     110:	0e 94 ff 03 	call	0x7fe	; 0x7fe <hal_lcd_init>
     114:	81 11       	cpse	r24, r1
	{
		error = SYSTEM_FAIL;
     116:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* LCD initialized */
	}

	return error;
}
     118:	08 95       	ret

0000011a <timerInit>:

static system_error_t timerInit()
{
	system_error_t error = SYSTEM_SUCCESS;

	timer.timer_number = TIMER0;
     11a:	e1 e4       	ldi	r30, 0x41	; 65
     11c:	f2 e0       	ldi	r31, 0x02	; 2
     11e:	11 82       	std	Z+1, r1	; 0x01
	timer.mode = TIMER_NORMAL_MODE ;
     120:	12 82       	std	Z+2, r1	; 0x02
	timer.preScaler = F_CPU_1024;
     122:	85 e0       	ldi	r24, 0x05	; 5
     124:	80 83       	st	Z, r24
	timer.tick_seconds = 5;
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	a0 ea       	ldi	r26, 0xA0	; 160
     12c:	b0 e4       	ldi	r27, 0x40	; 64
     12e:	83 83       	std	Z+3, r24	; 0x03
     130:	94 83       	std	Z+4, r25	; 0x04
     132:	a5 83       	std	Z+5, r26	; 0x05
     134:	b6 83       	std	Z+6, r27	; 0x06

	if (TIMER_STATE_SUCCESS != mcal_timer_init(&timer))
     136:	cf 01       	movw	r24, r30
     138:	0e 94 71 05 	call	0xae2	; 0xae2 <mcal_timer_init>
     13c:	81 11       	cpse	r24, r1
     13e:	06 c0       	rjmp	.+12     	; 0x14c <timerInit+0x32>
	{
		error = SYSTEM_FAIL;
	}
	else
	{
		timer_setCallBack(releaseSystem);
     140:	81 eb       	ldi	r24, 0xB1	; 177
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 36 07 	call	0xe6c	; 0xe6c <timer_setCallBack>
		error = SYSTEM_SUCCESS;
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	08 95       	ret
	timer.preScaler = F_CPU_1024;
	timer.tick_seconds = 5;

	if (TIMER_STATE_SUCCESS != mcal_timer_init(&timer))
	{
		error = SYSTEM_FAIL;
     14c:	81 e0       	ldi	r24, 0x01	; 1
		timer_setCallBack(releaseSystem);
		error = SYSTEM_SUCCESS;
	}

	return error;
}
     14e:	08 95       	ret

00000150 <systemInit>:

	/* Initialize Services */
	//logger_init(LOGGER_ALL);

	/* Initialize hardware devices */
	error = keypadInit();
     150:	0e 94 5f 00 	call	0xbe	; 0xbe <keypadInit>
	error = LCDInit();
     154:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDInit>
	timerInit();
     158:	0e 94 8d 00 	call	0x11a	; 0x11a <timerInit>

	/* Initialize Managers */

	error = ms_manager_init();
     15c:	0e 94 bf 09 	call	0x137e	; 0x137e <ms_manager_init>

	return error;
}
     160:	08 95       	ret

00000162 <releaseSystem>:
/*                            Timer Callback                             */
/*************************************************************************/

static void releaseSystem()
{
	mcal_timer_stop(&timer);
     162:	81 e4       	ldi	r24, 0x41	; 65
     164:	92 e0       	ldi	r25, 0x02	; 2
     166:	0e 94 e6 06 	call	0xdcc	; 0xdcc <mcal_timer_stop>
	passwordErrorCounter = 0;
     16a:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <passwordErrorCounter>
	state = PASSWORD_INPUT_STATE;
     16e:	83 e0       	ldi	r24, 0x03	; 3
     170:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>
     174:	08 95       	ret

00000176 <checkDefaultPassword>:
	}

}

static void checkDefaultPassword()
{
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	1f 92       	push	r1
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
	u8_t buffer = 0 ;
     180:	19 82       	std	Y+1, r1	; 0x01
	ms_manager_send_data(CHECK_PASS_EXCISTANCE);
     182:	8a e0       	ldi	r24, 0x0A	; 10
     184:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <ms_manager_send_data>
	ms_manager_receive_data(&buffer);
     188:	ce 01       	movw	r24, r28
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	0e 94 13 0a 	call	0x1426	; 0x1426 <ms_manager_receive_data>

	if (buffer == PASSWORD_NOT_EXICTED)
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	89 30       	cpi	r24, 0x09	; 9
     194:	21 f4       	brne	.+8      	; 0x19e <checkDefaultPassword+0x28>
	{
		state = SET_NEW_PASSWORD_STATE;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>
     19c:	03 c0       	rjmp	.+6      	; 0x1a4 <checkDefaultPassword+0x2e>
	}
	else
	{
		state = PASSWORD_INPUT_STATE;
     19e:	83 e0       	ldi	r24, 0x03	; 3
     1a0:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>
	}
}
     1a4:	0f 90       	pop	r0
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <displayHomeSystem>:

	state = HALT_STATE;
}

static void displayHomeSystem()
{
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	1f 92       	push	r1
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62

	/* TODO : register option time out if user didn't
	 *  enter anything for 10 seconds */

	s8_t keyPressed = NO_KEY_PRESSED;
     1b6:	8f ef       	ldi	r24, 0xFF	; 255
     1b8:	89 83       	std	Y+1, r24	; 0x01

	hal_lcd_displayString(&lcd,(u8_t *)"1-Open");
     1ba:	68 e7       	ldi	r22, 0x78	; 120
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	8b e3       	ldi	r24, 0x3B	; 59
     1c0:	92 e0       	ldi	r25, 0x02	; 2
     1c2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <hal_lcd_displayString>
	hal_lcd_goToRowColumn(&lcd,1,0);
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	61 e0       	ldi	r22, 0x01	; 1
     1ca:	8b e3       	ldi	r24, 0x3B	; 59
     1cc:	92 e0       	ldi	r25, 0x02	; 2
     1ce:	0e 94 78 04 	call	0x8f0	; 0x8f0 <hal_lcd_goToRowColumn>
	hal_lcd_displayString(&lcd,(u8_t *)"2-Change password");
     1d2:	6f e7       	ldi	r22, 0x7F	; 127
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	8b e3       	ldi	r24, 0x3B	; 59
     1d8:	92 e0       	ldi	r25, 0x02	; 2
     1da:	0e 94 5d 04 	call	0x8ba	; 0x8ba <hal_lcd_displayString>

	/* stay in loop until any key is pressed */
	while(NO_KEY_PRESSED == keyPressed)
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <displayHomeSystem+0x42>
	{
		hal_keypad_getKey(&keypad,&keyPressed);
     1e0:	be 01       	movw	r22, r28
     1e2:	6f 5f       	subi	r22, 0xFF	; 255
     1e4:	7f 4f       	sbci	r23, 0xFF	; 255
     1e6:	8d e4       	ldi	r24, 0x4D	; 77
     1e8:	92 e0       	ldi	r25, 0x02	; 2
     1ea:	0e 94 41 03 	call	0x682	; 0x682 <hal_keypad_getKey>
	hal_lcd_displayString(&lcd,(u8_t *)"1-Open");
	hal_lcd_goToRowColumn(&lcd,1,0);
	hal_lcd_displayString(&lcd,(u8_t *)"2-Change password");

	/* stay in loop until any key is pressed */
	while(NO_KEY_PRESSED == keyPressed)
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
     1f0:	8f 3f       	cpi	r24, 0xFF	; 255
     1f2:	b1 f3       	breq	.-20     	; 0x1e0 <displayHomeSystem+0x34>
	{
		hal_keypad_getKey(&keypad,&keyPressed);
	}

	switch(keyPressed)
     1f4:	81 33       	cpi	r24, 0x31	; 49
     1f6:	19 f0       	breq	.+6      	; 0x1fe <displayHomeSystem+0x52>
     1f8:	82 33       	cpi	r24, 0x32	; 50
     1fa:	41 f0       	breq	.+16     	; 0x20c <displayHomeSystem+0x60>
     1fc:	0b c0       	rjmp	.+22     	; 0x214 <displayHomeSystem+0x68>
	{
	case '1' :
	{
		ms_manager_send_data(OPEN_LOCK);
     1fe:	8b e0       	ldi	r24, 0x0B	; 11
     200:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <ms_manager_send_data>
		state = PASSWORD_INPUT_STATE;
     204:	83 e0       	ldi	r24, 0x03	; 3
     206:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>

		break;
     20a:	30 c0       	rjmp	.+96     	; 0x26c <displayHomeSystem+0xc0>
	}
	case '2' :
	{
		state = CHANGE_PASSWORD_STATE;
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>
		break;
     212:	2c c0       	rjmp	.+88     	; 0x26c <displayHomeSystem+0xc0>
	}
	default:
	{
		hal_lcd_goToRowColumn(&lcd,0,0);
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	8b e3       	ldi	r24, 0x3B	; 59
     21a:	92 e0       	ldi	r25, 0x02	; 2
     21c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <hal_lcd_goToRowColumn>
		hal_lcd_clearScreen(&lcd);
     220:	8b e3       	ldi	r24, 0x3B	; 59
     222:	92 e0       	ldi	r25, 0x02	; 2
     224:	0e 94 8b 04 	call	0x916	; 0x916 <hal_lcd_clearScreen>

		hal_lcd_displayString(&lcd,(u8_t *)"Wrong Input");
     228:	61 e9       	ldi	r22, 0x91	; 145
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	8b e3       	ldi	r24, 0x3B	; 59
     22e:	92 e0       	ldi	r25, 0x02	; 2
     230:	0e 94 5d 04 	call	0x8ba	; 0x8ba <hal_lcd_displayString>
		hal_lcd_goToRowColumn(&lcd,1,0);
     234:	40 e0       	ldi	r20, 0x00	; 0
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	8b e3       	ldi	r24, 0x3B	; 59
     23a:	92 e0       	ldi	r25, 0x02	; 2
     23c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <hal_lcd_goToRowColumn>
		hal_lcd_displayString(&lcd,(u8_t *)"Try Again");
     240:	6d e9       	ldi	r22, 0x9D	; 157
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	8b e3       	ldi	r24, 0x3B	; 59
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	0e 94 5d 04 	call	0x8ba	; 0x8ba <hal_lcd_displayString>
		delay_ms(10000);
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	70 e4       	ldi	r23, 0x40	; 64
     250:	8c e1       	ldi	r24, 0x1C	; 28
     252:	96 e4       	ldi	r25, 0x46	; 70
     254:	0e 94 2c 0a 	call	0x1458	; 0x1458 <delay_ms>

		hal_lcd_goToRowColumn(&lcd,0,0);
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	8b e3       	ldi	r24, 0x3B	; 59
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	0e 94 78 04 	call	0x8f0	; 0x8f0 <hal_lcd_goToRowColumn>
		hal_lcd_clearScreen(&lcd);
     264:	8b e3       	ldi	r24, 0x3B	; 59
     266:	92 e0       	ldi	r25, 0x02	; 2
     268:	0e 94 8b 04 	call	0x916	; 0x916 <hal_lcd_clearScreen>
		break;
	}
	}
}
     26c:	0f 90       	pop	r0
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <requirePassword>:
/*************************************************************************/
/*                           System Functions                            */
/*************************************************************************/

static void requirePassword(u8_t* message , u8_t* password)
{
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	00 d0       	rcall	.+0      	; 0x282 <requirePassword+0xe>
     282:	00 d0       	rcall	.+0      	; 0x284 <requirePassword+0x10>
     284:	1f 92       	push	r1
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	8c 01       	movw	r16, r24
     28c:	7b 01       	movw	r14, r22
	s8_t keyPressed = NO_KEY_PRESSED;
     28e:	8f ef       	ldi	r24, 0xFF	; 255
     290:	89 83       	std	Y+1, r24	; 0x01
	s8_t buffer[PASSWORD_LENGTH] ={0};
     292:	1a 82       	std	Y+2, r1	; 0x02
     294:	1b 82       	std	Y+3, r1	; 0x03
     296:	1c 82       	std	Y+4, r1	; 0x04
     298:	1d 82       	std	Y+5, r1	; 0x05

	hal_lcd_goToRowColumn(&lcd,0,0);
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	8b e3       	ldi	r24, 0x3B	; 59
     2a0:	92 e0       	ldi	r25, 0x02	; 2
     2a2:	0e 94 78 04 	call	0x8f0	; 0x8f0 <hal_lcd_goToRowColumn>
	hal_lcd_displayString(&lcd,message);
     2a6:	b8 01       	movw	r22, r16
     2a8:	8b e3       	ldi	r24, 0x3B	; 59
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	0e 94 5d 04 	call	0x8ba	; 0x8ba <hal_lcd_displayString>

	/*insert new line for password entering */
	hal_lcd_goToRowColumn(&lcd,1,0);
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	8b e3       	ldi	r24, 0x3B	; 59
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <hal_lcd_goToRowColumn>

	/*take password from user*/
	for (int i = 0 ; i < PASSWORD_LENGTH ; i++)
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	10 e0       	ldi	r17, 0x00	; 0
     2c0:	1a c0       	rjmp	.+52     	; 0x2f6 <requirePassword+0x82>
	{
		/* stay in loop until any key is pressed */
		while(NO_KEY_PRESSED == keyPressed)
		{
			hal_keypad_getKey(&keypad,&keyPressed);
     2c2:	be 01       	movw	r22, r28
     2c4:	6f 5f       	subi	r22, 0xFF	; 255
     2c6:	7f 4f       	sbci	r23, 0xFF	; 255
     2c8:	8d e4       	ldi	r24, 0x4D	; 77
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	0e 94 41 03 	call	0x682	; 0x682 <hal_keypad_getKey>

	/*take password from user*/
	for (int i = 0 ; i < PASSWORD_LENGTH ; i++)
	{
		/* stay in loop until any key is pressed */
		while(NO_KEY_PRESSED == keyPressed)
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	8f 3f       	cpi	r24, 0xFF	; 255
     2d4:	b1 f3       	breq	.-20     	; 0x2c2 <requirePassword+0x4e>
		{
			hal_keypad_getKey(&keypad,&keyPressed);
		}

		/* print * on LCD every time keypad is pressed*/
		hal_lcd_sendData(&lcd,DISPLAY,'*');
     2d6:	4a e2       	ldi	r20, 0x2A	; 42
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	8b e3       	ldi	r24, 0x3B	; 59
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	0e 94 ad 03 	call	0x75a	; 0x75a <hal_lcd_sendData>

		buffer[i] = keyPressed;
     2e2:	e2 e0       	ldi	r30, 0x02	; 2
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	ec 0f       	add	r30, r28
     2e8:	fd 1f       	adc	r31, r29
     2ea:	e0 0f       	add	r30, r16
     2ec:	f1 1f       	adc	r31, r17
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	80 83       	st	Z, r24

	/*insert new line for password entering */
	hal_lcd_goToRowColumn(&lcd,1,0);

	/*take password from user*/
	for (int i = 0 ; i < PASSWORD_LENGTH ; i++)
     2f2:	0f 5f       	subi	r16, 0xFF	; 255
     2f4:	1f 4f       	sbci	r17, 0xFF	; 255
     2f6:	04 30       	cpi	r16, 0x04	; 4
     2f8:	11 05       	cpc	r17, r1
     2fa:	54 f3       	brlt	.-44     	; 0x2d0 <requirePassword+0x5c>
     2fc:	07 c0       	rjmp	.+14     	; 0x30c <requirePassword+0x98>
	}

	/* wait for user to press enter */
	while(ENTER != keyPressed)
	{
		hal_keypad_getKey(&keypad,&keyPressed);
     2fe:	be 01       	movw	r22, r28
     300:	6f 5f       	subi	r22, 0xFF	; 255
     302:	7f 4f       	sbci	r23, 0xFF	; 255
     304:	8d e4       	ldi	r24, 0x4D	; 77
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	0e 94 41 03 	call	0x682	; 0x682 <hal_keypad_getKey>

		buffer[i] = keyPressed;
	}

	/* wait for user to press enter */
	while(ENTER != keyPressed)
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	81 34       	cpi	r24, 0x41	; 65
     310:	b1 f7       	brne	.-20     	; 0x2fe <requirePassword+0x8a>
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0c c0       	rjmp	.+24     	; 0x330 <requirePassword+0xbc>
	}

	/* copy the password buffer to the passed array*/
	for(int i = 0 ; i < PASSWORD_LENGTH ; i++)
	{
		password[i] = buffer[i];
     318:	d7 01       	movw	r26, r14
     31a:	a8 0f       	add	r26, r24
     31c:	b9 1f       	adc	r27, r25
     31e:	e2 e0       	ldi	r30, 0x02	; 2
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ec 0f       	add	r30, r28
     324:	fd 1f       	adc	r31, r29
     326:	e8 0f       	add	r30, r24
     328:	f9 1f       	adc	r31, r25
     32a:	20 81       	ld	r18, Z
     32c:	2c 93       	st	X, r18
	{
		hal_keypad_getKey(&keypad,&keyPressed);
	}

	/* copy the password buffer to the passed array*/
	for(int i = 0 ; i < PASSWORD_LENGTH ; i++)
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	84 30       	cpi	r24, 0x04	; 4
     332:	91 05       	cpc	r25, r1
     334:	8c f3       	brlt	.-30     	; 0x318 <requirePassword+0xa4>
	{
		password[i] = buffer[i];
	}

	hal_lcd_goToRowColumn(&lcd,0,0);
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	8b e3       	ldi	r24, 0x3B	; 59
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <hal_lcd_goToRowColumn>
	hal_lcd_clearScreen(&lcd);
     342:	8b e3       	ldi	r24, 0x3B	; 59
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	0e 94 8b 04 	call	0x916	; 0x916 <hal_lcd_clearScreen>
}
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	08 95       	ret

00000362 <firtTimePassword>:
		state = PASSWORD_INPUT_STATE;
	}
}

static void firtTimePassword()
{
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	28 97       	sbiw	r28, 0x08	; 8
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
	u8_t password[PASSWORD_LENGTH] = {0};
     376:	19 82       	std	Y+1, r1	; 0x01
     378:	1a 82       	std	Y+2, r1	; 0x02
     37a:	1b 82       	std	Y+3, r1	; 0x03
     37c:	1c 82       	std	Y+4, r1	; 0x04
	u8_t confirmPassword[PASSWORD_LENGTH] = {0};
     37e:	1d 82       	std	Y+5, r1	; 0x05
     380:	1e 82       	std	Y+6, r1	; 0x06
     382:	1f 82       	std	Y+7, r1	; 0x07
     384:	18 86       	std	Y+8, r1	; 0x08

	requirePassword((u8_t*)"Enter new password",password);
     386:	be 01       	movw	r22, r28
     388:	6f 5f       	subi	r22, 0xFF	; 255
     38a:	7f 4f       	sbci	r23, 0xFF	; 255
     38c:	87 ea       	ldi	r24, 0xA7	; 167
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 3a 01 	call	0x274	; 0x274 <requirePassword>
	requirePassword((u8_t*)"Confirm password",confirmPassword);
     394:	be 01       	movw	r22, r28
     396:	6b 5f       	subi	r22, 0xFB	; 251
     398:	7f 4f       	sbci	r23, 0xFF	; 255
     39a:	8a eb       	ldi	r24, 0xBA	; 186
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 3a 01 	call	0x274	; 0x274 <requirePassword>

	if (std_strcmp(password,confirmPassword) == 0)
     3a2:	be 01       	movw	r22, r28
     3a4:	6b 5f       	subi	r22, 0xFB	; 251
     3a6:	7f 4f       	sbci	r23, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <std_strcmp>
     3b0:	89 2b       	or	r24, r25
     3b2:	59 f4       	brne	.+22     	; 0x3ca <firtTimePassword+0x68>
	{
		// send password to control unit to save it in EEPROM
		ms_manager_send_data(START_DEFAULT_PASS);
     3b4:	85 e0       	ldi	r24, 0x05	; 5
     3b6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <ms_manager_send_data>
		ms_manager_send_string(password);
     3ba:	ce 01       	movw	r24, r28
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ms_manager_send_string>
		state = PASSWORD_INPUT_STATE;
     3c2:	83 e0       	ldi	r24, 0x03	; 3
     3c4:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>
     3c8:	1f c0       	rjmp	.+62     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	}
	else
	{
		hal_lcd_displayString(&lcd,(u8_t *)"Passwords Doesn't");
     3ca:	6b ec       	ldi	r22, 0xCB	; 203
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	8b e3       	ldi	r24, 0x3B	; 59
     3d0:	92 e0       	ldi	r25, 0x02	; 2
     3d2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <hal_lcd_displayString>
		hal_lcd_goToRowColumn(&lcd,1,0);
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	8b e3       	ldi	r24, 0x3B	; 59
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	0e 94 78 04 	call	0x8f0	; 0x8f0 <hal_lcd_goToRowColumn>
		hal_lcd_displayString(&lcd,(u8_t *)"Match");
     3e2:	6d ed       	ldi	r22, 0xDD	; 221
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	8b e3       	ldi	r24, 0x3B	; 59
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	0e 94 5d 04 	call	0x8ba	; 0x8ba <hal_lcd_displayString>

		delay_ms(10000);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e4       	ldi	r23, 0x40	; 64
     3f2:	8c e1       	ldi	r24, 0x1C	; 28
     3f4:	96 e4       	ldi	r25, 0x46	; 70
     3f6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <delay_ms>

		hal_lcd_clearScreen(&lcd);
     3fa:	8b e3       	ldi	r24, 0x3B	; 59
     3fc:	92 e0       	ldi	r25, 0x02	; 2
     3fe:	0e 94 8b 04 	call	0x916	; 0x916 <hal_lcd_clearScreen>

		state = SET_NEW_PASSWORD_STATE;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>
	}
}
     408:	28 96       	adiw	r28, 0x08	; 8
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	de bf       	out	0x3e, r29	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	cd bf       	out	0x3d, r28	; 61
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <changePassword>:
		passwordErrorCounter++;
	}
}

static void changePassword()
{
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	2c 97       	sbiw	r28, 0x0c	; 12
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
	u8_t oldPassword[PASSWORD_LENGTH] = {0};
     42e:	19 82       	std	Y+1, r1	; 0x01
     430:	1a 82       	std	Y+2, r1	; 0x02
     432:	1b 82       	std	Y+3, r1	; 0x03
     434:	1c 82       	std	Y+4, r1	; 0x04
	u8_t password[PASSWORD_LENGTH] = {0};
     436:	1d 82       	std	Y+5, r1	; 0x05
     438:	1e 82       	std	Y+6, r1	; 0x06
     43a:	1f 82       	std	Y+7, r1	; 0x07
     43c:	18 86       	std	Y+8, r1	; 0x08
	u8_t confirmPassword[PASSWORD_LENGTH] = {0};
     43e:	19 86       	std	Y+9, r1	; 0x09
     440:	1a 86       	std	Y+10, r1	; 0x0a
     442:	1b 86       	std	Y+11, r1	; 0x0b
     444:	1c 86       	std	Y+12, r1	; 0x0c

	requirePassword((u8_t*)"Enter old password",oldPassword);
     446:	be 01       	movw	r22, r28
     448:	6f 5f       	subi	r22, 0xFF	; 255
     44a:	7f 4f       	sbci	r23, 0xFF	; 255
     44c:	83 ee       	ldi	r24, 0xE3	; 227
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 3a 01 	call	0x274	; 0x274 <requirePassword>

	if (std_strcmp(oldPassword,currentPassword) == 0)
     454:	6c e2       	ldi	r22, 0x2C	; 44
     456:	72 e0       	ldi	r23, 0x02	; 2
     458:	ce 01       	movw	r24, r28
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <std_strcmp>
     460:	89 2b       	or	r24, r25
     462:	09 f0       	breq	.+2      	; 0x466 <changePassword+0x4c>
     464:	42 c0       	rjmp	.+132    	; 0x4ea <changePassword+0xd0>
	{
		requirePassword((u8_t*)"Enter new password",password);
     466:	be 01       	movw	r22, r28
     468:	6b 5f       	subi	r22, 0xFB	; 251
     46a:	7f 4f       	sbci	r23, 0xFF	; 255
     46c:	87 ea       	ldi	r24, 0xA7	; 167
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 3a 01 	call	0x274	; 0x274 <requirePassword>
		requirePassword((u8_t*)"Confirm password",confirmPassword);
     474:	be 01       	movw	r22, r28
     476:	67 5f       	subi	r22, 0xF7	; 247
     478:	7f 4f       	sbci	r23, 0xFF	; 255
     47a:	8a eb       	ldi	r24, 0xBA	; 186
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 3a 01 	call	0x274	; 0x274 <requirePassword>

		if (std_strcmp(password,confirmPassword) == 0)
     482:	be 01       	movw	r22, r28
     484:	67 5f       	subi	r22, 0xF7	; 247
     486:	7f 4f       	sbci	r23, 0xFF	; 255
     488:	ce 01       	movw	r24, r28
     48a:	05 96       	adiw	r24, 0x05	; 5
     48c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <std_strcmp>
     490:	89 2b       	or	r24, r25
     492:	59 f4       	brne	.+22     	; 0x4aa <changePassword+0x90>
		{
			// send password to control unit to save it in EEPROM
			ms_manager_send_data(START_NEW_PASS);
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <ms_manager_send_data>
			ms_manager_send_string(password);
     49a:	ce 01       	movw	r24, r28
     49c:	05 96       	adiw	r24, 0x05	; 5
     49e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ms_manager_send_string>
			state = PASSWORD_INPUT_STATE;
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>
     4a8:	23 c0       	rjmp	.+70     	; 0x4f0 <changePassword+0xd6>
		}
		else
		{
			hal_lcd_displayString(&lcd,(u8_t *)"Passwords Doesn't");
     4aa:	6b ec       	ldi	r22, 0xCB	; 203
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	8b e3       	ldi	r24, 0x3B	; 59
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <hal_lcd_displayString>
			hal_lcd_goToRowColumn(&lcd,1,0);
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	8b e3       	ldi	r24, 0x3B	; 59
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	0e 94 78 04 	call	0x8f0	; 0x8f0 <hal_lcd_goToRowColumn>
			hal_lcd_displayString(&lcd,(u8_t *)"Match");
     4c2:	6d ed       	ldi	r22, 0xDD	; 221
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	8b e3       	ldi	r24, 0x3B	; 59
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	0e 94 5d 04 	call	0x8ba	; 0x8ba <hal_lcd_displayString>

			delay_ms(10000);
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	70 e4       	ldi	r23, 0x40	; 64
     4d2:	8c e1       	ldi	r24, 0x1C	; 28
     4d4:	96 e4       	ldi	r25, 0x46	; 70
     4d6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <delay_ms>

			hal_lcd_clearScreen(&lcd);
     4da:	8b e3       	ldi	r24, 0x3B	; 59
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	0e 94 8b 04 	call	0x916	; 0x916 <hal_lcd_clearScreen>

			state = HOME_STATE;
     4e2:	85 e0       	ldi	r24, 0x05	; 5
     4e4:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <changePassword+0xd6>
		}
	}
	else
	{
		state = HOME_STATE;
     4ea:	85 e0       	ldi	r24, 0x05	; 5
     4ec:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>
	}
}
     4f0:	2c 96       	adiw	r28, 0x0c	; 12
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <passwordInputState>:
	hal_lcd_goToRowColumn(&lcd,0,0);
	hal_lcd_clearScreen(&lcd);
}

static void passwordInputState()
{
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	00 d0       	rcall	.+0      	; 0x508 <passwordInputState+0x6>
     508:	00 d0       	rcall	.+0      	; 0x50a <passwordInputState+0x8>
     50a:	1f 92       	push	r1
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
	u8_t password[PASSWORD_LENGTH] = {0};
     510:	19 82       	std	Y+1, r1	; 0x01
     512:	1a 82       	std	Y+2, r1	; 0x02
     514:	1b 82       	std	Y+3, r1	; 0x03
     516:	1c 82       	std	Y+4, r1	; 0x04
	u8_t buffer=0;
     518:	1d 82       	std	Y+5, r1	; 0x05

	requirePassword((u8_t*)"Enter password",password);
     51a:	be 01       	movw	r22, r28
     51c:	6f 5f       	subi	r22, 0xFF	; 255
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	86 ef       	ldi	r24, 0xF6	; 246
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 3a 01 	call	0x274	; 0x274 <requirePassword>

	/* send data to Control ECU to be validated */
	ms_manager_send_data(START);
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <ms_manager_send_data>

	/* send the actual password */
	ms_manager_send_string(password);
     52e:	ce 01       	movw	r24, r28
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ms_manager_send_string>

	/* receive response from Control ECU */
	ms_manager_receive_data(&buffer);
     536:	ce 01       	movw	r24, r28
     538:	05 96       	adiw	r24, 0x05	; 5
     53a:	0e 94 13 0a 	call	0x1426	; 0x1426 <ms_manager_receive_data>

	switch(buffer)
     53e:	8d 81       	ldd	r24, Y+5	; 0x05
     540:	82 30       	cpi	r24, 0x02	; 2
     542:	99 f0       	breq	.+38     	; 0x56a <passwordInputState+0x68>
     544:	83 30       	cpi	r24, 0x03	; 3
     546:	c9 f4       	brne	.+50     	; 0x57a <passwordInputState+0x78>
	{
	case PASSWORD_WRONG:
	{
		userAuthentication(ANONYMOUS);
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e 94 49 00 	call	0x92	; 0x92 <userAuthentication>
		break;
     54e:	15 c0       	rjmp	.+42     	; 0x57a <passwordInputState+0x78>
	case PASSWORD_RIGHT:
	{
		/* if password is correct save the current password globally */
		for (int i =0 ; i < PASSWORD_LENGTH ;i++)
		{
			currentPassword[i] = password[i];
     550:	e1 e0       	ldi	r30, 0x01	; 1
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	ec 0f       	add	r30, r28
     556:	fd 1f       	adc	r31, r29
     558:	e8 0f       	add	r30, r24
     55a:	f9 1f       	adc	r31, r25
     55c:	20 81       	ld	r18, Z
     55e:	fc 01       	movw	r30, r24
     560:	e4 5d       	subi	r30, 0xD4	; 212
     562:	fd 4f       	sbci	r31, 0xFD	; 253
     564:	20 83       	st	Z, r18
		break;
	}
	case PASSWORD_RIGHT:
	{
		/* if password is correct save the current password globally */
		for (int i =0 ; i < PASSWORD_LENGTH ;i++)
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	02 c0       	rjmp	.+4      	; 0x56e <passwordInputState+0x6c>
	ms_manager_send_string(password);

	/* receive response from Control ECU */
	ms_manager_receive_data(&buffer);

	switch(buffer)
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	case PASSWORD_RIGHT:
	{
		/* if password is correct save the current password globally */
		for (int i =0 ; i < PASSWORD_LENGTH ;i++)
     56e:	84 30       	cpi	r24, 0x04	; 4
     570:	91 05       	cpc	r25, r1
     572:	74 f3       	brlt	.-36     	; 0x550 <passwordInputState+0x4e>
		{
			currentPassword[i] = password[i];
		}

		userAuthentication(AUTHENTICATED);
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	0e 94 49 00 	call	0x92	; 0x92 <userAuthentication>
	{
		/* ECU didn't response in right way */
	}
	}

}
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <startAlarmSystem>:
	}
}

static void startAlarmSystem()
{
	mcal_timer_start(&timer);
     58a:	81 e4       	ldi	r24, 0x41	; 65
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	0e 94 96 06 	call	0xd2c	; 0xd2c <mcal_timer_start>
	ms_manager_send_data(ALARM);
     592:	8c e0       	ldi	r24, 0x0C	; 12
     594:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <ms_manager_send_data>

	state = HALT_STATE;
     598:	87 e0       	ldi	r24, 0x07	; 7
     59a:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <state>
     59e:	08 95       	ret

000005a0 <main>:
/*                               Main Program                            */
/*************************************************************************/

int main(void)
{
	state = CHECK_DEFAULT_PASSWORD_STATE;
     5a0:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <state>

	systemInit();
     5a4:	0e 94 a8 00 	call	0x150	; 0x150 <systemInit>

	while(1)
	{
		switch(state)
     5a8:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <state>
     5ac:	82 30       	cpi	r24, 0x02	; 2
     5ae:	91 f0       	breq	.+36     	; 0x5d4 <main+0x34>
     5b0:	28 f4       	brcc	.+10     	; 0x5bc <main+0x1c>
     5b2:	88 23       	and	r24, r24
     5b4:	49 f0       	breq	.+18     	; 0x5c8 <main+0x28>
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	51 f0       	breq	.+20     	; 0x5ce <main+0x2e>
     5ba:	f6 cf       	rjmp	.-20     	; 0x5a8 <main+0x8>
     5bc:	84 30       	cpi	r24, 0x04	; 4
     5be:	99 f0       	breq	.+38     	; 0x5e6 <main+0x46>
     5c0:	60 f0       	brcs	.+24     	; 0x5da <main+0x3a>
     5c2:	85 30       	cpi	r24, 0x05	; 5
     5c4:	69 f0       	breq	.+26     	; 0x5e0 <main+0x40>
     5c6:	f0 cf       	rjmp	.-32     	; 0x5a8 <main+0x8>
		{

		case CHECK_DEFAULT_PASSWORD_STATE:
		{
			checkDefaultPassword();
     5c8:	0e 94 bb 00 	call	0x176	; 0x176 <checkDefaultPassword>
			break;
     5cc:	ed cf       	rjmp	.-38     	; 0x5a8 <main+0x8>
		}

		case SET_NEW_PASSWORD_STATE:
		{
			firtTimePassword();
     5ce:	0e 94 b1 01 	call	0x362	; 0x362 <firtTimePassword>
			break;
     5d2:	ea cf       	rjmp	.-44     	; 0x5a8 <main+0x8>
		}

		case CHANGE_PASSWORD_STATE:
		{
			changePassword();
     5d4:	0e 94 0d 02 	call	0x41a	; 0x41a <changePassword>
			break;
     5d8:	e7 cf       	rjmp	.-50     	; 0x5a8 <main+0x8>
		}

		case PASSWORD_INPUT_STATE :
		{
			passwordInputState();
     5da:	0e 94 81 02 	call	0x502	; 0x502 <passwordInputState>
			break;
     5de:	e4 cf       	rjmp	.-56     	; 0x5a8 <main+0x8>
		}

		case HOME_STATE:
		{
			displayHomeSystem();
     5e0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <displayHomeSystem>
			break;
     5e4:	e1 cf       	rjmp	.-62     	; 0x5a8 <main+0x8>
		}

		case ALARM_SYSTEM_STATE:
		{
			startAlarmSystem();
     5e6:	0e 94 c5 02 	call	0x58a	; 0x58a <startAlarmSystem>
			break;
     5ea:	de cf       	rjmp	.-68     	; 0x5a8 <main+0x8>

000005ec <hal_keypad_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

keypad_error_t hal_keypad_init (keypad_t* keypad)
{
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ec 01       	movw	r28, r24
	keypad_error_t error = KEYPAD_SUCCESS;

	/* Initialize all columns GPIOS of keypad as output pins */
	for(int i =0 ; i < keypad->keypadColsNo ; i++)
     5f8:	00 e0       	ldi	r16, 0x00	; 0
     5fa:	10 e0       	ldi	r17, 0x00	; 0
/*                     Functions Implementation                          */
/*************************************************************************/

keypad_error_t hal_keypad_init (keypad_t* keypad)
{
	keypad_error_t error = KEYPAD_SUCCESS;
     5fc:	f1 2c       	mov	r15, r1

	/* Initialize all columns GPIOS of keypad as output pins */
	for(int i =0 ; i < keypad->keypadColsNo ; i++)
     5fe:	1e c0       	rjmp	.+60     	; 0x63c <hal_keypad_init+0x50>
	{
		if(GPIO_STATE_SUCCESS == mcal_gpio_pin_init
				(keypad->keypadColsPORT,((u8_t*)keypad->keypadColumnsGPIOS)[i],DIR_OUTPUT))
     600:	ee 81       	ldd	r30, Y+6	; 0x06
     602:	ff 81       	ldd	r31, Y+7	; 0x07
     604:	e0 0f       	add	r30, r16
     606:	f1 1f       	adc	r31, r17
	keypad_error_t error = KEYPAD_SUCCESS;

	/* Initialize all columns GPIOS of keypad as output pins */
	for(int i =0 ; i < keypad->keypadColsNo ; i++)
	{
		if(GPIO_STATE_SUCCESS == mcal_gpio_pin_init
     608:	42 e0       	ldi	r20, 0x02	; 2
     60a:	60 81       	ld	r22, Z
     60c:	88 81       	ld	r24, Y
     60e:	0e 94 90 04 	call	0x920	; 0x920 <mcal_gpio_pin_init>
     612:	81 11       	cpse	r24, r1
     614:	0c c0       	rjmp	.+24     	; 0x62e <hal_keypad_init+0x42>
				(keypad->keypadColsPORT,((u8_t*)keypad->keypadColumnsGPIOS)[i],DIR_OUTPUT))
		{
			if (GPIO_STATE_SUCCESS == mcal_gpio_pin_write
					(keypad->keypadColsPORT,((u8_t*)keypad->keypadColumnsGPIOS)[i],HIGH))
     616:	ee 81       	ldd	r30, Y+6	; 0x06
     618:	ff 81       	ldd	r31, Y+7	; 0x07
     61a:	e0 0f       	add	r30, r16
     61c:	f1 1f       	adc	r31, r17
	for(int i =0 ; i < keypad->keypadColsNo ; i++)
	{
		if(GPIO_STATE_SUCCESS == mcal_gpio_pin_init
				(keypad->keypadColsPORT,((u8_t*)keypad->keypadColumnsGPIOS)[i],DIR_OUTPUT))
		{
			if (GPIO_STATE_SUCCESS == mcal_gpio_pin_write
     61e:	41 e0       	ldi	r20, 0x01	; 1
     620:	60 81       	ld	r22, Z
     622:	88 81       	ld	r24, Y
     624:	0e 94 d5 04 	call	0x9aa	; 0x9aa <mcal_gpio_pin_write>
     628:	81 11       	cpse	r24, r1
     62a:	04 c0       	rjmp	.+8      	; 0x634 <hal_keypad_init+0x48>
     62c:	05 c0       	rjmp	.+10     	; 0x638 <hal_keypad_init+0x4c>
				error = KEYPAD_FAIL;
			}
		}
		else
		{
			error = KEYPAD_FAIL;
     62e:	ff 24       	eor	r15, r15
     630:	f3 94       	inc	r15
     632:	02 c0       	rjmp	.+4      	; 0x638 <hal_keypad_init+0x4c>
			{
				/* pin configured */
			}
			else
			{
				error = KEYPAD_FAIL;
     634:	ff 24       	eor	r15, r15
     636:	f3 94       	inc	r15
keypad_error_t hal_keypad_init (keypad_t* keypad)
{
	keypad_error_t error = KEYPAD_SUCCESS;

	/* Initialize all columns GPIOS of keypad as output pins */
	for(int i =0 ; i < keypad->keypadColsNo ; i++)
     638:	0f 5f       	subi	r16, 0xFF	; 255
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
     63c:	8b 81       	ldd	r24, Y+3	; 0x03
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	08 17       	cp	r16, r24
     642:	19 07       	cpc	r17, r25
     644:	ec f2       	brlt	.-70     	; 0x600 <hal_keypad_init+0x14>
     646:	00 e0       	ldi	r16, 0x00	; 0
     648:	10 e0       	ldi	r17, 0x00	; 0
     64a:	0f c0       	rjmp	.+30     	; 0x66a <hal_keypad_init+0x7e>

	/* Initialize all Rows GPIOS of keypad as input pull up pins */
	for(int i =0 ; i < keypad->keypadRowsNo ; i++)
	{
		if(GPIO_STATE_SUCCESS == mcal_gpio_pin_init
				(keypad->keypadRowsPort,((u8_t*)keypad->keypadRowsGPIOS)[i],DIR_INPUT_PULLUP))
     64c:	ec 81       	ldd	r30, Y+4	; 0x04
     64e:	fd 81       	ldd	r31, Y+5	; 0x05
     650:	e0 0f       	add	r30, r16
     652:	f1 1f       	adc	r31, r17
	}

	/* Initialize all Rows GPIOS of keypad as input pull up pins */
	for(int i =0 ; i < keypad->keypadRowsNo ; i++)
	{
		if(GPIO_STATE_SUCCESS == mcal_gpio_pin_init
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	60 81       	ld	r22, Z
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	0e 94 90 04 	call	0x920	; 0x920 <mcal_gpio_pin_init>
     65e:	88 23       	and	r24, r24
     660:	11 f0       	breq	.+4      	; 0x666 <hal_keypad_init+0x7a>
		{
			/* pin configured */
		}
		else
		{
			error = KEYPAD_FAIL;
     662:	ff 24       	eor	r15, r15
     664:	f3 94       	inc	r15
			error = KEYPAD_FAIL;
		}
	}

	/* Initialize all Rows GPIOS of keypad as input pull up pins */
	for(int i =0 ; i < keypad->keypadRowsNo ; i++)
     666:	0f 5f       	subi	r16, 0xFF	; 255
     668:	1f 4f       	sbci	r17, 0xFF	; 255
     66a:	8a 81       	ldd	r24, Y+2	; 0x02
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	08 17       	cp	r16, r24
     670:	19 07       	cpc	r17, r25
     672:	64 f3       	brlt	.-40     	; 0x64c <hal_keypad_init+0x60>
			error = KEYPAD_FAIL;
		}
	}

	return error;
}
     674:	8f 2d       	mov	r24, r15
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	08 95       	ret

00000682 <hal_keypad_getKey>:

keypad_error_t hal_keypad_getKey(keypad_t* keypad , s8_t* keyPressed)
{
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
     68e:	8b 01       	movw	r16, r22
	keypad_error_t error = KEYPAD_SUCCESS;
	/* the following loop clear every column one by one then
       to search for a pressed key in that column then increments
       to the second column to find if key pressed into ... etc*/

	for (u8_t col_count = 0 ; col_count < keypad->keypadRowsNo ; col_count++)
     690:	f1 2c       	mov	r15, r1
     692:	58 c0       	rjmp	.+176    	; 0x744 <hal_keypad_getKey+0xc2>
	{
		/*this line clears the column that is selected by for loop*/
		clr_bit(keypad->keypadColsPORT+ OFFSET_PORT ,((u8_t*)keypad->keypadColumnsGPIOS)[col_count]);
     694:	e8 81       	ld	r30, Y
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	22 81       	ldd	r18, Z+2	; 0x02
     69a:	ae 81       	ldd	r26, Y+6	; 0x06
     69c:	bf 81       	ldd	r27, Y+7	; 0x07
     69e:	af 0d       	add	r26, r15
     6a0:	b1 1d       	adc	r27, r1
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0c 90       	ld	r0, X
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <hal_keypad_getKey+0x2c>
     6aa:	88 0f       	add	r24, r24
     6ac:	99 1f       	adc	r25, r25
     6ae:	0a 94       	dec	r0
     6b0:	e2 f7       	brpl	.-8      	; 0x6aa <hal_keypad_getKey+0x28>
     6b2:	80 95       	com	r24
     6b4:	82 23       	and	r24, r18
     6b6:	82 83       	std	Z+2, r24	; 0x02

		//clr_bit(keypad->keypadColsPORT+ OFFSET_PORT , arr[col_count]);

		/* delay 5 mills-seconds give user time to press*/
		delay_ms(5);
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	80 ea       	ldi	r24, 0xA0	; 160
     6be:	90 e4       	ldi	r25, 0x40	; 64
     6c0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <delay_ms>

		/* the following for loop , loop on the rows to find if any
		   key is pressed on the rows for each column*/
		for (u8_t row_count=0 ; row_count< keypad->keypadColsNo ; row_count++)
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	36 c0       	rjmp	.+108    	; 0x734 <hal_keypad_getKey+0xb2>
		{
			/* if any bit of that row is cleared (means pressed)*/
			if (bit_is_clr(keypad->keypadRowsPort + OFFSET_PIN ,((u8_t*)keypad->keypadRowsGPIOS)[row_count]))
     6c8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	ec 81       	ldd	r30, Y+4	; 0x04
     6d0:	fd 81       	ldd	r31, Y+5	; 0x05
     6d2:	42 2f       	mov	r20, r18
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	e4 0f       	add	r30, r20
     6d8:	f5 1f       	adc	r31, r21
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	00 80       	ld	r0, Z
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <hal_keypad_getKey+0x62>
     6e0:	95 95       	asr	r25
     6e2:	87 95       	ror	r24
     6e4:	0a 94       	dec	r0
     6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <hal_keypad_getKey+0x5e>
     6e8:	80 fd       	sbrc	r24, 0
     6ea:	20 c0       	rjmp	.+64     	; 0x72c <hal_keypad_getKey+0xaa>
     6ec:	0e c0       	rjmp	.+28     	; 0x70a <hal_keypad_getKey+0x88>

					/* as soon as we found the keypressed by finding
				   the intersection between the column and row
				   needed we get that value from the array that
				   is declared in configuration */  
					*keyPressed = ((s8_t*)keypad->keypadMapping)[(row_count * keypad->keypadRowsNo) + col_count];
     6ee:	88 85       	ldd	r24, Y+8	; 0x08
     6f0:	99 85       	ldd	r25, Y+9	; 0x09
     6f2:	3a 81       	ldd	r19, Y+2	; 0x02
     6f4:	ef 2d       	mov	r30, r15
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	23 9f       	mul	r18, r19
     6fa:	e0 0d       	add	r30, r0
     6fc:	f1 1d       	adc	r31, r1
     6fe:	11 24       	eor	r1, r1
     700:	e8 0f       	add	r30, r24
     702:	f9 1f       	adc	r31, r25
     704:	80 81       	ld	r24, Z
     706:	f8 01       	movw	r30, r16
     708:	80 83       	st	Z, r24
				   as the moment the user leaves the button in
				   order to get one reading only from the push
				   because normally when you press you get a lot
				   of readings because micro-controller is a lot
				   faster than you */
				while(bit_is_clr(keypad->keypadRowsPort + OFFSET_PIN ,((u8_t*)keypad->keypadRowsGPIOS)[row_count]))
     70a:	e9 81       	ldd	r30, Y+1	; 0x01
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	ec 81       	ldd	r30, Y+4	; 0x04
     712:	fd 81       	ldd	r31, Y+5	; 0x05
     714:	e4 0f       	add	r30, r20
     716:	f5 1f       	adc	r31, r21
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	00 80       	ld	r0, Z
     71c:	02 c0       	rjmp	.+4      	; 0x722 <hal_keypad_getKey+0xa0>
     71e:	95 95       	asr	r25
     720:	87 95       	ror	r24
     722:	0a 94       	dec	r0
     724:	e2 f7       	brpl	.-8      	; 0x71e <hal_keypad_getKey+0x9c>
     726:	80 ff       	sbrs	r24, 0
     728:	e2 cf       	rjmp	.-60     	; 0x6ee <hal_keypad_getKey+0x6c>
     72a:	10 c0       	rjmp	.+32     	; 0x74c <hal_keypad_getKey+0xca>
			}
			/* if no keypressed , then all the bits of the 
			   port is ones meaning 0xff */
			else
			{
				*keyPressed = NO_KEY_PRESSED;
     72c:	8f ef       	ldi	r24, 0xFF	; 255
     72e:	f8 01       	movw	r30, r16
     730:	80 83       	st	Z, r24
		/* delay 5 mills-seconds give user time to press*/
		delay_ms(5);

		/* the following for loop , loop on the rows to find if any
		   key is pressed on the rows for each column*/
		for (u8_t row_count=0 ; row_count< keypad->keypadColsNo ; row_count++)
     732:	2f 5f       	subi	r18, 0xFF	; 255
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	28 17       	cp	r18, r24
     738:	38 f2       	brcs	.-114    	; 0x6c8 <hal_keypad_getKey+0x46>
				*keyPressed = NO_KEY_PRESSED;
			}
		}
		/*make all the port equal to one again in order to clear
		  only the bit of the column that we need to search for*/
		register(keypad->keypadColsPORT + OFFSET_PORT) = PORT_ON;
     73a:	e8 81       	ld	r30, Y
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	82 83       	std	Z+2, r24	; 0x02
	keypad_error_t error = KEYPAD_SUCCESS;
	/* the following loop clear every column one by one then
       to search for a pressed key in that column then increments
       to the second column to find if key pressed into ... etc*/

	for (u8_t col_count = 0 ; col_count < keypad->keypadRowsNo ; col_count++)
     742:	f3 94       	inc	r15
     744:	8a 81       	ldd	r24, Y+2	; 0x02
     746:	f8 16       	cp	r15, r24
     748:	08 f4       	brcc	.+2      	; 0x74c <hal_keypad_getKey+0xca>
     74a:	a4 cf       	rjmp	.-184    	; 0x694 <hal_keypad_getKey+0x12>
		/*make all the port equal to one again in order to clear
		  only the bit of the column that we need to search for*/
		register(keypad->keypadColsPORT + OFFSET_PORT) = PORT_ON;
	}
	return error;
}
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	08 95       	ret

0000075a <hal_lcd_sendData>:
	lcd_error_t error = LCD_SUCCESS;
	u8_t buff[16]; /* String to hold the ascii result */
	std_itoa(data,buff,10); /* 10 for decimal */
	error = hal_lcd_displayString(lcd,buff);
	return error;
}
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ec 01       	movw	r28, r24
     762:	14 2f       	mov	r17, r20
     764:	61 11       	cpse	r22, r1
     766:	06 c0       	rjmp	.+12     	; 0x774 <hal_lcd_sendData+0x1a>
     768:	6b 81       	ldd	r22, Y+3	; 0x03
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <mcal_gpio_pin_write>
     772:	07 c0       	rjmp	.+14     	; 0x782 <hal_lcd_sendData+0x28>
     774:	61 30       	cpi	r22, 0x01	; 1
     776:	29 f4       	brne	.+10     	; 0x782 <hal_lcd_sendData+0x28>
     778:	6b 81       	ldd	r22, Y+3	; 0x03
     77a:	41 e0       	ldi	r20, 0x01	; 1
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <mcal_gpio_pin_write>
     782:	6d 81       	ldd	r22, Y+5	; 0x05
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	0e 94 d5 04 	call	0x9aa	; 0x9aa <mcal_gpio_pin_write>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e8       	ldi	r24, 0x80	; 128
     792:	9f e3       	ldi	r25, 0x3F	; 63
     794:	0e 94 2c 0a 	call	0x1458	; 0x1458 <delay_ms>
     798:	8a 81       	ldd	r24, Y+2	; 0x02
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	39 f4       	brne	.+14     	; 0x7ac <hal_lcd_sendData+0x52>
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	61 2f       	mov	r22, r17
     7a2:	88 81       	ld	r24, Y
     7a4:	0e 94 35 05 	call	0xa6a	; 0xa6a <mcal_port_write>
     7a8:	18 2f       	mov	r17, r24
     7aa:	08 c0       	rjmp	.+16     	; 0x7bc <hal_lcd_sendData+0x62>
     7ac:	81 11       	cpse	r24, r1
     7ae:	22 c0       	rjmp	.+68     	; 0x7f4 <hal_lcd_sendData+0x9a>
     7b0:	4f e0       	ldi	r20, 0x0F	; 15
     7b2:	61 2f       	mov	r22, r17
     7b4:	88 81       	ld	r24, Y
     7b6:	0e 94 35 05 	call	0xa6a	; 0xa6a <mcal_port_write>
     7ba:	18 2f       	mov	r17, r24
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	80 e8       	ldi	r24, 0x80	; 128
     7c2:	9f e3       	ldi	r25, 0x3F	; 63
     7c4:	0e 94 2c 0a 	call	0x1458	; 0x1458 <delay_ms>
     7c8:	6d 81       	ldd	r22, Y+5	; 0x05
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	0e 94 d5 04 	call	0x9aa	; 0x9aa <mcal_gpio_pin_write>
     7d2:	c8 2f       	mov	r28, r24
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	80 e8       	ldi	r24, 0x80	; 128
     7da:	9f e3       	ldi	r25, 0x3F	; 63
     7dc:	0e 94 2c 0a 	call	0x1458	; 0x1458 <delay_ms>
     7e0:	c1 11       	cpse	r28, r1
     7e2:	04 c0       	rjmp	.+8      	; 0x7ec <hal_lcd_sendData+0x92>
     7e4:	11 23       	and	r17, r17
     7e6:	21 f0       	breq	.+8      	; 0x7f0 <hal_lcd_sendData+0x96>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <hal_lcd_sendData+0x9c>
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <hal_lcd_sendData+0x9c>
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <hal_lcd_sendData+0x9c>
     7f4:	84 e0       	ldi	r24, 0x04	; 4
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	08 95       	ret

000007fe <hal_lcd_init>:
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ec 01       	movw	r28, r24
     806:	6d 81       	ldd	r22, Y+5	; 0x05
     808:	42 e0       	ldi	r20, 0x02	; 2
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	0e 94 90 04 	call	0x920	; 0x920 <mcal_gpio_pin_init>
     810:	6c 81       	ldd	r22, Y+4	; 0x04
     812:	42 e0       	ldi	r20, 0x02	; 2
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	0e 94 90 04 	call	0x920	; 0x920 <mcal_gpio_pin_init>
     81a:	6b 81       	ldd	r22, Y+3	; 0x03
     81c:	42 e0       	ldi	r20, 0x02	; 2
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	0e 94 90 04 	call	0x920	; 0x920 <mcal_gpio_pin_init>
     824:	81 11       	cpse	r24, r1
     826:	3f c0       	rjmp	.+126    	; 0x8a6 <__stack+0x47>
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	81 f4       	brne	.+32     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     82e:	4f ef       	ldi	r20, 0xFF	; 255
     830:	62 e0       	ldi	r22, 0x02	; 2
     832:	88 81       	ld	r24, Y
     834:	0e 94 06 05 	call	0xa0c	; 0xa0c <mcal_port_init>
     838:	81 11       	cpse	r24, r1
     83a:	1b c0       	rjmp	.+54     	; 0x872 <__stack+0x13>
     83c:	48 e3       	ldi	r20, 0x38	; 56
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	ce 01       	movw	r24, r28
     842:	0e 94 ad 03 	call	0x75a	; 0x75a <hal_lcd_sendData>
     846:	81 11       	cpse	r24, r1
     848:	16 c0       	rjmp	.+44     	; 0x876 <__stack+0x17>
     84a:	10 e0       	ldi	r17, 0x00	; 0
     84c:	1b c0       	rjmp	.+54     	; 0x884 <__stack+0x25>
     84e:	81 11       	cpse	r24, r1
     850:	14 c0       	rjmp	.+40     	; 0x87a <__stack+0x1b>
     852:	4f e0       	ldi	r20, 0x0F	; 15
     854:	62 e0       	ldi	r22, 0x02	; 2
     856:	88 81       	ld	r24, Y
     858:	0e 94 06 05 	call	0xa0c	; 0xa0c <mcal_port_init>
     85c:	81 11       	cpse	r24, r1
     85e:	0f c0       	rjmp	.+30     	; 0x87e <__stack+0x1f>
     860:	48 e2       	ldi	r20, 0x28	; 40
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	ce 01       	movw	r24, r28
     866:	0e 94 ad 03 	call	0x75a	; 0x75a <hal_lcd_sendData>
     86a:	81 11       	cpse	r24, r1
     86c:	0a c0       	rjmp	.+20     	; 0x882 <__stack+0x23>
     86e:	10 e0       	ldi	r17, 0x00	; 0
     870:	09 c0       	rjmp	.+18     	; 0x884 <__stack+0x25>
     872:	11 e0       	ldi	r17, 0x01	; 1
     874:	07 c0       	rjmp	.+14     	; 0x884 <__stack+0x25>
     876:	12 e0       	ldi	r17, 0x02	; 2
     878:	05 c0       	rjmp	.+10     	; 0x884 <__stack+0x25>
     87a:	14 e0       	ldi	r17, 0x04	; 4
     87c:	03 c0       	rjmp	.+6      	; 0x884 <__stack+0x25>
     87e:	11 e0       	ldi	r17, 0x01	; 1
     880:	01 c0       	rjmp	.+2      	; 0x884 <__stack+0x25>
     882:	12 e0       	ldi	r17, 0x02	; 2
     884:	11 11       	cpse	r17, r1
     886:	14 c0       	rjmp	.+40     	; 0x8b0 <__stack+0x51>
     888:	4c e0       	ldi	r20, 0x0C	; 12
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	ce 01       	movw	r24, r28
     88e:	0e 94 ad 03 	call	0x75a	; 0x75a <hal_lcd_sendData>
     892:	81 11       	cpse	r24, r1
     894:	0a c0       	rjmp	.+20     	; 0x8aa <__stack+0x4b>
     896:	41 e0       	ldi	r20, 0x01	; 1
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 ad 03 	call	0x75a	; 0x75a <hal_lcd_sendData>
     8a0:	81 11       	cpse	r24, r1
     8a2:	05 c0       	rjmp	.+10     	; 0x8ae <__stack+0x4f>
     8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <__stack+0x51>
     8a6:	11 e0       	ldi	r17, 0x01	; 1
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <__stack+0x51>
     8aa:	12 e0       	ldi	r17, 0x02	; 2
     8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <__stack+0x51>
     8ae:	12 e0       	ldi	r17, 0x02	; 2
     8b0:	81 2f       	mov	r24, r17
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	08 95       	ret

000008ba <hal_lcd_displayString>:
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	7c 01       	movw	r14, r24
     8c6:	8b 01       	movw	r16, r22
     8c8:	c0 e0       	ldi	r28, 0x00	; 0
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <hal_lcd_displayString+0x1e>
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	c7 01       	movw	r24, r14
     8d2:	0e 94 ad 03 	call	0x75a	; 0x75a <hal_lcd_sendData>
     8d6:	cf 5f       	subi	r28, 0xFF	; 255
     8d8:	f8 01       	movw	r30, r16
     8da:	ec 0f       	add	r30, r28
     8dc:	f1 1d       	adc	r31, r1
     8de:	40 81       	ld	r20, Z
     8e0:	41 11       	cpse	r20, r1
     8e2:	f5 cf       	rjmp	.-22     	; 0x8ce <hal_lcd_displayString+0x14>
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	08 95       	ret

000008f0 <hal_lcd_goToRowColumn>:
     8f0:	61 30       	cpi	r22, 0x01	; 1
     8f2:	39 f0       	breq	.+14     	; 0x902 <hal_lcd_goToRowColumn+0x12>
     8f4:	58 f0       	brcs	.+22     	; 0x90c <hal_lcd_goToRowColumn+0x1c>
     8f6:	62 30       	cpi	r22, 0x02	; 2
     8f8:	31 f0       	breq	.+12     	; 0x906 <hal_lcd_goToRowColumn+0x16>
     8fa:	63 30       	cpi	r22, 0x03	; 3
     8fc:	31 f0       	breq	.+12     	; 0x90a <hal_lcd_goToRowColumn+0x1a>
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	05 c0       	rjmp	.+10     	; 0x90c <hal_lcd_goToRowColumn+0x1c>
     902:	40 5c       	subi	r20, 0xC0	; 192
     904:	03 c0       	rjmp	.+6      	; 0x90c <hal_lcd_goToRowColumn+0x1c>
     906:	40 5f       	subi	r20, 0xF0	; 240
     908:	01 c0       	rjmp	.+2      	; 0x90c <hal_lcd_goToRowColumn+0x1c>
     90a:	40 5b       	subi	r20, 0xB0	; 176
     90c:	40 68       	ori	r20, 0x80	; 128
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	0e 94 ad 03 	call	0x75a	; 0x75a <hal_lcd_sendData>
     914:	08 95       	ret

00000916 <hal_lcd_clearScreen>:

lcd_error_t hal_lcd_clearScreen(lcd_t *lcd)
{
	lcd_error_t error = LCD_SUCCESS;
	error = hal_lcd_sendData(lcd,COMMAND,CLEAR_COMMAND); //clear display
     916:	41 e0       	ldi	r20, 0x01	; 1
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	0e 94 ad 03 	call	0x75a	; 0x75a <hal_lcd_sendData>
	return error;
}
     91e:	08 95       	ret

00000920 <mcal_gpio_pin_init>:

GPIO_STATE_ERROR_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
     920:	89 33       	cpi	r24, 0x39	; 57
     922:	31 f0       	breq	.+12     	; 0x930 <mcal_gpio_pin_init+0x10>
     924:	86 33       	cpi	r24, 0x36	; 54
     926:	21 f0       	breq	.+8      	; 0x930 <mcal_gpio_pin_init+0x10>
     928:	83 33       	cpi	r24, 0x33	; 51
     92a:	11 f0       	breq	.+4      	; 0x930 <mcal_gpio_pin_init+0x10>
     92c:	80 33       	cpi	r24, 0x30	; 48
     92e:	b9 f5       	brne	.+110    	; 0x99e <mcal_gpio_pin_init+0x7e>
	{
		if (pin < ECU_PORT_PINS_NUMBER)
     930:	68 30       	cpi	r22, 0x08	; 8
     932:	b8 f5       	brcc	.+110    	; 0x9a2 <mcal_gpio_pin_init+0x82>
		{
			switch (dir)
     934:	41 30       	cpi	r20, 0x01	; 1
     936:	89 f0       	breq	.+34     	; 0x95a <mcal_gpio_pin_init+0x3a>
     938:	f8 f0       	brcs	.+62     	; 0x978 <mcal_gpio_pin_init+0x58>
     93a:	42 30       	cpi	r20, 0x02	; 2
     93c:	a1 f5       	brne	.+104    	; 0x9a6 <mcal_gpio_pin_init+0x86>
			{
			case DIR_OUTPUT:
				set_bit(base + OFFSET_DIR, pin);
     93e:	e8 2f       	mov	r30, r24
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	21 81       	ldd	r18, Z+1	; 0x01
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	02 c0       	rjmp	.+4      	; 0x94e <mcal_gpio_pin_init+0x2e>
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	6a 95       	dec	r22
     950:	e2 f7       	brpl	.-8      	; 0x94a <mcal_gpio_pin_init+0x2a>
     952:	82 2b       	or	r24, r18
     954:	81 83       	std	Z+1, r24	; 0x01
/*                     Functions Implementation                          */
/*************************************************************************/

GPIO_STATE_ERROR_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
     956:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (dir)
			{
			case DIR_OUTPUT:
				set_bit(base + OFFSET_DIR, pin);
				break;
     958:	08 95       	ret

			case DIR_INPUT_PULLDOWN:
				clr_bit(base + OFFSET_DIR, pin);
     95a:	e8 2f       	mov	r30, r24
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	21 81       	ldd	r18, Z+1	; 0x01
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	02 c0       	rjmp	.+4      	; 0x96a <mcal_gpio_pin_init+0x4a>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	6a 95       	dec	r22
     96c:	e2 f7       	brpl	.-8      	; 0x966 <mcal_gpio_pin_init+0x46>
     96e:	80 95       	com	r24
     970:	82 23       	and	r24, r18
     972:	81 83       	std	Z+1, r24	; 0x01
/*                     Functions Implementation                          */
/*************************************************************************/

GPIO_STATE_ERROR_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
     974:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(base + OFFSET_DIR, pin);
				break;

			case DIR_INPUT_PULLDOWN:
				clr_bit(base + OFFSET_DIR, pin);
				break;
     976:	08 95       	ret

			case DIR_INPUT_PULLUP:
				clr_bit(base + OFFSET_DIR, pin);
     978:	e8 2f       	mov	r30, r24
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	21 81       	ldd	r18, Z+1	; 0x01
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	02 c0       	rjmp	.+4      	; 0x988 <mcal_gpio_pin_init+0x68>
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	6a 95       	dec	r22
     98a:	e2 f7       	brpl	.-8      	; 0x984 <mcal_gpio_pin_init+0x64>
     98c:	98 2f       	mov	r25, r24
     98e:	90 95       	com	r25
     990:	92 23       	and	r25, r18
     992:	91 83       	std	Z+1, r25	; 0x01
				set_bit(base + OFFSET_PORT, pin);
     994:	92 81       	ldd	r25, Z+2	; 0x02
     996:	89 2b       	or	r24, r25
     998:	82 83       	std	Z+2, r24	; 0x02
/*                     Functions Implementation                          */
/*************************************************************************/

GPIO_STATE_ERROR_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
     99a:	80 e0       	ldi	r24, 0x00	; 0
				break;

			case DIR_INPUT_PULLUP:
				clr_bit(base + OFFSET_DIR, pin);
				set_bit(base + OFFSET_PORT, pin);
				break;
     99c:	08 95       	ret
			error = GPIO_STATE_INVAILD_PIN;
		}
	}
	else
	{
		error = GPIO_STATE_INVALID_ADDR;
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	08 95       	ret
				break;
			}
		}
		else
		{
			error = GPIO_STATE_INVAILD_PIN;
     9a2:	83 e0       	ldi	r24, 0x03	; 3
     9a4:	08 95       	ret
				clr_bit(base + OFFSET_DIR, pin);
				set_bit(base + OFFSET_PORT, pin);
				break;

			default:
				error = GPIO_STATE_INVALID_DIR;
     9a6:	84 e0       	ldi	r24, 0x04	; 4
	else
	{
		error = GPIO_STATE_INVALID_ADDR;
	}
	return error;
}
     9a8:	08 95       	ret

000009aa <mcal_gpio_pin_write>:

GPIO_STATE_ERROR_t mcal_gpio_pin_write(u8_t base, u8_t pin, u8_t value)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
     9aa:	89 33       	cpi	r24, 0x39	; 57
     9ac:	31 f0       	breq	.+12     	; 0x9ba <mcal_gpio_pin_write+0x10>
     9ae:	86 33       	cpi	r24, 0x36	; 54
     9b0:	21 f0       	breq	.+8      	; 0x9ba <mcal_gpio_pin_write+0x10>
     9b2:	83 33       	cpi	r24, 0x33	; 51
     9b4:	11 f0       	breq	.+4      	; 0x9ba <mcal_gpio_pin_write+0x10>
     9b6:	80 33       	cpi	r24, 0x30	; 48
     9b8:	19 f5       	brne	.+70     	; 0xa00 <mcal_gpio_pin_write+0x56>
	{
		if (pin < ECU_PORT_PINS_NUMBER)
     9ba:	68 30       	cpi	r22, 0x08	; 8
     9bc:	18 f5       	brcc	.+70     	; 0xa04 <mcal_gpio_pin_write+0x5a>
		{
			switch (value)
     9be:	44 23       	and	r20, r20
     9c0:	81 f0       	breq	.+32     	; 0x9e2 <mcal_gpio_pin_write+0x38>
     9c2:	41 30       	cpi	r20, 0x01	; 1
     9c4:	09 f5       	brne	.+66     	; 0xa08 <mcal_gpio_pin_write+0x5e>
			{
			case HIGH:
				set_bit(base + OFFSET_PORT, pin);
     9c6:	e8 2f       	mov	r30, r24
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	22 81       	ldd	r18, Z+2	; 0x02
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <mcal_gpio_pin_write+0x2c>
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	6a 95       	dec	r22
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <mcal_gpio_pin_write+0x28>
     9da:	82 2b       	or	r24, r18
     9dc:	82 83       	std	Z+2, r24	; 0x02
	return error;
}

GPIO_STATE_ERROR_t mcal_gpio_pin_write(u8_t base, u8_t pin, u8_t value)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
     9de:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (value)
			{
			case HIGH:
				set_bit(base + OFFSET_PORT, pin);
				break;
     9e0:	08 95       	ret

			case LOW:
				clr_bit(base + OFFSET_PORT, pin);
     9e2:	e8 2f       	mov	r30, r24
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	22 81       	ldd	r18, Z+2	; 0x02
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <mcal_gpio_pin_write+0x48>
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	6a 95       	dec	r22
     9f4:	e2 f7       	brpl	.-8      	; 0x9ee <mcal_gpio_pin_write+0x44>
     9f6:	80 95       	com	r24
     9f8:	82 23       	and	r24, r18
     9fa:	82 83       	std	Z+2, r24	; 0x02
	return error;
}

GPIO_STATE_ERROR_t mcal_gpio_pin_write(u8_t base, u8_t pin, u8_t value)
{
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
				set_bit(base + OFFSET_PORT, pin);
				break;

			case LOW:
				clr_bit(base + OFFSET_PORT, pin);
				break;
     9fe:	08 95       	ret
			error = GPIO_STATE_INVAILD_PIN;
		}
	}
	else
	{
		error = GPIO_STATE_INVALID_ADDR;
     a00:	82 e0       	ldi	r24, 0x02	; 2
     a02:	08 95       	ret
				break;
			}
		}
		else
		{
			error = GPIO_STATE_INVAILD_PIN;
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	08 95       	ret
			case LOW:
				clr_bit(base + OFFSET_PORT, pin);
				break;

			default:
				error = GPIO_STATE_INVALID_VALUE;
     a08:	85 e0       	ldi	r24, 0x05	; 5
	{
		error = GPIO_STATE_INVALID_ADDR;
	}

	return error;
}
     a0a:	08 95       	ret

00000a0c <mcal_port_init>:

port_error_t mcal_port_init(u8_t base, portState dir , u8_t mask)
{
	port_error_t error = PORT_STATE_SUCCESS;

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
     a0c:	89 33       	cpi	r24, 0x39	; 57
     a0e:	31 f0       	breq	.+12     	; 0xa1c <mcal_port_init+0x10>
     a10:	86 33       	cpi	r24, 0x36	; 54
     a12:	21 f0       	breq	.+8      	; 0xa1c <mcal_port_init+0x10>
     a14:	83 33       	cpi	r24, 0x33	; 51
     a16:	11 f0       	breq	.+4      	; 0xa1c <mcal_port_init+0x10>
     a18:	80 33       	cpi	r24, 0x30	; 48
     a1a:	19 f5       	brne	.+70     	; 0xa62 <mcal_port_init+0x56>
	{
		switch (dir)
     a1c:	61 30       	cpi	r22, 0x01	; 1
     a1e:	69 f0       	breq	.+26     	; 0xa3a <mcal_port_init+0x2e>
     a20:	b0 f0       	brcs	.+44     	; 0xa4e <mcal_port_init+0x42>
     a22:	62 30       	cpi	r22, 0x02	; 2
     a24:	01 f5       	brne	.+64     	; 0xa66 <mcal_port_init+0x5a>
		{
		case DIR_PORT_OUTPUT:

			reg_mask_write(base + OFFSET_DIR, mask ,PORT_OUTPUT_DIR);
     a26:	e8 2f       	mov	r30, r24
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	81 81       	ldd	r24, Z+1	; 0x01
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	81 83       	std	Z+1, r24	; 0x01
			reg_mask_write(base + OFFSET_PORT, mask ,PORT_OFF);
     a30:	82 81       	ldd	r24, Z+2	; 0x02
     a32:	48 23       	and	r20, r24
     a34:	42 83       	std	Z+2, r20	; 0x02
/*                     Functions Implementation                          */
/*************************************************************************/

port_error_t mcal_port_init(u8_t base, portState dir , u8_t mask)
{
	port_error_t error = PORT_STATE_SUCCESS;
     a36:	80 e0       	ldi	r24, 0x00	; 0
		{
		case DIR_PORT_OUTPUT:

			reg_mask_write(base + OFFSET_DIR, mask ,PORT_OUTPUT_DIR);
			reg_mask_write(base + OFFSET_PORT, mask ,PORT_OFF);
			break;
     a38:	08 95       	ret

		case DIR_PORT_INPUT_PULLDOWN:
			reg_mask_write(base + OFFSET_DIR, mask ,PORT_INPUT_DIR);
     a3a:	e8 2f       	mov	r30, r24
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	81 81       	ldd	r24, Z+1	; 0x01
     a40:	84 23       	and	r24, r20
     a42:	81 83       	std	Z+1, r24	; 0x01
			reg_mask_write(base + OFFSET_PORT, mask ,PORT_OFF);
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	48 23       	and	r20, r24
     a48:	42 83       	std	Z+2, r20	; 0x02
/*                     Functions Implementation                          */
/*************************************************************************/

port_error_t mcal_port_init(u8_t base, portState dir , u8_t mask)
{
	port_error_t error = PORT_STATE_SUCCESS;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
			break;

		case DIR_PORT_INPUT_PULLDOWN:
			reg_mask_write(base + OFFSET_DIR, mask ,PORT_INPUT_DIR);
			reg_mask_write(base + OFFSET_PORT, mask ,PORT_OFF);
			break;
     a4c:	08 95       	ret

		case DIR_PORT_INPUT_PULLUP:
			reg_mask_write(base + OFFSET_DIR, mask ,PORT_INPUT_DIR);
     a4e:	e8 2f       	mov	r30, r24
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	81 81       	ldd	r24, Z+1	; 0x01
     a54:	48 23       	and	r20, r24
     a56:	41 83       	std	Z+1, r20	; 0x01
			reg_mask_write(base + OFFSET_PORT, mask ,PORT_ON);
     a58:	82 81       	ldd	r24, Z+2	; 0x02
     a5a:	8f ef       	ldi	r24, 0xFF	; 255
     a5c:	82 83       	std	Z+2, r24	; 0x02
/*                     Functions Implementation                          */
/*************************************************************************/

port_error_t mcal_port_init(u8_t base, portState dir , u8_t mask)
{
	port_error_t error = PORT_STATE_SUCCESS;
     a5e:	80 e0       	ldi	r24, 0x00	; 0
			break;

		case DIR_PORT_INPUT_PULLUP:
			reg_mask_write(base + OFFSET_DIR, mask ,PORT_INPUT_DIR);
			reg_mask_write(base + OFFSET_PORT, mask ,PORT_ON);
			break;
     a60:	08 95       	ret
			break;
		}
	}
	else
	{
		error = PORT_STATE_INVALID_ADDR;
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	08 95       	ret
			reg_mask_write(base + OFFSET_DIR, mask ,PORT_INPUT_DIR);
			reg_mask_write(base + OFFSET_PORT, mask ,PORT_ON);
			break;

		default:
			error = PORT_STATE_INVALID_DIR;
     a66:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		error = PORT_STATE_INVALID_ADDR;
	}
	return error;
}
     a68:	08 95       	ret

00000a6a <mcal_port_write>:

port_error_t mcal_port_write(u8_t base, u8_t value , u8_t mask)
{
	port_error_t error = PORT_STATE_SUCCESS;

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
     a6a:	89 33       	cpi	r24, 0x39	; 57
     a6c:	31 f0       	breq	.+12     	; 0xa7a <mcal_port_write+0x10>
     a6e:	86 33       	cpi	r24, 0x36	; 54
     a70:	21 f0       	breq	.+8      	; 0xa7a <mcal_port_write+0x10>
     a72:	83 33       	cpi	r24, 0x33	; 51
     a74:	11 f0       	breq	.+4      	; 0xa7a <mcal_port_write+0x10>
     a76:	80 33       	cpi	r24, 0x30	; 48
     a78:	41 f4       	brne	.+16     	; 0xa8a <mcal_port_write+0x20>
	{
		reg_mask_write(base + OFFSET_PORT, mask ,value );
     a7a:	e8 2f       	mov	r30, r24
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	82 81       	ldd	r24, Z+2	; 0x02
     a80:	48 23       	and	r20, r24
     a82:	64 2b       	or	r22, r20
     a84:	62 83       	std	Z+2, r22	; 0x02
}


port_error_t mcal_port_write(u8_t base, u8_t value , u8_t mask)
{
	port_error_t error = PORT_STATE_SUCCESS;
     a86:	80 e0       	ldi	r24, 0x00	; 0

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
	{
		reg_mask_write(base + OFFSET_PORT, mask ,value );
     a88:	08 95       	ret
	}
	else
	{
		error = PORT_STATE_INVALID_ADDR;
     a8a:	82 e0       	ldi	r24, 0x02	; 2
	}

	return error;
}
     a8c:	08 95       	ret

00000a8e <getPreScaler>:
/*                     Static Functions Implementation                   */
/*************************************************************************/
static double getPreScaler(timer_preScaler_t preScaller)
{
	double value = 0;
	switch(preScaller)
     a8e:	83 30       	cpi	r24, 0x03	; 3
     a90:	81 f0       	breq	.+32     	; 0xab2 <getPreScaler+0x24>
     a92:	28 f4       	brcc	.+10     	; 0xa9e <getPreScaler+0x10>
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	41 f0       	breq	.+16     	; 0xaa8 <getPreScaler+0x1a>
     a98:	82 30       	cpi	r24, 0x02	; 2
     a9a:	f1 f0       	breq	.+60     	; 0xad8 <getPreScaler+0x4a>
     a9c:	19 c0       	rjmp	.+50     	; 0xad0 <getPreScaler+0x42>
     a9e:	84 30       	cpi	r24, 0x04	; 4
     aa0:	69 f0       	breq	.+26     	; 0xabc <getPreScaler+0x2e>
     aa2:	85 30       	cpi	r24, 0x05	; 5
     aa4:	81 f0       	breq	.+32     	; 0xac6 <getPreScaler+0x38>
     aa6:	14 c0       	rjmp	.+40     	; 0xad0 <getPreScaler+0x42>
	{
	case F_CPU_CLOCK :
	{
		value = 1;
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	80 e8       	ldi	r24, 0x80	; 128
     aae:	9f e3       	ldi	r25, 0x3F	; 63
     ab0:	08 95       	ret
		value = 8;
		break;
	}
	case F_CPU_64 :
	{
		value = 64;
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	80 e8       	ldi	r24, 0x80	; 128
     ab8:	92 e4       	ldi	r25, 0x42	; 66
		break;
     aba:	08 95       	ret
	}
	case F_CPU_256 :
	{
		value = 256;
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	80 e8       	ldi	r24, 0x80	; 128
     ac2:	93 e4       	ldi	r25, 0x43	; 67
		break;
     ac4:	08 95       	ret
	}
	case F_CPU_1024 :
	{
		value = 1024;
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 e8       	ldi	r24, 0x80	; 128
     acc:	94 e4       	ldi	r25, 0x44	; 68
		break;
     ace:	08 95       	ret
	}
	default:
	{
		value = 0 ;
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	cb 01       	movw	r24, r22
     ad6:	08 95       	ret
		value = 1;
		break;
	}
	case F_CPU_8 :
	{
		value = 8;
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	91 e4       	ldi	r25, 0x41	; 65
		value = 0 ;
	}
	}

	return value;
}
     ae0:	08 95       	ret

00000ae2 <mcal_timer_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
     ae2:	4f 92       	push	r4
     ae4:	5f 92       	push	r5
     ae6:	6f 92       	push	r6
     ae8:	7f 92       	push	r7
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	8c 01       	movw	r16, r24
	timer_error_t error = TIMER_STATE_SUCCESS;

	setGlobalInterrupt;
     afa:	8f b7       	in	r24, 0x3f	; 63
     afc:	80 68       	ori	r24, 0x80	; 128
     afe:	8f bf       	out	0x3f, r24	; 63

	double preScallerValue = (double)getPreScaler(timer->preScaler);
     b00:	f8 01       	movw	r30, r16
     b02:	c0 81       	ld	r28, Z
     b04:	8c 2f       	mov	r24, r28
     b06:	0e 94 47 05 	call	0xa8e	; 0xa8e <getPreScaler>
     b0a:	6b 01       	movw	r12, r22
     b0c:	7c 01       	movw	r14, r24
	double resolution = (double)preScallerValue / (double)F_CPU;
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	34 e2       	ldi	r19, 0x24	; 36
     b12:	44 ef       	ldi	r20, 0xF4	; 244
     b14:	5a e4       	ldi	r21, 0x4A	; 74
     b16:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divsf3>
	double registerMaxTime = 0;

	switch (timer->timer_number)
     b1a:	f8 01       	movw	r30, r16
     b1c:	21 81       	ldd	r18, Z+1	; 0x01
     b1e:	23 30       	cpi	r18, 0x03	; 3
     b20:	18 f4       	brcc	.+6      	; 0xb28 <mcal_timer_init+0x46>
     b22:	21 30       	cpi	r18, 0x01	; 1
     b24:	28 f0       	brcs	.+10     	; 0xb30 <mcal_timer_init+0x4e>
     b26:	50 c0       	rjmp	.+160    	; 0xbc8 <mcal_timer_init+0xe6>
     b28:	23 30       	cpi	r18, 0x03	; 3
     b2a:	09 f4       	brne	.+2      	; 0xb2e <mcal_timer_init+0x4c>
     b2c:	9c c0       	rjmp	.+312    	; 0xc66 <mcal_timer_init+0x184>
     b2e:	e5 c0       	rjmp	.+458    	; 0xcfa <mcal_timer_init+0x218>
	{
	case TIMER0:
	{
		reg_mask_write(TCCR0,0xF8,timer->preScaler);
     b30:	23 b7       	in	r18, 0x33	; 51
     b32:	28 7f       	andi	r18, 0xF8	; 248
     b34:	c2 2b       	or	r28, r18
     b36:	c3 bf       	out	0x33, r28	; 51

		registerMaxTime = resolution * (double)256;
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	40 e8       	ldi	r20, 0x80	; 128
     b3e:	53 e4       	ldi	r21, 0x43	; 67
     b40:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>

		if (TIMER_NORMAL_MODE == timer->mode)
     b44:	f8 01       	movw	r30, r16
     b46:	22 81       	ldd	r18, Z+2	; 0x02
     b48:	21 11       	cpse	r18, r1
     b4a:	17 c0       	rjmp	.+46     	; 0xb7a <mcal_timer_init+0x98>
		{
			// Set Timer initial value
			register(TCNT0) = 0;
     b4c:	12 be       	out	0x32, r1	; 50
			/* configure the timer
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 */
			set_bit(TCCR0, FOC0);
     b4e:	23 b7       	in	r18, 0x33	; 51
     b50:	20 68       	ori	r18, 0x80	; 128
     b52:	23 bf       	out	0x33, r18	; 51

			/* attach overflow value to timer so we can use it in callback */
			timer->overflow = timer->tick_seconds / (double)registerMaxTime;
     b54:	c3 80       	ldd	r12, Z+3	; 0x03
     b56:	d4 80       	ldd	r13, Z+4	; 0x04
     b58:	e5 80       	ldd	r14, Z+5	; 0x05
     b5a:	f6 80       	ldd	r15, Z+6	; 0x06
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	c7 01       	movw	r24, r14
     b62:	b6 01       	movw	r22, r12
     b64:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divsf3>
     b68:	f8 01       	movw	r30, r16
     b6a:	67 83       	std	Z+7, r22	; 0x07
     b6c:	70 87       	std	Z+8, r23	; 0x08
     b6e:	81 87       	std	Z+9, r24	; 0x09
     b70:	92 87       	std	Z+10, r25	; 0x0a
			set_timer_overflow(timer->overflow);
     b72:	0e 94 3b 07 	call	0xe76	; 0xe76 <set_timer_overflow>
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	cd c0       	rjmp	.+410    	; 0xd14 <mcal_timer_init+0x232>
			/* attach overflow value to timer so we can use it in callback */
			timer->overflow = timer->tick_seconds / (double)registerMaxTime;
			set_timer_overflow(timer->overflow);

		}
		else if ( TIMER_CTC_MODE == timer->mode)
     b7a:	21 30       	cpi	r18, 0x01	; 1
     b7c:	09 f0       	breq	.+2      	; 0xb80 <mcal_timer_init+0x9e>
     b7e:	bf c0       	rjmp	.+382    	; 0xcfe <mcal_timer_init+0x21c>
		{
			// Set Timer initial value
			register(TCNT0) = 0;
     b80:	12 be       	out	0x32, r1	; 50
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 so COM00=0 & COM01=0
			 */

			set_bit(TCCR0, FOC0);
     b82:	23 b7       	in	r18, 0x33	; 51
     b84:	20 68       	ori	r18, 0x80	; 128
     b86:	23 bf       	out	0x33, r18	; 51
			set_bit(TCCR0, WGM01);
     b88:	23 b7       	in	r18, 0x33	; 51
     b8a:	28 60       	ori	r18, 0x08	; 8
     b8c:	23 bf       	out	0x33, r18	; 51

			/* if the time we need to wait can be used with 8 bit timer in CTC mode
			 * meaning that if the value of seconds to wait converted to digital number
			 * less that 256 with the given pre-scaller */
			if (timer->tick_seconds < registerMaxTime)
     b8e:	f8 01       	movw	r30, r16
     b90:	43 80       	ldd	r4, Z+3	; 0x03
     b92:	54 80       	ldd	r5, Z+4	; 0x04
     b94:	65 80       	ldd	r6, Z+5	; 0x05
     b96:	76 80       	ldd	r7, Z+6	; 0x06
     b98:	a3 01       	movw	r20, r6
     b9a:	92 01       	movw	r18, r4
     b9c:	0e 94 14 0c 	call	0x1828	; 0x1828 <__gesf2>
     ba0:	18 16       	cp	r1, r24
     ba2:	0c f0       	brlt	.+2      	; 0xba6 <mcal_timer_init+0xc4>
     ba4:	ae c0       	rjmp	.+348    	; 0xd02 <mcal_timer_init+0x220>
			{
				// Set Compare Value
				register(OCR0) = ((double)timer->tick_seconds * (double)F_CPU) / (double)preScallerValue;
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	34 e2       	ldi	r19, 0x24	; 36
     baa:	44 ef       	ldi	r20, 0xF4	; 244
     bac:	5a e4       	ldi	r21, 0x4A	; 74
     bae:	c3 01       	movw	r24, r6
     bb0:	b2 01       	movw	r22, r4
     bb2:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>
     bb6:	a7 01       	movw	r20, r14
     bb8:	96 01       	movw	r18, r12
     bba:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divsf3>
     bbe:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixunssfsi>
     bc2:	6c bf       	out	0x3c, r22	; 60
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	a6 c0       	rjmp	.+332    	; 0xd14 <mcal_timer_init+0x232>
		break;
	}
	case TIMER1_CHANNEL_1:
	case TIMER1_CHANNEL_2:
	{
		reg_mask_write(TCCR1B,0xF8,timer->preScaler);
     bc8:	2e b5       	in	r18, 0x2e	; 46
     bca:	28 7f       	andi	r18, 0xF8	; 248
     bcc:	c2 2b       	or	r28, r18
     bce:	ce bd       	out	0x2e, r28	; 46

		registerMaxTime = resolution * (double)65536;
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e8       	ldi	r20, 0x80	; 128
     bd6:	57 e4       	ldi	r21, 0x47	; 71
     bd8:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>

		if (TIMER_NORMAL_MODE == timer->mode)
     bdc:	f8 01       	movw	r30, r16
     bde:	22 81       	ldd	r18, Z+2	; 0x02
     be0:	21 11       	cpse	r18, r1
     be2:	1a c0       	rjmp	.+52     	; 0xc18 <mcal_timer_init+0x136>
		{
			// Set Timer initial value to 0
			register(TCNT1) = 0;
     be4:	1c bc       	out	0x2c, r1	; 44
			 *  Normal Mode WGM13=0 & WGM12=0 & WGM11=0 & WGM10=0
			 *  Normal Mode FOC1A=1 & FOC1B=1
			 *  Normal Mode COM1A1=0 & COM1A0=0
			 *  Normal Mode COM1B1=0 & COM1B0=0
			 */
			set_bit(TCCR1A, FOC1A);
     be6:	2f b5       	in	r18, 0x2f	; 47
     be8:	28 60       	ori	r18, 0x08	; 8
     bea:	2f bd       	out	0x2f, r18	; 47
			set_bit(TCCR1A, FOC1B);
     bec:	2f b5       	in	r18, 0x2f	; 47
     bee:	24 60       	ori	r18, 0x04	; 4
     bf0:	2f bd       	out	0x2f, r18	; 47

			/* attach overflow value to timer so we can use it in callback */
			timer->overflow = timer->tick_seconds / registerMaxTime;
     bf2:	c3 80       	ldd	r12, Z+3	; 0x03
     bf4:	d4 80       	ldd	r13, Z+4	; 0x04
     bf6:	e5 80       	ldd	r14, Z+5	; 0x05
     bf8:	f6 80       	ldd	r15, Z+6	; 0x06
     bfa:	9b 01       	movw	r18, r22
     bfc:	ac 01       	movw	r20, r24
     bfe:	c7 01       	movw	r24, r14
     c00:	b6 01       	movw	r22, r12
     c02:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divsf3>
     c06:	f8 01       	movw	r30, r16
     c08:	67 83       	std	Z+7, r22	; 0x07
     c0a:	70 87       	std	Z+8, r23	; 0x08
     c0c:	81 87       	std	Z+9, r24	; 0x09
     c0e:	92 87       	std	Z+10, r25	; 0x0a
			set_timer_overflow(timer->overflow);
     c10:	0e 94 3b 07 	call	0xe76	; 0xe76 <set_timer_overflow>
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	7e c0       	rjmp	.+252    	; 0xd14 <mcal_timer_init+0x232>

			/* attach overflow value to timer so we can use it in callback */
			timer->overflow = timer->tick_seconds / registerMaxTime;
			set_timer_overflow(timer->overflow);
		}
		else if ( TIMER_CTC_MODE == timer->mode)
     c18:	21 30       	cpi	r18, 0x01	; 1
     c1a:	09 f0       	breq	.+2      	; 0xc1e <mcal_timer_init+0x13c>
     c1c:	74 c0       	rjmp	.+232    	; 0xd06 <mcal_timer_init+0x224>
		{
			// Set Timer initial value
			register(TCNT1)= 0;
     c1e:	1c bc       	out	0x2c, r1	; 44

			/* Configure timer0 control register
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM13=0 &WGM12=1 & WGM11=0 & WGM10=0
			 */
			set_bit(TCCR1A, FOC1A);
     c20:	2f b5       	in	r18, 0x2f	; 47
     c22:	28 60       	ori	r18, 0x08	; 8
     c24:	2f bd       	out	0x2f, r18	; 47
			set_bit(TCCR1A, WGM12);
     c26:	2f b5       	in	r18, 0x2f	; 47
     c28:	28 60       	ori	r18, 0x08	; 8
     c2a:	2f bd       	out	0x2f, r18	; 47

			/* if the time we need to wait can be used with 8 bit timer in CTC mode
			 * meaning that if the value of seconds to wait converted to digital number
			 * less that 256 with the given pre-scaller */
			if (timer->tick_seconds < registerMaxTime)
     c2c:	f8 01       	movw	r30, r16
     c2e:	43 80       	ldd	r4, Z+3	; 0x03
     c30:	54 80       	ldd	r5, Z+4	; 0x04
     c32:	65 80       	ldd	r6, Z+5	; 0x05
     c34:	76 80       	ldd	r7, Z+6	; 0x06
     c36:	a3 01       	movw	r20, r6
     c38:	92 01       	movw	r18, r4
     c3a:	0e 94 14 0c 	call	0x1828	; 0x1828 <__gesf2>
     c3e:	18 16       	cp	r1, r24
     c40:	0c f0       	brlt	.+2      	; 0xc44 <mcal_timer_init+0x162>
     c42:	63 c0       	rjmp	.+198    	; 0xd0a <mcal_timer_init+0x228>
			{
				// Set Compare Value
				register(OCR1A) = ((double)timer->tick_seconds * (double)F_CPU) / (double)preScallerValue;
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	34 e2       	ldi	r19, 0x24	; 36
     c48:	44 ef       	ldi	r20, 0xF4	; 244
     c4a:	5a e4       	ldi	r21, 0x4A	; 74
     c4c:	c3 01       	movw	r24, r6
     c4e:	b2 01       	movw	r22, r4
     c50:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>
     c54:	a7 01       	movw	r20, r14
     c56:	96 01       	movw	r18, r12
     c58:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divsf3>
     c5c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixunssfsi>
     c60:	6a bd       	out	0x2a, r22	; 42
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	57 c0       	rjmp	.+174    	; 0xd14 <mcal_timer_init+0x232>
		}
		break;
	}
	case TIMER2:
	{
		reg_mask_write(TCCR2,0xF8,timer->preScaler);
     c66:	25 b5       	in	r18, 0x25	; 37
     c68:	28 7f       	andi	r18, 0xF8	; 248
     c6a:	c2 2b       	or	r28, r18
     c6c:	c5 bd       	out	0x25, r28	; 37

		registerMaxTime = resolution * (double)256;
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	40 e8       	ldi	r20, 0x80	; 128
     c74:	53 e4       	ldi	r21, 0x43	; 67
     c76:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>

		if(TIMER_NORMAL_MODE == timer->mode)
     c7a:	f8 01       	movw	r30, r16
     c7c:	22 81       	ldd	r18, Z+2	; 0x02
     c7e:	21 11       	cpse	r18, r1
     c80:	17 c0       	rjmp	.+46     	; 0xcb0 <mcal_timer_init+0x1ce>
		{
			// Set Timer initial value
			register(TCNT2) = 0;
     c82:	14 bc       	out	0x24, r1	; 36
			/* configure the timer
			 * 1. Non PWM mode FOC2=1
			 * 2. Normal Mode WGM21=0 & WGM20=0
			 * 3. Normal Mode COM20=0 & COM21=0
			 */
			set_bit(TCCR2, FOC2);
     c84:	25 b5       	in	r18, 0x25	; 37
     c86:	20 68       	ori	r18, 0x80	; 128
     c88:	25 bd       	out	0x25, r18	; 37

			/* attach overflow value to timer so we can use it in callback */
			timer->overflow = timer->tick_seconds / registerMaxTime;
     c8a:	c3 80       	ldd	r12, Z+3	; 0x03
     c8c:	d4 80       	ldd	r13, Z+4	; 0x04
     c8e:	e5 80       	ldd	r14, Z+5	; 0x05
     c90:	f6 80       	ldd	r15, Z+6	; 0x06
     c92:	9b 01       	movw	r18, r22
     c94:	ac 01       	movw	r20, r24
     c96:	c7 01       	movw	r24, r14
     c98:	b6 01       	movw	r22, r12
     c9a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divsf3>
     c9e:	f8 01       	movw	r30, r16
     ca0:	67 83       	std	Z+7, r22	; 0x07
     ca2:	70 87       	std	Z+8, r23	; 0x08
     ca4:	81 87       	std	Z+9, r24	; 0x09
     ca6:	92 87       	std	Z+10, r25	; 0x0a
			set_timer_overflow(timer->overflow);
     ca8:	0e 94 3b 07 	call	0xe76	; 0xe76 <set_timer_overflow>
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	32 c0       	rjmp	.+100    	; 0xd14 <mcal_timer_init+0x232>
			/* attach overflow value to timer so we can use it in callback */
			timer->overflow = timer->tick_seconds / registerMaxTime;
			set_timer_overflow(timer->overflow);

		}
		else if ( TIMER_CTC_MODE == timer->mode)
     cb0:	21 30       	cpi	r18, 0x01	; 1
     cb2:	69 f5       	brne	.+90     	; 0xd0e <mcal_timer_init+0x22c>
		{
			// Set Timer initial value
			register(TCNT2) = 0;
     cb4:	14 bc       	out	0x24, r1	; 36
			/* Configure timer0 control register
			 * 1. Non PWM mode FOC2=1
			 * 2. CTC Mode WGM21=1 & WGM20=0
			 * 3. No need for OC0 so COM20=0 & COM21=0
			 */
			set_bit(TCCR2, FOC2);
     cb6:	25 b5       	in	r18, 0x25	; 37
     cb8:	20 68       	ori	r18, 0x80	; 128
     cba:	25 bd       	out	0x25, r18	; 37
			set_bit(TCCR2, WGM21);
     cbc:	25 b5       	in	r18, 0x25	; 37
     cbe:	28 60       	ori	r18, 0x08	; 8
     cc0:	25 bd       	out	0x25, r18	; 37

			/* if the time we need to wait can be used with 8 bit timer in CTC mode
			 * meaning that if the value of seconds to wait converted to digital number
			 * less that 256 with the given pre-scaller */
			if (timer->tick_seconds < registerMaxTime)
     cc2:	f8 01       	movw	r30, r16
     cc4:	43 80       	ldd	r4, Z+3	; 0x03
     cc6:	54 80       	ldd	r5, Z+4	; 0x04
     cc8:	65 80       	ldd	r6, Z+5	; 0x05
     cca:	76 80       	ldd	r7, Z+6	; 0x06
     ccc:	a3 01       	movw	r20, r6
     cce:	92 01       	movw	r18, r4
     cd0:	0e 94 14 0c 	call	0x1828	; 0x1828 <__gesf2>
     cd4:	18 16       	cp	r1, r24
     cd6:	ec f4       	brge	.+58     	; 0xd12 <mcal_timer_init+0x230>
			{
				// Set Compare Value
				register(OCR2) = ((double)timer->tick_seconds * (double)F_CPU) / (double)preScallerValue;
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	34 e2       	ldi	r19, 0x24	; 36
     cdc:	44 ef       	ldi	r20, 0xF4	; 244
     cde:	5a e4       	ldi	r21, 0x4A	; 74
     ce0:	c3 01       	movw	r24, r6
     ce2:	b2 01       	movw	r22, r4
     ce4:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>
     ce8:	a7 01       	movw	r20, r14
     cea:	96 01       	movw	r18, r12
     cec:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divsf3>
     cf0:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixunssfsi>
     cf4:	63 bd       	out	0x23, r22	; 35
/*                     Functions Implementation                          */
/*************************************************************************/

timer_error_t mcal_timer_init(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	0d c0       	rjmp	.+26     	; 0xd14 <mcal_timer_init+0x232>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	0b c0       	rjmp	.+22     	; 0xd14 <mcal_timer_init+0x232>
				error = TIMER_STATE_INVALID_ARGUMENT;
			}
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     cfe:	83 e0       	ldi	r24, 0x03	; 3
     d00:	09 c0       	rjmp	.+18     	; 0xd14 <mcal_timer_init+0x232>
				// Set Compare Value
				register(OCR0) = ((double)timer->tick_seconds * (double)F_CPU) / (double)preScallerValue;
			}
			else
			{
				error = TIMER_STATE_INVALID_ARGUMENT;
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	07 c0       	rjmp	.+14     	; 0xd14 <mcal_timer_init+0x232>
				error = TIMER_STATE_INVALID_ARGUMENT;
			}
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	05 c0       	rjmp	.+10     	; 0xd14 <mcal_timer_init+0x232>
				// Set Compare Value
				register(OCR1A) = ((double)timer->tick_seconds * (double)F_CPU) / (double)preScallerValue;
			}
			else
			{
				error = TIMER_STATE_INVALID_ARGUMENT;
     d0a:	84 e0       	ldi	r24, 0x04	; 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <mcal_timer_init+0x232>
			}

		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <mcal_timer_init+0x232>
				// Set Compare Value
				register(OCR2) = ((double)timer->tick_seconds * (double)F_CPU) / (double)preScallerValue;
			}
			else
			{
				error = TIMER_STATE_INVALID_ARGUMENT;
     d12:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
	}
	}
	return error;
}
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	7f 90       	pop	r7
     d24:	6f 90       	pop	r6
     d26:	5f 90       	pop	r5
     d28:	4f 90       	pop	r4
     d2a:	08 95       	ret

00000d2c <mcal_timer_start>:


timer_error_t mcal_timer_start(timer_config_t* timer)
{
     d2c:	fc 01       	movw	r30, r24
	timer_error_t error = TIMER_STATE_SUCCESS;

	switch (timer->timer_number)
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	91 30       	cpi	r25, 0x01	; 1
     d32:	a9 f0       	breq	.+42     	; 0xd5e <mcal_timer_start+0x32>
     d34:	28 f0       	brcs	.+10     	; 0xd40 <mcal_timer_start+0x14>
     d36:	92 30       	cpi	r25, 0x02	; 2
     d38:	09 f1       	breq	.+66     	; 0xd7c <mcal_timer_start+0x50>
     d3a:	93 30       	cpi	r25, 0x03	; 3
     d3c:	71 f1       	breq	.+92     	; 0xd9a <mcal_timer_start+0x6e>
     d3e:	3c c0       	rjmp	.+120    	; 0xdb8 <mcal_timer_start+0x8c>
	{
	case TIMER0:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	81 11       	cpse	r24, r1
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <mcal_timer_start+0x24>
		{
			// Enable Timer0 Overflow Interrupt
			set_bit(TIMSK,TOIE0);
     d46:	89 b7       	in	r24, 0x39	; 57
     d48:	81 60       	ori	r24, 0x01	; 1
     d4a:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer0 Overflow Interrupt
			set_bit(TIMSK,TOIE0);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	a1 f5       	brne	.+104    	; 0xdbc <mcal_timer_start+0x90>
		{
			// Enable Timer0 Compare Interrupt
			set_bit(TIMSK, OCIE0);
     d54:	89 b7       	in	r24, 0x39	; 57
     d56:	82 60       	ori	r24, 0x02	; 2
     d58:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	08 95       	ret
		}
		break;
	}
	case TIMER1_CHANNEL_1:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	81 11       	cpse	r24, r1
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <mcal_timer_start+0x42>
		{
			// Enable Timer1 channel 1 Overflow Interrupt
			set_bit(TIMSK,TOIE1);
     d64:	89 b7       	in	r24, 0x39	; 57
     d66:	84 60       	ori	r24, 0x04	; 4
     d68:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer1 channel 1 Overflow Interrupt
			set_bit(TIMSK,TOIE1);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	39 f5       	brne	.+78     	; 0xdc0 <mcal_timer_start+0x94>
		{
			// Enable Timer1 channel 1 Compare Interrupt
			set_bit(TIMSK, OCIE1A);
     d72:	89 b7       	in	r24, 0x39	; 57
     d74:	80 61       	ori	r24, 0x10	; 16
     d76:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	08 95       	ret
		}
		break;
	}
	case TIMER1_CHANNEL_2:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	81 11       	cpse	r24, r1
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <mcal_timer_start+0x60>
		{
			// Enable Timer1 channel 2 Overflow Interrupt
			set_bit(TIMSK,TOIE2);
     d82:	89 b7       	in	r24, 0x39	; 57
     d84:	80 64       	ori	r24, 0x40	; 64
     d86:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer1 channel 2 Overflow Interrupt
			set_bit(TIMSK,TOIE2);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	d1 f4       	brne	.+52     	; 0xdc4 <mcal_timer_start+0x98>
		{
			// Enable Timer1 channel 2 Compare Interrupt
			set_bit(TIMSK, OCIE1B);
     d90:	89 b7       	in	r24, 0x39	; 57
     d92:	88 60       	ori	r24, 0x08	; 8
     d94:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	08 95       	ret
		}
		break;
	}
	case TIMER2:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	81 11       	cpse	r24, r1
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <mcal_timer_start+0x7e>
		{

			// Enable Timer2 Overflow Interrupt
			set_bit(TIMSK,TOIE2);
     da0:	89 b7       	in	r24, 0x39	; 57
     da2:	80 64       	ori	r24, 0x40	; 64
     da4:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	08 95       	ret
		{

			// Enable Timer2 Overflow Interrupt
			set_bit(TIMSK,TOIE2);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	69 f4       	brne	.+26     	; 0xdc8 <mcal_timer_start+0x9c>
		{
			// Enable Timer2 Compare Interrupt
			set_bit(TIMSK, OCIE2);
     dae:	89 b7       	in	r24, 0x39	; 57
     db0:	80 68       	ori	r24, 0x80	; 128
     db2:	89 bf       	out	0x39, r24	; 57
}


timer_error_t mcal_timer_start(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	08 95       	ret
		break;
	}

	default :
	{
		error = TIMER_STATE_INVALID_TIMER;
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	08 95       	ret
			// Enable Timer0 Compare Interrupt
			set_bit(TIMSK, OCIE0);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	08 95       	ret
			// Enable Timer1 channel 1 Compare Interrupt
			set_bit(TIMSK, OCIE1A);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	08 95       	ret
			// Enable Timer1 channel 2 Compare Interrupt
			set_bit(TIMSK, OCIE1B);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	08 95       	ret
			// Enable Timer2 Compare Interrupt
			set_bit(TIMSK, OCIE2);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     dc8:	83 e0       	ldi	r24, 0x03	; 3
		break;
	}
	}

	return error;
}
     dca:	08 95       	ret

00000dcc <mcal_timer_stop>:

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
     dcc:	fc 01       	movw	r30, r24
	timer_error_t error = TIMER_STATE_SUCCESS;

	switch (timer->timer_number)
     dce:	91 81       	ldd	r25, Z+1	; 0x01
     dd0:	91 30       	cpi	r25, 0x01	; 1
     dd2:	a9 f0       	breq	.+42     	; 0xdfe <mcal_timer_stop+0x32>
     dd4:	28 f0       	brcs	.+10     	; 0xde0 <mcal_timer_stop+0x14>
     dd6:	92 30       	cpi	r25, 0x02	; 2
     dd8:	09 f1       	breq	.+66     	; 0xe1c <mcal_timer_stop+0x50>
     dda:	93 30       	cpi	r25, 0x03	; 3
     ddc:	71 f1       	breq	.+92     	; 0xe3a <mcal_timer_stop+0x6e>
     dde:	3c c0       	rjmp	.+120    	; 0xe58 <mcal_timer_stop+0x8c>
	{
	case TIMER0:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	81 11       	cpse	r24, r1
     de4:	05 c0       	rjmp	.+10     	; 0xdf0 <mcal_timer_stop+0x24>
		{
			// Enable Timer0 Overflow Interrupt
			clr_bit(TIMSK,TOIE0);
     de6:	89 b7       	in	r24, 0x39	; 57
     de8:	8e 7f       	andi	r24, 0xFE	; 254
     dea:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer0 Overflow Interrupt
			clr_bit(TIMSK,TOIE0);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	a1 f5       	brne	.+104    	; 0xe5c <mcal_timer_stop+0x90>
		{
			// Enable Timer0 Compare Interrupt
			clr_bit(TIMSK, OCIE0);
     df4:	89 b7       	in	r24, 0x39	; 57
     df6:	8d 7f       	andi	r24, 0xFD	; 253
     df8:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	08 95       	ret
		}
		break;
	}
	case TIMER1_CHANNEL_1:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	81 11       	cpse	r24, r1
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <mcal_timer_stop+0x42>
		{
			// Enable Timer1 channel 1 Overflow Interrupt
			clr_bit(TIMSK,TOIE1);
     e04:	89 b7       	in	r24, 0x39	; 57
     e06:	8b 7f       	andi	r24, 0xFB	; 251
     e08:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer1 channel 1 Overflow Interrupt
			clr_bit(TIMSK,TOIE1);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	39 f5       	brne	.+78     	; 0xe60 <mcal_timer_stop+0x94>
		{
			// Enable Timer1 channel 1 Compare Interrupt
			clr_bit(TIMSK, OCIE1A);
     e12:	89 b7       	in	r24, 0x39	; 57
     e14:	8f 7e       	andi	r24, 0xEF	; 239
     e16:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	08 95       	ret
		}
		break;
	}
	case TIMER1_CHANNEL_2:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     e1c:	82 81       	ldd	r24, Z+2	; 0x02
     e1e:	81 11       	cpse	r24, r1
     e20:	05 c0       	rjmp	.+10     	; 0xe2c <mcal_timer_stop+0x60>
		{
			// Enable Timer1 channel 2 Overflow Interrupt
			set_bit(TIMSK,TOIE2);
     e22:	89 b7       	in	r24, 0x39	; 57
     e24:	80 64       	ori	r24, 0x40	; 64
     e26:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer1 channel 2 Overflow Interrupt
			set_bit(TIMSK,TOIE2);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	d1 f4       	brne	.+52     	; 0xe64 <mcal_timer_stop+0x98>
		{
			// Enable Timer1 channel 2 Compare Interrupt
			set_bit(TIMSK, OCIE1B);
     e30:	89 b7       	in	r24, 0x39	; 57
     e32:	88 60       	ori	r24, 0x08	; 8
     e34:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	08 95       	ret
		}
		break;
	}
	case TIMER2:
	{
		if (TIMER_NORMAL_MODE ==  timer->mode)
     e3a:	82 81       	ldd	r24, Z+2	; 0x02
     e3c:	81 11       	cpse	r24, r1
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <mcal_timer_stop+0x7e>
		{
			// Enable Timer2 Overflow Interrupt
			clr_bit(TIMSK,TOIE2);
     e40:	89 b7       	in	r24, 0x39	; 57
     e42:	8f 7b       	andi	r24, 0xBF	; 191
     e44:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	08 95       	ret
		if (TIMER_NORMAL_MODE ==  timer->mode)
		{
			// Enable Timer2 Overflow Interrupt
			clr_bit(TIMSK,TOIE2);
		}
		else if (TIMER_CTC_MODE == timer->mode)
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	69 f4       	brne	.+26     	; 0xe68 <mcal_timer_stop+0x9c>
		{
			// Enable Timer2 Compare Interrupt
			clr_bit(TIMSK, OCIE2);
     e4e:	89 b7       	in	r24, 0x39	; 57
     e50:	8f 77       	andi	r24, 0x7F	; 127
     e52:	89 bf       	out	0x39, r24	; 57
	return error;
}

timer_error_t mcal_timer_stop(timer_config_t* timer)
{
	timer_error_t error = TIMER_STATE_SUCCESS;
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	08 95       	ret
		break;
	}

	default :
	{
		error = TIMER_STATE_INVALID_TIMER;
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	08 95       	ret
			// Enable Timer0 Compare Interrupt
			clr_bit(TIMSK, OCIE0);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	08 95       	ret
			// Enable Timer1 channel 1 Compare Interrupt
			clr_bit(TIMSK, OCIE1A);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     e60:	83 e0       	ldi	r24, 0x03	; 3
     e62:	08 95       	ret
			// Enable Timer1 channel 2 Compare Interrupt
			set_bit(TIMSK, OCIE1B);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     e64:	83 e0       	ldi	r24, 0x03	; 3
     e66:	08 95       	ret
			// Enable Timer2 Compare Interrupt
			clr_bit(TIMSK, OCIE2);
		}
		else
		{
			error = TIMER_STATE_INVALID_MODE;
     e68:	83 e0       	ldi	r24, 0x03	; 3
		break;
	}
	}

	return error;
}
     e6a:	08 95       	ret

00000e6c <timer_setCallBack>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/
void timer_setCallBack( void(*a_ptr)(void))
{
	g_callBackPtr = a_ptr;
     e6c:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <g_callBackPtr+0x1>
     e70:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <g_callBackPtr>
     e74:	08 95       	ret

00000e76 <set_timer_overflow>:
}

void set_timer_overflow(double overflow) {
	interruptOverflow = overflow;
     e76:	60 93 31 02 	sts	0x0231, r22	; 0x800231 <interruptOverflow>
     e7a:	70 93 32 02 	sts	0x0232, r23	; 0x800232 <interruptOverflow+0x1>
     e7e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <interruptOverflow+0x2>
     e82:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <interruptOverflow+0x3>
     e86:	08 95       	ret

00000e88 <__vector_3>:
/*                     Interrupts Implementation                         */
/*************************************************************************/

/* TIMER2_COMP_vect */
void __vector_3(void)
{
     e88:	1f 92       	push	r1
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
     eaa:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <g_callBackPtr>
     eae:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <g_callBackPtr+0x1>
     eb2:	30 97       	sbiw	r30, 0x00	; 0
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <__vector_3+0x30>
	{
		(*g_callBackPtr)();
     eb6:	09 95       	icall
	}
}
     eb8:	ff 91       	pop	r31
     eba:	ef 91       	pop	r30
     ebc:	bf 91       	pop	r27
     ebe:	af 91       	pop	r26
     ec0:	9f 91       	pop	r25
     ec2:	8f 91       	pop	r24
     ec4:	7f 91       	pop	r23
     ec6:	6f 91       	pop	r22
     ec8:	5f 91       	pop	r21
     eca:	4f 91       	pop	r20
     ecc:	3f 91       	pop	r19
     ece:	2f 91       	pop	r18
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <__vector_4>:

/* TIMER2_OVF_vect */
void __vector_4(void)
{
     eda:	1f 92       	push	r1
     edc:	0f 92       	push	r0
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	0f 92       	push	r0
     ee2:	11 24       	eor	r1, r1
     ee4:	2f 93       	push	r18
     ee6:	3f 93       	push	r19
     ee8:	4f 93       	push	r20
     eea:	5f 93       	push	r21
     eec:	6f 93       	push	r22
     eee:	7f 93       	push	r23
     ef0:	8f 93       	push	r24
     ef2:	9f 93       	push	r25
     ef4:	af 93       	push	r26
     ef6:	bf 93       	push	r27
     ef8:	ef 93       	push	r30
     efa:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
     efc:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <g_callBackPtr>
     f00:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <g_callBackPtr+0x1>
     f04:	30 97       	sbiw	r30, 0x00	; 0
     f06:	09 f0       	breq	.+2      	; 0xf0a <__vector_4+0x30>
	{
		(*g_callBackPtr)();
     f08:	09 95       	icall
	}
}
     f0a:	ff 91       	pop	r31
     f0c:	ef 91       	pop	r30
     f0e:	bf 91       	pop	r27
     f10:	af 91       	pop	r26
     f12:	9f 91       	pop	r25
     f14:	8f 91       	pop	r24
     f16:	7f 91       	pop	r23
     f18:	6f 91       	pop	r22
     f1a:	5f 91       	pop	r21
     f1c:	4f 91       	pop	r20
     f1e:	3f 91       	pop	r19
     f20:	2f 91       	pop	r18
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <__vector_5>:

/* TIMER1_CAPT_vect */
void __vector_5(void)
{
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	2f 93       	push	r18
     f38:	3f 93       	push	r19
     f3a:	4f 93       	push	r20
     f3c:	5f 93       	push	r21
     f3e:	6f 93       	push	r22
     f40:	7f 93       	push	r23
     f42:	8f 93       	push	r24
     f44:	9f 93       	push	r25
     f46:	af 93       	push	r26
     f48:	bf 93       	push	r27
     f4a:	ef 93       	push	r30
     f4c:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
     f4e:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <g_callBackPtr>
     f52:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <g_callBackPtr+0x1>
     f56:	30 97       	sbiw	r30, 0x00	; 0
     f58:	09 f0       	breq	.+2      	; 0xf5c <__vector_5+0x30>
	{
		(*g_callBackPtr)();
     f5a:	09 95       	icall
	}
}
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <__vector_6>:

/* TIMER1_COMPA_vect */
void __vector_6(void)
{
     f7e:	1f 92       	push	r1
     f80:	0f 92       	push	r0
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	0f 92       	push	r0
     f86:	11 24       	eor	r1, r1
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
     fa0:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <g_callBackPtr>
     fa4:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <g_callBackPtr+0x1>
     fa8:	30 97       	sbiw	r30, 0x00	; 0
     faa:	09 f0       	breq	.+2      	; 0xfae <__vector_6+0x30>
	{
		(*g_callBackPtr)();
     fac:	09 95       	icall
	}
}
     fae:	ff 91       	pop	r31
     fb0:	ef 91       	pop	r30
     fb2:	bf 91       	pop	r27
     fb4:	af 91       	pop	r26
     fb6:	9f 91       	pop	r25
     fb8:	8f 91       	pop	r24
     fba:	7f 91       	pop	r23
     fbc:	6f 91       	pop	r22
     fbe:	5f 91       	pop	r21
     fc0:	4f 91       	pop	r20
     fc2:	3f 91       	pop	r19
     fc4:	2f 91       	pop	r18
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	0f 90       	pop	r0
     fcc:	1f 90       	pop	r1
     fce:	18 95       	reti

00000fd0 <__vector_7>:

/* TIMER1_COMPB_vect */
void __vector_7(void)
{
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	11 24       	eor	r1, r1
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	4f 93       	push	r20
     fe0:	5f 93       	push	r21
     fe2:	6f 93       	push	r22
     fe4:	7f 93       	push	r23
     fe6:	8f 93       	push	r24
     fe8:	9f 93       	push	r25
     fea:	af 93       	push	r26
     fec:	bf 93       	push	r27
     fee:	ef 93       	push	r30
     ff0:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
     ff2:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <g_callBackPtr>
     ff6:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <g_callBackPtr+0x1>
     ffa:	30 97       	sbiw	r30, 0x00	; 0
     ffc:	09 f0       	breq	.+2      	; 0x1000 <__vector_7+0x30>
	{
		(*g_callBackPtr)();
     ffe:	09 95       	icall
	}
}
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <__vector_8>:

/* TIMER1_OVF_vect */
void __vector_8(void)
{
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	2f 93       	push	r18
    102e:	3f 93       	push	r19
    1030:	4f 93       	push	r20
    1032:	5f 93       	push	r21
    1034:	6f 93       	push	r22
    1036:	7f 93       	push	r23
    1038:	8f 93       	push	r24
    103a:	9f 93       	push	r25
    103c:	af 93       	push	r26
    103e:	bf 93       	push	r27
    1040:	ef 93       	push	r30
    1042:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
    1044:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <g_callBackPtr>
    1048:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <g_callBackPtr+0x1>
    104c:	30 97       	sbiw	r30, 0x00	; 0
    104e:	09 f0       	breq	.+2      	; 0x1052 <__vector_8+0x30>
	{
		(*g_callBackPtr)();
    1050:	09 95       	icall
	}
}
    1052:	ff 91       	pop	r31
    1054:	ef 91       	pop	r30
    1056:	bf 91       	pop	r27
    1058:	af 91       	pop	r26
    105a:	9f 91       	pop	r25
    105c:	8f 91       	pop	r24
    105e:	7f 91       	pop	r23
    1060:	6f 91       	pop	r22
    1062:	5f 91       	pop	r21
    1064:	4f 91       	pop	r20
    1066:	3f 91       	pop	r19
    1068:	2f 91       	pop	r18
    106a:	0f 90       	pop	r0
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	0f 90       	pop	r0
    1070:	1f 90       	pop	r1
    1072:	18 95       	reti

00001074 <__vector_9>:

/* TIMER0_OVF_vect */
void __vector_9(void)
{
    1074:	1f 92       	push	r1
    1076:	0f 92       	push	r0
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	0f 92       	push	r0
    107c:	11 24       	eor	r1, r1
    107e:	2f 93       	push	r18
    1080:	3f 93       	push	r19
    1082:	4f 93       	push	r20
    1084:	5f 93       	push	r21
    1086:	6f 93       	push	r22
    1088:	7f 93       	push	r23
    108a:	8f 93       	push	r24
    108c:	9f 93       	push	r25
    108e:	af 93       	push	r26
    1090:	bf 93       	push	r27
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	ef 93       	push	r30
    1098:	ff 93       	push	r31
	ticks++;
    109a:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <ticks>
    109e:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <ticks+0x1>
    10a2:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <ticks+0x2>
    10a6:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <ticks+0x3>
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e8       	ldi	r20, 0x80	; 128
    10b0:	5f e3       	ldi	r21, 0x3F	; 63
    10b2:	0e 94 8d 0a 	call	0x151a	; 0x151a <__addsf3>
    10b6:	60 93 35 02 	sts	0x0235, r22	; 0x800235 <ticks>
    10ba:	70 93 36 02 	sts	0x0236, r23	; 0x800236 <ticks+0x1>
    10be:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <ticks+0x2>
    10c2:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <ticks+0x3>
	if(g_callBackPtr != NULL_PTR)
    10c6:	c0 91 39 02 	lds	r28, 0x0239	; 0x800239 <g_callBackPtr>
    10ca:	d0 91 3a 02 	lds	r29, 0x023A	; 0x80023a <g_callBackPtr+0x1>
    10ce:	20 97       	sbiw	r28, 0x00	; 0
    10d0:	f1 f0       	breq	.+60     	; 0x110e <__vector_9+0x9a>
	{
		if(ticks >= interruptOverflow)
    10d2:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <ticks>
    10d6:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <ticks+0x1>
    10da:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <ticks+0x2>
    10de:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <ticks+0x3>
    10e2:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <interruptOverflow>
    10e6:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <interruptOverflow+0x1>
    10ea:	40 91 33 02 	lds	r20, 0x0233	; 0x800233 <interruptOverflow+0x2>
    10ee:	50 91 34 02 	lds	r21, 0x0234	; 0x800234 <interruptOverflow+0x3>
    10f2:	0e 94 14 0c 	call	0x1828	; 0x1828 <__gesf2>
    10f6:	88 23       	and	r24, r24
    10f8:	54 f0       	brlt	.+20     	; 0x110e <__vector_9+0x9a>
		{
			ticks= 0;
    10fa:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <ticks>
    10fe:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <ticks+0x1>
    1102:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <ticks+0x2>
    1106:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <ticks+0x3>
			(*g_callBackPtr)();
    110a:	fe 01       	movw	r30, r28
    110c:	09 95       	icall
		}
	}
}
    110e:	ff 91       	pop	r31
    1110:	ef 91       	pop	r30
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	bf 91       	pop	r27
    1118:	af 91       	pop	r26
    111a:	9f 91       	pop	r25
    111c:	8f 91       	pop	r24
    111e:	7f 91       	pop	r23
    1120:	6f 91       	pop	r22
    1122:	5f 91       	pop	r21
    1124:	4f 91       	pop	r20
    1126:	3f 91       	pop	r19
    1128:	2f 91       	pop	r18
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
    1130:	1f 90       	pop	r1
    1132:	18 95       	reti

00001134 <__vector_19>:

/* TIMER0_COMP_vect */
void __vector_19(void)
{
    1134:	1f 92       	push	r1
    1136:	0f 92       	push	r0
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	0f 92       	push	r0
    113c:	11 24       	eor	r1, r1
    113e:	2f 93       	push	r18
    1140:	3f 93       	push	r19
    1142:	4f 93       	push	r20
    1144:	5f 93       	push	r21
    1146:	6f 93       	push	r22
    1148:	7f 93       	push	r23
    114a:	8f 93       	push	r24
    114c:	9f 93       	push	r25
    114e:	af 93       	push	r26
    1150:	bf 93       	push	r27
    1152:	ef 93       	push	r30
    1154:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
    1156:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <g_callBackPtr>
    115a:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <g_callBackPtr+0x1>
    115e:	30 97       	sbiw	r30, 0x00	; 0
    1160:	09 f0       	breq	.+2      	; 0x1164 <__vector_19+0x30>
	{
		(*g_callBackPtr)();
    1162:	09 95       	icall
	}
}
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	7f 91       	pop	r23
    1172:	6f 91       	pop	r22
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <mcal_UART_init>:
#include "uart.h"
/**************************************************************************/
/*                     Functions Implementation                           */
/**************************************************************************/
uart_error_t mcal_UART_init(uart_t* uart)
{
    1186:	cf 92       	push	r12
    1188:	df 92       	push	r13
    118a:	ef 92       	push	r14
    118c:	ff 92       	push	r15
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	ec 01       	movw	r28, r24
	uart_error_t error = UART_STATE_SUCCESS;

	/* U2X = 1 for double transmission speed */
	set_bit(UCSRA,U2X);
    1194:	8b b1       	in	r24, 0x0b	; 11
    1196:	82 60       	ori	r24, 0x02	; 2
    1198:	8b b9       	out	0x0b, r24	; 11
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	set_bit(UCSRB,RXEN);
    119a:	8a b1       	in	r24, 0x0a	; 10
    119c:	80 61       	ori	r24, 0x10	; 16
    119e:	8a b9       	out	0x0a, r24	; 10
	set_bit(UCSRB,TXEN);
    11a0:	8a b1       	in	r24, 0x0a	; 10
    11a2:	88 60       	ori	r24, 0x08	; 8
    11a4:	8a b9       	out	0x0a, r24	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	set_bit(UCSRC,URSEL);
    11a6:	80 b5       	in	r24, 0x20	; 32
    11a8:	80 68       	ori	r24, 0x80	; 128
    11aa:	80 bd       	out	0x20, r24	; 32

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	/* Initialize baud rate */
	if (uart->baudRate == BAUD_2400 || uart->baudRate == BAUD_4800 || uart->baudRate == BAUD_9600)
    11ac:	28 81       	ld	r18, Y
    11ae:	39 81       	ldd	r19, Y+1	; 0x01
    11b0:	20 36       	cpi	r18, 0x60	; 96
    11b2:	89 e0       	ldi	r24, 0x09	; 9
    11b4:	38 07       	cpc	r19, r24
    11b6:	49 f0       	breq	.+18     	; 0x11ca <mcal_UART_init+0x44>
    11b8:	20 3c       	cpi	r18, 0xC0	; 192
    11ba:	82 e1       	ldi	r24, 0x12	; 18
    11bc:	38 07       	cpc	r19, r24
    11be:	29 f0       	breq	.+10     	; 0x11ca <mcal_UART_init+0x44>
    11c0:	20 38       	cpi	r18, 0x80	; 128
    11c2:	85 e2       	ldi	r24, 0x25	; 37
    11c4:	38 07       	cpc	r19, r24
    11c6:	09 f0       	breq	.+2      	; 0x11ca <mcal_UART_init+0x44>
    11c8:	42 c0       	rjmp	.+132    	; 0x124e <mcal_UART_init+0xc8>
	{
		register(UBRRH) = (((F_CPU / (uart->baudRate * 8UL))) - 1)>>8;
    11ca:	c9 01       	movw	r24, r18
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	aa 1f       	adc	r26, r26
    11d6:	bb 1f       	adc	r27, r27
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	aa 1f       	adc	r26, r26
    11de:	bb 1f       	adc	r27, r27
    11e0:	9c 01       	movw	r18, r24
    11e2:	ad 01       	movw	r20, r26
    11e4:	22 0f       	add	r18, r18
    11e6:	33 1f       	adc	r19, r19
    11e8:	44 1f       	adc	r20, r20
    11ea:	55 1f       	adc	r21, r21
    11ec:	0f 2e       	mov	r0, r31
    11ee:	c1 2c       	mov	r12, r1
    11f0:	f2 e1       	ldi	r31, 0x12	; 18
    11f2:	df 2e       	mov	r13, r31
    11f4:	fa e7       	ldi	r31, 0x7A	; 122
    11f6:	ef 2e       	mov	r14, r31
    11f8:	f1 2c       	mov	r15, r1
    11fa:	f0 2d       	mov	r31, r0
    11fc:	c7 01       	movw	r24, r14
    11fe:	b6 01       	movw	r22, r12
    1200:	0e 94 86 0c 	call	0x190c	; 0x190c <__udivmodsi4>
    1204:	da 01       	movw	r26, r20
    1206:	c9 01       	movw	r24, r18
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	a1 09       	sbc	r26, r1
    120c:	b1 09       	sbc	r27, r1
    120e:	89 2f       	mov	r24, r25
    1210:	9a 2f       	mov	r25, r26
    1212:	ab 2f       	mov	r26, r27
    1214:	bb 27       	eor	r27, r27
    1216:	80 bd       	out	0x20, r24	; 32
		register(UBRRL) = (((F_CPU / (uart->baudRate * 8UL))) - 1);
    1218:	28 81       	ld	r18, Y
    121a:	39 81       	ldd	r19, Y+1	; 0x01
    121c:	c9 01       	movw	r24, r18
    121e:	a0 e0       	ldi	r26, 0x00	; 0
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	aa 1f       	adc	r26, r26
    1228:	bb 1f       	adc	r27, r27
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	aa 1f       	adc	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	9c 01       	movw	r18, r24
    1234:	ad 01       	movw	r20, r26
    1236:	22 0f       	add	r18, r18
    1238:	33 1f       	adc	r19, r19
    123a:	44 1f       	adc	r20, r20
    123c:	55 1f       	adc	r21, r21
    123e:	c7 01       	movw	r24, r14
    1240:	b6 01       	movw	r22, r12
    1242:	0e 94 86 0c 	call	0x190c	; 0x190c <__udivmodsi4>
    1246:	21 50       	subi	r18, 0x01	; 1
    1248:	29 b9       	out	0x09, r18	; 9
/**************************************************************************/
/*                     Functions Implementation                           */
/**************************************************************************/
uart_error_t mcal_UART_init(uart_t* uart)
{
	uart_error_t error = UART_STATE_SUCCESS;
    124a:	80 e0       	ldi	r24, 0x00	; 0
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	/* Initialize baud rate */
	if (uart->baudRate == BAUD_2400 || uart->baudRate == BAUD_4800 || uart->baudRate == BAUD_9600)
	{
		register(UBRRH) = (((F_CPU / (uart->baudRate * 8UL))) - 1)>>8;
		register(UBRRL) = (((F_CPU / (uart->baudRate * 8UL))) - 1);
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <mcal_UART_init+0xca>
	}
	else
	{
		error = UART_STATE_INVALID_BAUD_RATE;
    124e:	83 e0       	ldi	r24, 0x03	; 3
	}


	/* Initialize stop bit numbers */
	if (STOP_BIT_1 == uart->stopBitNo)
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	91 11       	cpse	r25, r1
    1254:	04 c0       	rjmp	.+8      	; 0x125e <mcal_UART_init+0xd8>
	{
		clr_bit(UCSRC,USBS);
    1256:	90 b5       	in	r25, 0x20	; 32
    1258:	97 7f       	andi	r25, 0xF7	; 247
    125a:	90 bd       	out	0x20, r25	; 32
    125c:	07 c0       	rjmp	.+14     	; 0x126c <mcal_UART_init+0xe6>
	}
	else if (STOP_BIT_2 == uart->stopBitNo)
    125e:	91 30       	cpi	r25, 0x01	; 1
    1260:	21 f4       	brne	.+8      	; 0x126a <mcal_UART_init+0xe4>
	{
		set_bit(UCSRC,USBS);
    1262:	90 b5       	in	r25, 0x20	; 32
    1264:	98 60       	ori	r25, 0x08	; 8
    1266:	90 bd       	out	0x20, r25	; 32
    1268:	01 c0       	rjmp	.+2      	; 0x126c <mcal_UART_init+0xe6>
	}
	else
	{
		error = UART_STATE_INVALID_STOP_BIT_NUMBER;
    126a:	82 e0       	ldi	r24, 0x02	; 2
	}

	/* Initialize parity mode */
	if (DISABLE == uart->parity)
    126c:	9b 81       	ldd	r25, Y+3	; 0x03
    126e:	91 11       	cpse	r25, r1
    1270:	07 c0       	rjmp	.+14     	; 0x1280 <mcal_UART_init+0xfa>
	{
		clr_bit(UCSRC,UPM0);
    1272:	90 b5       	in	r25, 0x20	; 32
    1274:	9f 7e       	andi	r25, 0xEF	; 239
    1276:	90 bd       	out	0x20, r25	; 32
		clr_bit(UCSRC,UPM1);
    1278:	90 b5       	in	r25, 0x20	; 32
    127a:	9f 7d       	andi	r25, 0xDF	; 223
    127c:	90 bd       	out	0x20, r25	; 32
    127e:	13 c0       	rjmp	.+38     	; 0x12a6 <mcal_UART_init+0x120>
	}
	else if (ENABLE_EVEN == uart->parity)
    1280:	91 30       	cpi	r25, 0x01	; 1
    1282:	39 f4       	brne	.+14     	; 0x1292 <mcal_UART_init+0x10c>
	{
		clr_bit(UCSRC,UPM0);
    1284:	90 b5       	in	r25, 0x20	; 32
    1286:	9f 7e       	andi	r25, 0xEF	; 239
    1288:	90 bd       	out	0x20, r25	; 32
		set_bit(UCSRC,UPM1);
    128a:	90 b5       	in	r25, 0x20	; 32
    128c:	90 62       	ori	r25, 0x20	; 32
    128e:	90 bd       	out	0x20, r25	; 32
    1290:	0a c0       	rjmp	.+20     	; 0x12a6 <mcal_UART_init+0x120>
	}
	else if (ENABLE_ODD == uart->parity)
    1292:	92 30       	cpi	r25, 0x02	; 2
    1294:	39 f4       	brne	.+14     	; 0x12a4 <mcal_UART_init+0x11e>
	{
		set_bit(UCSRC,UPM0);
    1296:	90 b5       	in	r25, 0x20	; 32
    1298:	90 61       	ori	r25, 0x10	; 16
    129a:	90 bd       	out	0x20, r25	; 32
		set_bit(UCSRC,UPM1);
    129c:	90 b5       	in	r25, 0x20	; 32
    129e:	90 62       	ori	r25, 0x20	; 32
    12a0:	90 bd       	out	0x20, r25	; 32
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <mcal_UART_init+0x120>
	}
	else
	{
		error = UART_STATE_INVALID_STOP_BIT_NUMBER;
    12a4:	82 e0       	ldi	r24, 0x02	; 2
	}

	/* Initialize packet length */
	if (BIT_5 == uart->packetLength)
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	91 11       	cpse	r25, r1
    12aa:	0a c0       	rjmp	.+20     	; 0x12c0 <mcal_UART_init+0x13a>
	{
		clr_bit(UCSRC,UCSZ0);
    12ac:	90 b5       	in	r25, 0x20	; 32
    12ae:	9d 7f       	andi	r25, 0xFD	; 253
    12b0:	90 bd       	out	0x20, r25	; 32
		clr_bit(UCSRC,UCSZ1);
    12b2:	90 b5       	in	r25, 0x20	; 32
    12b4:	9b 7f       	andi	r25, 0xFB	; 251
    12b6:	90 bd       	out	0x20, r25	; 32
		clr_bit(UCSRB,UCSZ2);
    12b8:	9a b1       	in	r25, 0x0a	; 10
    12ba:	9b 7f       	andi	r25, 0xFB	; 251
    12bc:	9a b9       	out	0x0a, r25	; 10
    12be:	31 c0       	rjmp	.+98     	; 0x1322 <mcal_UART_init+0x19c>
	}
	else if (BIT_6 == uart->packetLength)
    12c0:	91 30       	cpi	r25, 0x01	; 1
    12c2:	51 f4       	brne	.+20     	; 0x12d8 <mcal_UART_init+0x152>
	{
		set_bit(UCSRC,UCSZ0);
    12c4:	90 b5       	in	r25, 0x20	; 32
    12c6:	92 60       	ori	r25, 0x02	; 2
    12c8:	90 bd       	out	0x20, r25	; 32
		clr_bit(UCSRC,UCSZ1);
    12ca:	90 b5       	in	r25, 0x20	; 32
    12cc:	9b 7f       	andi	r25, 0xFB	; 251
    12ce:	90 bd       	out	0x20, r25	; 32
		clr_bit(UCSRB,UCSZ2);
    12d0:	9a b1       	in	r25, 0x0a	; 10
    12d2:	9b 7f       	andi	r25, 0xFB	; 251
    12d4:	9a b9       	out	0x0a, r25	; 10
    12d6:	25 c0       	rjmp	.+74     	; 0x1322 <mcal_UART_init+0x19c>
	}
	else if (BIT_7 == uart->packetLength)
    12d8:	92 30       	cpi	r25, 0x02	; 2
    12da:	51 f4       	brne	.+20     	; 0x12f0 <mcal_UART_init+0x16a>
	{
		clr_bit(UCSRC,UCSZ0);
    12dc:	90 b5       	in	r25, 0x20	; 32
    12de:	9d 7f       	andi	r25, 0xFD	; 253
    12e0:	90 bd       	out	0x20, r25	; 32
		set_bit(UCSRC,UCSZ1);
    12e2:	90 b5       	in	r25, 0x20	; 32
    12e4:	94 60       	ori	r25, 0x04	; 4
    12e6:	90 bd       	out	0x20, r25	; 32
		clr_bit(UCSRB,UCSZ2);
    12e8:	9a b1       	in	r25, 0x0a	; 10
    12ea:	9b 7f       	andi	r25, 0xFB	; 251
    12ec:	9a b9       	out	0x0a, r25	; 10
    12ee:	19 c0       	rjmp	.+50     	; 0x1322 <mcal_UART_init+0x19c>
	}
	else if (BIT_8 == uart->packetLength)
    12f0:	93 30       	cpi	r25, 0x03	; 3
    12f2:	51 f4       	brne	.+20     	; 0x1308 <mcal_UART_init+0x182>
	{
		set_bit(UCSRC,UCSZ0);
    12f4:	90 b5       	in	r25, 0x20	; 32
    12f6:	92 60       	ori	r25, 0x02	; 2
    12f8:	90 bd       	out	0x20, r25	; 32
		set_bit(UCSRC,UCSZ1);
    12fa:	90 b5       	in	r25, 0x20	; 32
    12fc:	94 60       	ori	r25, 0x04	; 4
    12fe:	90 bd       	out	0x20, r25	; 32
		clr_bit(UCSRB,UCSZ2);
    1300:	9a b1       	in	r25, 0x0a	; 10
    1302:	9b 7f       	andi	r25, 0xFB	; 251
    1304:	9a b9       	out	0x0a, r25	; 10
    1306:	0d c0       	rjmp	.+26     	; 0x1322 <mcal_UART_init+0x19c>
	}
	else if (BIT_9 == uart->packetLength)
    1308:	94 30       	cpi	r25, 0x04	; 4
    130a:	51 f4       	brne	.+20     	; 0x1320 <mcal_UART_init+0x19a>
	{
		set_bit(UCSRC,UCSZ0);
    130c:	90 b5       	in	r25, 0x20	; 32
    130e:	92 60       	ori	r25, 0x02	; 2
    1310:	90 bd       	out	0x20, r25	; 32
		set_bit(UCSRC,UCSZ1);
    1312:	90 b5       	in	r25, 0x20	; 32
    1314:	94 60       	ori	r25, 0x04	; 4
    1316:	90 bd       	out	0x20, r25	; 32
		set_bit(UCSRB,UCSZ2);
    1318:	9a b1       	in	r25, 0x0a	; 10
    131a:	94 60       	ori	r25, 0x04	; 4
    131c:	9a b9       	out	0x0a, r25	; 10
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <mcal_UART_init+0x19c>
	}
	else
	{
		error = UART_STATE_INVALID_PACKET_LENGTH;
    1320:	84 e0       	ldi	r24, 0x04	; 4
	}
	return error;
}
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	08 95       	ret

00001330 <mcal_UART_sendByte>:
{
	uart_error_t error = UART_STATE_SUCCESS;

	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(bit_is_clr(UCSRA,UDRE)){}
    1330:	5d 9b       	sbis	0x0b, 5	; 11
    1332:	fe cf       	rjmp	.-4      	; 0x1330 <mcal_UART_sendByte>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	register(UDR) = data;
    1334:	8c b9       	out	0x0c, r24	; 12
	// Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/

	return error;
}
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	08 95       	ret

0000133a <mcal_UART_recieveByte>:
{
	uart_error_t error = UART_STATE_SUCCESS;

	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(bit_is_clr(UCSRA,RXC)){}
    133a:	5f 9b       	sbis	0x0b, 7	; 11
    133c:	fe cf       	rjmp	.-4      	; 0x133a <mcal_UART_recieveByte>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
	*data = register(UDR);
    133e:	2c b1       	in	r18, 0x0c	; 12
    1340:	fc 01       	movw	r30, r24
    1342:	20 83       	st	Z, r18

	return error;
}
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	08 95       	ret

00001348 <mcal_UART_sendString>:

uart_error_t mcal_UART_sendString(const u8_t *str)
{
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	8c 01       	movw	r16, r24

	uart_error_t error = UART_STATE_SUCCESS;

	u8_t i = 0;
    1352:	c0 e0       	ldi	r28, 0x00	; 0
}

uart_error_t mcal_UART_sendString(const u8_t *str)
{

	uart_error_t error = UART_STATE_SUCCESS;
    1354:	d0 e0       	ldi	r29, 0x00	; 0

	u8_t i = 0;

	while(str[i] != '\0')
    1356:	07 c0       	rjmp	.+14     	; 0x1366 <mcal_UART_sendString+0x1e>
	{
		if(UART_STATE_SUCCESS == mcal_UART_sendByte(str[i]))
    1358:	0e 94 98 09 	call	0x1330	; 0x1330 <mcal_UART_sendByte>
    135c:	81 11       	cpse	r24, r1
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <mcal_UART_sendString+0x1c>
		{
			i++;
    1360:	cf 5f       	subi	r28, 0xFF	; 255
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <mcal_UART_sendString+0x1e>
		}
		else
		{
			error = UART_STATE_ERROR;
    1364:	d1 e0       	ldi	r29, 0x01	; 1

	uart_error_t error = UART_STATE_SUCCESS;

	u8_t i = 0;

	while(str[i] != '\0')
    1366:	f8 01       	movw	r30, r16
    1368:	ec 0f       	add	r30, r28
    136a:	f1 1d       	adc	r31, r1
    136c:	80 81       	ld	r24, Z
    136e:	81 11       	cpse	r24, r1
    1370:	f3 cf       	rjmp	.-26     	; 0x1358 <mcal_UART_sendString+0x10>
		Str++;
	}
	 *******************************************************************/

	return error;
}
    1372:	8d 2f       	mov	r24, r29
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	08 95       	ret

0000137e <ms_manager_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

system_error_t ms_manager_init()
{
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	00 d0       	rcall	.+0      	; 0x1384 <ms_manager_init+0x6>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <ms_manager_init+0x8>
    1386:	1f 92       	push	r1
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	system_error_t error = SYSTEM_SUCCESS;

	uart_t uart;
	uart.baudRate = 9600;
    138c:	80 e8       	ldi	r24, 0x80	; 128
    138e:	95 e2       	ldi	r25, 0x25	; 37
    1390:	9a 83       	std	Y+2, r25	; 0x02
    1392:	89 83       	std	Y+1, r24	; 0x01
	uart.packetLength = BIT_8;
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	8d 83       	std	Y+5, r24	; 0x05
	uart.stopBitNo = STOP_BIT_1;
    1398:	1b 82       	std	Y+3, r1	; 0x03
	uart.parity = DISABLE;
    139a:	1c 82       	std	Y+4, r1	; 0x04

	if(UART_STATE_SUCCESS != mcal_UART_init(&uart))
    139c:	ce 01       	movw	r24, r28
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	0e 94 c3 08 	call	0x1186	; 0x1186 <mcal_UART_init>
    13a4:	88 23       	and	r24, r24
    13a6:	41 f0       	breq	.+16     	; 0x13b8 <ms_manager_init+0x3a>
	{
		error = SYSTEM_FAIL;
		logger_write_error(TAG,(u8_t *)"Failed to initialize messaging Unit");
    13a8:	65 e0       	ldi	r22, 0x05	; 5
    13aa:	71 e0       	ldi	r23, 0x01	; 1
    13ac:	89 e2       	ldi	r24, 0x29	; 41
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	0e 94 28 0a 	call	0x1450	; 0x1450 <logger_write_error>
	uart.stopBitNo = STOP_BIT_1;
	uart.parity = DISABLE;

	if(UART_STATE_SUCCESS != mcal_UART_init(&uart))
	{
		error = SYSTEM_FAIL;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	07 c0       	rjmp	.+14     	; 0x13c6 <ms_manager_init+0x48>
		logger_write_error(TAG,(u8_t *)"Failed to initialize messaging Unit");
	}
	else
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to initialize messaging Unit");
    13b8:	6a e3       	ldi	r22, 0x3A	; 58
    13ba:	71 e0       	ldi	r23, 0x01	; 1
    13bc:	89 e2       	ldi	r24, 0x29	; 41
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	0e 94 27 0a 	call	0x144e	; 0x144e <logger_write_debug>
/*                     Functions Implementation                          */
/*************************************************************************/

system_error_t ms_manager_init()
{
	system_error_t error = SYSTEM_SUCCESS;
    13c4:	80 e0       	ldi	r24, 0x00	; 0
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to initialize messaging Unit");
	}

	return error;
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <ms_manager_send_data>:

system_error_t ms_manager_send_data(u8_t data)
{
	system_error_t error = SYSTEM_SUCCESS;

	if(UART_STATE_SUCCESS != mcal_UART_sendByte(data))
    13d6:	0e 94 98 09 	call	0x1330	; 0x1330 <mcal_UART_sendByte>
    13da:	88 23       	and	r24, r24
    13dc:	41 f0       	breq	.+16     	; 0x13ee <ms_manager_send_data+0x18>
	{
		error = SYSTEM_FAIL;
		logger_write_error(TAG,(u8_t *)"Failed to send data");
    13de:	6f e5       	ldi	r22, 0x5F	; 95
    13e0:	71 e0       	ldi	r23, 0x01	; 1
    13e2:	89 e2       	ldi	r24, 0x29	; 41
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	0e 94 28 0a 	call	0x1450	; 0x1450 <logger_write_error>
{
	system_error_t error = SYSTEM_SUCCESS;

	if(UART_STATE_SUCCESS != mcal_UART_sendByte(data))
	{
		error = SYSTEM_FAIL;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	08 95       	ret
		logger_write_error(TAG,(u8_t *)"Failed to send data");
	}
	else
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to send data");
    13ee:	63 e7       	ldi	r22, 0x73	; 115
    13f0:	71 e0       	ldi	r23, 0x01	; 1
    13f2:	89 e2       	ldi	r24, 0x29	; 41
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	0e 94 27 0a 	call	0x144e	; 0x144e <logger_write_debug>
	return error;
}

system_error_t ms_manager_send_data(u8_t data)
{
	system_error_t error = SYSTEM_SUCCESS;
    13fa:	80 e0       	ldi	r24, 0x00	; 0
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to send data");
	}

	return error;
}
    13fc:	08 95       	ret

000013fe <ms_manager_send_string>:

system_error_t ms_manager_send_string(u8_t* data)
{
	system_error_t error = SYSTEM_SUCCESS;

	if(UART_STATE_SUCCESS != mcal_UART_sendString(data))
    13fe:	0e 94 a4 09 	call	0x1348	; 0x1348 <mcal_UART_sendString>
    1402:	88 23       	and	r24, r24
    1404:	41 f0       	breq	.+16     	; 0x1416 <ms_manager_send_string+0x18>
	{
		error = SYSTEM_FAIL;
		logger_write_error(TAG,(u8_t *)"Failed to send string data");
    1406:	68 e8       	ldi	r22, 0x88	; 136
    1408:	71 e0       	ldi	r23, 0x01	; 1
    140a:	89 e2       	ldi	r24, 0x29	; 41
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 28 0a 	call	0x1450	; 0x1450 <logger_write_error>
{
	system_error_t error = SYSTEM_SUCCESS;

	if(UART_STATE_SUCCESS != mcal_UART_sendString(data))
	{
		error = SYSTEM_FAIL;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	08 95       	ret
		logger_write_error(TAG,(u8_t *)"Failed to send string data");
	}
	else
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to send string data");
    1416:	63 ea       	ldi	r22, 0xA3	; 163
    1418:	71 e0       	ldi	r23, 0x01	; 1
    141a:	89 e2       	ldi	r24, 0x29	; 41
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	0e 94 27 0a 	call	0x144e	; 0x144e <logger_write_debug>
	return error;
}

system_error_t ms_manager_send_string(u8_t* data)
{
	system_error_t error = SYSTEM_SUCCESS;
    1422:	80 e0       	ldi	r24, 0x00	; 0
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to send string data");
	}

	return error;
}
    1424:	08 95       	ret

00001426 <ms_manager_receive_data>:

system_error_t ms_manager_receive_data(u8_t* data)
{
	system_error_t error = SYSTEM_SUCCESS;

	if(UART_STATE_SUCCESS != mcal_UART_recieveByte(data))
    1426:	0e 94 9d 09 	call	0x133a	; 0x133a <mcal_UART_recieveByte>
    142a:	88 23       	and	r24, r24
    142c:	41 f0       	breq	.+16     	; 0x143e <ms_manager_receive_data+0x18>
	{
		error = SYSTEM_FAIL;
		logger_write_error(TAG,(u8_t *)"Failed to receive data");
    142e:	6f eb       	ldi	r22, 0xBF	; 191
    1430:	71 e0       	ldi	r23, 0x01	; 1
    1432:	89 e2       	ldi	r24, 0x29	; 41
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	0e 94 28 0a 	call	0x1450	; 0x1450 <logger_write_error>
{
	system_error_t error = SYSTEM_SUCCESS;

	if(UART_STATE_SUCCESS != mcal_UART_recieveByte(data))
	{
		error = SYSTEM_FAIL;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	08 95       	ret
		logger_write_error(TAG,(u8_t *)"Failed to receive data");
	}
	else
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to receive data");
    143e:	66 ed       	ldi	r22, 0xD6	; 214
    1440:	71 e0       	ldi	r23, 0x01	; 1
    1442:	89 e2       	ldi	r24, 0x29	; 41
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	0e 94 27 0a 	call	0x144e	; 0x144e <logger_write_debug>
	return error;
}

system_error_t ms_manager_receive_data(u8_t* data)
{
	system_error_t error = SYSTEM_SUCCESS;
    144a:	80 e0       	ldi	r24, 0x00	; 0
	{
		logger_write_debug(TAG,(u8_t *)"Succeed to receive data");
	}

	return error;
}
    144c:	08 95       	ret

0000144e <logger_write_debug>:
	}
#endif
}

void logger_write_warning(u8_t* tag ,u8_t* data)
{
    144e:	08 95       	ret

00001450 <logger_write_error>:
	}
#endif
}

void logger_write_error(u8_t* tag ,u8_t* data)
{
    1450:	08 95       	ret

00001452 <delay_loop>:
/**************************************************************************/
/*                     Static Functions Implementation                    */
/**************************************************************************/
static void delay_loop(u16_t __count)
{
	__asm__ volatile (
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <delay_loop>
    1456:	08 95       	ret

00001458 <delay_ms>:

/**************************************************************************/
/*                     Functions Implementation                           */
/**************************************************************************/
void delay_ms(double __ms)
{
    1458:	8f 92       	push	r8
    145a:	9f 92       	push	r9
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	4b 01       	movw	r8, r22
    146e:	5c 01       	movw	r10, r24
	u16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	4a ef       	ldi	r20, 0xFA	; 250
    1476:	54 e4       	ldi	r21, 0x44	; 68
    1478:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>
    147c:	6b 01       	movw	r12, r22
    147e:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	5f e3       	ldi	r21, 0x3F	; 63
    1488:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__cmpsf2>
    148c:	88 23       	and	r24, r24
    148e:	24 f1       	brlt	.+72     	; 0x14d8 <delay_ms+0x80>
		__ticks = 1;
	else if (__tmp > 65535)
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	3f ef       	ldi	r19, 0xFF	; 255
    1494:	4f e7       	ldi	r20, 0x7F	; 127
    1496:	57 e4       	ldi	r21, 0x47	; 71
    1498:	c7 01       	movw	r24, r14
    149a:	b6 01       	movw	r22, r12
    149c:	0e 94 14 0c 	call	0x1828	; 0x1828 <__gesf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	a4 f4       	brge	.+40     	; 0x14cc <delay_ms+0x74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (u16_t) (__ms * 10.0);
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e2       	ldi	r20, 0x20	; 32
    14aa:	51 e4       	ldi	r21, 0x41	; 65
    14ac:	c5 01       	movw	r24, r10
    14ae:	b4 01       	movw	r22, r8
    14b0:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>
    14b4:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixunssfsi>
    14b8:	eb 01       	movw	r28, r22
		while(__ticks)
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <delay_ms+0x6e>
		{
			// wait 1/10 ms
			delay_loop(((F_CPU) / 4e3) / 10);
    14bc:	88 ec       	ldi	r24, 0xC8	; 200
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 29 0a 	call	0x1452	; 0x1452 <delay_loop>
			__ticks --;
    14c4:	21 97       	sbiw	r28, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (u16_t) (__ms * 10.0);
		while(__ticks)
    14c6:	20 97       	sbiw	r28, 0x00	; 0
    14c8:	c9 f7       	brne	.-14     	; 0x14bc <delay_ms+0x64>
    14ca:	0a c0       	rjmp	.+20     	; 0x14e0 <delay_ms+0x88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (u16_t)__tmp;
    14cc:	c7 01       	movw	r24, r14
    14ce:	b6 01       	movw	r22, r12
    14d0:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixunssfsi>
    14d4:	cb 01       	movw	r24, r22
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <delay_ms+0x84>
void delay_ms(double __ms)
{
	u16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
		}
		return;
	}
	else
		__ticks = (u16_t)__tmp;
	delay_loop(__ticks);
    14dc:	0e 94 29 0a 	call	0x1452	; 0x1452 <delay_loop>
}
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	df 90       	pop	r13
    14ea:	cf 90       	pop	r12
    14ec:	bf 90       	pop	r11
    14ee:	af 90       	pop	r10
    14f0:	9f 90       	pop	r9
    14f2:	8f 90       	pop	r8
    14f4:	08 95       	ret

000014f6 <std_strcmp>:
    // reverse the string and return it
    return std_reverse(buffer, 0, i - 1);
}

u16_t std_strcmp(const u8_t *X, const u8_t *Y)
{
    14f6:	dc 01       	movw	r26, r24
    14f8:	fb 01       	movw	r30, r22
    while(*X)
    14fa:	05 c0       	rjmp	.+10     	; 0x1506 <std_strcmp+0x10>
    {
        // if u8_t differ or end of second string is reached
        if (*X != *Y)
    14fc:	80 81       	ld	r24, Z
    14fe:	98 13       	cpse	r25, r24
    1500:	05 c0       	rjmp	.+10     	; 0x150c <std_strcmp+0x16>
            break;

        // move to next pair of u8_t
        X++;
    1502:	11 96       	adiw	r26, 0x01	; 1
        Y++;
    1504:	31 96       	adiw	r30, 0x01	; 1
    return std_reverse(buffer, 0, i - 1);
}

u16_t std_strcmp(const u8_t *X, const u8_t *Y)
{
    while(*X)
    1506:	9c 91       	ld	r25, X
    1508:	91 11       	cpse	r25, r1
    150a:	f8 cf       	rjmp	.-16     	; 0x14fc <std_strcmp+0x6>
        X++;
        Y++;
    }

    // return the ASCII difference after converting u8_t* to unsigned u8_t*
    return *(const u8_t*)X - *(const u8_t*)Y;
    150c:	20 81       	ld	r18, Z
    150e:	89 2f       	mov	r24, r25
    1510:	90 e0       	ldi	r25, 0x00	; 0
}
    1512:	82 1b       	sub	r24, r18
    1514:	91 09       	sbc	r25, r1
    1516:	08 95       	ret

00001518 <__subsf3>:
    1518:	50 58       	subi	r21, 0x80	; 128

0000151a <__addsf3>:
    151a:	bb 27       	eor	r27, r27
    151c:	aa 27       	eor	r26, r26
    151e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__addsf3x>
    1522:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__fp_round>
    1526:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fp_pscA>
    152a:	38 f0       	brcs	.+14     	; 0x153a <__addsf3+0x20>
    152c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fp_pscB>
    1530:	20 f0       	brcs	.+8      	; 0x153a <__addsf3+0x20>
    1532:	39 f4       	brne	.+14     	; 0x1542 <__addsf3+0x28>
    1534:	9f 3f       	cpi	r25, 0xFF	; 255
    1536:	19 f4       	brne	.+6      	; 0x153e <__addsf3+0x24>
    1538:	26 f4       	brtc	.+8      	; 0x1542 <__addsf3+0x28>
    153a:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_nan>
    153e:	0e f4       	brtc	.+2      	; 0x1542 <__addsf3+0x28>
    1540:	e0 95       	com	r30
    1542:	e7 fb       	bst	r30, 7
    1544:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>

00001548 <__addsf3x>:
    1548:	e9 2f       	mov	r30, r25
    154a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_split3>
    154e:	58 f3       	brcs	.-42     	; 0x1526 <__addsf3+0xc>
    1550:	ba 17       	cp	r27, r26
    1552:	62 07       	cpc	r22, r18
    1554:	73 07       	cpc	r23, r19
    1556:	84 07       	cpc	r24, r20
    1558:	95 07       	cpc	r25, r21
    155a:	20 f0       	brcs	.+8      	; 0x1564 <__addsf3x+0x1c>
    155c:	79 f4       	brne	.+30     	; 0x157c <__addsf3x+0x34>
    155e:	a6 f5       	brtc	.+104    	; 0x15c8 <__addsf3x+0x80>
    1560:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__fp_zero>
    1564:	0e f4       	brtc	.+2      	; 0x1568 <__addsf3x+0x20>
    1566:	e0 95       	com	r30
    1568:	0b 2e       	mov	r0, r27
    156a:	ba 2f       	mov	r27, r26
    156c:	a0 2d       	mov	r26, r0
    156e:	0b 01       	movw	r0, r22
    1570:	b9 01       	movw	r22, r18
    1572:	90 01       	movw	r18, r0
    1574:	0c 01       	movw	r0, r24
    1576:	ca 01       	movw	r24, r20
    1578:	a0 01       	movw	r20, r0
    157a:	11 24       	eor	r1, r1
    157c:	ff 27       	eor	r31, r31
    157e:	59 1b       	sub	r21, r25
    1580:	99 f0       	breq	.+38     	; 0x15a8 <__addsf3x+0x60>
    1582:	59 3f       	cpi	r21, 0xF9	; 249
    1584:	50 f4       	brcc	.+20     	; 0x159a <__addsf3x+0x52>
    1586:	50 3e       	cpi	r21, 0xE0	; 224
    1588:	68 f1       	brcs	.+90     	; 0x15e4 <__addsf3x+0x9c>
    158a:	1a 16       	cp	r1, r26
    158c:	f0 40       	sbci	r31, 0x00	; 0
    158e:	a2 2f       	mov	r26, r18
    1590:	23 2f       	mov	r18, r19
    1592:	34 2f       	mov	r19, r20
    1594:	44 27       	eor	r20, r20
    1596:	58 5f       	subi	r21, 0xF8	; 248
    1598:	f3 cf       	rjmp	.-26     	; 0x1580 <__addsf3x+0x38>
    159a:	46 95       	lsr	r20
    159c:	37 95       	ror	r19
    159e:	27 95       	ror	r18
    15a0:	a7 95       	ror	r26
    15a2:	f0 40       	sbci	r31, 0x00	; 0
    15a4:	53 95       	inc	r21
    15a6:	c9 f7       	brne	.-14     	; 0x159a <__addsf3x+0x52>
    15a8:	7e f4       	brtc	.+30     	; 0x15c8 <__addsf3x+0x80>
    15aa:	1f 16       	cp	r1, r31
    15ac:	ba 0b       	sbc	r27, r26
    15ae:	62 0b       	sbc	r22, r18
    15b0:	73 0b       	sbc	r23, r19
    15b2:	84 0b       	sbc	r24, r20
    15b4:	ba f0       	brmi	.+46     	; 0x15e4 <__addsf3x+0x9c>
    15b6:	91 50       	subi	r25, 0x01	; 1
    15b8:	a1 f0       	breq	.+40     	; 0x15e2 <__addsf3x+0x9a>
    15ba:	ff 0f       	add	r31, r31
    15bc:	bb 1f       	adc	r27, r27
    15be:	66 1f       	adc	r22, r22
    15c0:	77 1f       	adc	r23, r23
    15c2:	88 1f       	adc	r24, r24
    15c4:	c2 f7       	brpl	.-16     	; 0x15b6 <__addsf3x+0x6e>
    15c6:	0e c0       	rjmp	.+28     	; 0x15e4 <__addsf3x+0x9c>
    15c8:	ba 0f       	add	r27, r26
    15ca:	62 1f       	adc	r22, r18
    15cc:	73 1f       	adc	r23, r19
    15ce:	84 1f       	adc	r24, r20
    15d0:	48 f4       	brcc	.+18     	; 0x15e4 <__addsf3x+0x9c>
    15d2:	87 95       	ror	r24
    15d4:	77 95       	ror	r23
    15d6:	67 95       	ror	r22
    15d8:	b7 95       	ror	r27
    15da:	f7 95       	ror	r31
    15dc:	9e 3f       	cpi	r25, 0xFE	; 254
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <__addsf3x+0x9a>
    15e0:	b0 cf       	rjmp	.-160    	; 0x1542 <__addsf3+0x28>
    15e2:	93 95       	inc	r25
    15e4:	88 0f       	add	r24, r24
    15e6:	08 f0       	brcs	.+2      	; 0x15ea <__addsf3x+0xa2>
    15e8:	99 27       	eor	r25, r25
    15ea:	ee 0f       	add	r30, r30
    15ec:	97 95       	ror	r25
    15ee:	87 95       	ror	r24
    15f0:	08 95       	ret

000015f2 <__cmpsf2>:
    15f2:	0e 94 9f 0b 	call	0x173e	; 0x173e <__fp_cmp>
    15f6:	08 f4       	brcc	.+2      	; 0x15fa <__cmpsf2+0x8>
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	08 95       	ret

000015fc <__divsf3>:
    15fc:	0e 94 12 0b 	call	0x1624	; 0x1624 <__divsf3x>
    1600:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__fp_round>
    1604:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fp_pscB>
    1608:	58 f0       	brcs	.+22     	; 0x1620 <__divsf3+0x24>
    160a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fp_pscA>
    160e:	40 f0       	brcs	.+16     	; 0x1620 <__divsf3+0x24>
    1610:	29 f4       	brne	.+10     	; 0x161c <__divsf3+0x20>
    1612:	5f 3f       	cpi	r21, 0xFF	; 255
    1614:	29 f0       	breq	.+10     	; 0x1620 <__divsf3+0x24>
    1616:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>
    161a:	51 11       	cpse	r21, r1
    161c:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>
    1620:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_nan>

00001624 <__divsf3x>:
    1624:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_split3>
    1628:	68 f3       	brcs	.-38     	; 0x1604 <__divsf3+0x8>

0000162a <__divsf3_pse>:
    162a:	99 23       	and	r25, r25
    162c:	b1 f3       	breq	.-20     	; 0x161a <__divsf3+0x1e>
    162e:	55 23       	and	r21, r21
    1630:	91 f3       	breq	.-28     	; 0x1616 <__divsf3+0x1a>
    1632:	95 1b       	sub	r25, r21
    1634:	55 0b       	sbc	r21, r21
    1636:	bb 27       	eor	r27, r27
    1638:	aa 27       	eor	r26, r26
    163a:	62 17       	cp	r22, r18
    163c:	73 07       	cpc	r23, r19
    163e:	84 07       	cpc	r24, r20
    1640:	38 f0       	brcs	.+14     	; 0x1650 <__divsf3_pse+0x26>
    1642:	9f 5f       	subi	r25, 0xFF	; 255
    1644:	5f 4f       	sbci	r21, 0xFF	; 255
    1646:	22 0f       	add	r18, r18
    1648:	33 1f       	adc	r19, r19
    164a:	44 1f       	adc	r20, r20
    164c:	aa 1f       	adc	r26, r26
    164e:	a9 f3       	breq	.-22     	; 0x163a <__divsf3_pse+0x10>
    1650:	35 d0       	rcall	.+106    	; 0x16bc <__divsf3_pse+0x92>
    1652:	0e 2e       	mov	r0, r30
    1654:	3a f0       	brmi	.+14     	; 0x1664 <__divsf3_pse+0x3a>
    1656:	e0 e8       	ldi	r30, 0x80	; 128
    1658:	32 d0       	rcall	.+100    	; 0x16be <__divsf3_pse+0x94>
    165a:	91 50       	subi	r25, 0x01	; 1
    165c:	50 40       	sbci	r21, 0x00	; 0
    165e:	e6 95       	lsr	r30
    1660:	00 1c       	adc	r0, r0
    1662:	ca f7       	brpl	.-14     	; 0x1656 <__divsf3_pse+0x2c>
    1664:	2b d0       	rcall	.+86     	; 0x16bc <__divsf3_pse+0x92>
    1666:	fe 2f       	mov	r31, r30
    1668:	29 d0       	rcall	.+82     	; 0x16bc <__divsf3_pse+0x92>
    166a:	66 0f       	add	r22, r22
    166c:	77 1f       	adc	r23, r23
    166e:	88 1f       	adc	r24, r24
    1670:	bb 1f       	adc	r27, r27
    1672:	26 17       	cp	r18, r22
    1674:	37 07       	cpc	r19, r23
    1676:	48 07       	cpc	r20, r24
    1678:	ab 07       	cpc	r26, r27
    167a:	b0 e8       	ldi	r27, 0x80	; 128
    167c:	09 f0       	breq	.+2      	; 0x1680 <__divsf3_pse+0x56>
    167e:	bb 0b       	sbc	r27, r27
    1680:	80 2d       	mov	r24, r0
    1682:	bf 01       	movw	r22, r30
    1684:	ff 27       	eor	r31, r31
    1686:	93 58       	subi	r25, 0x83	; 131
    1688:	5f 4f       	sbci	r21, 0xFF	; 255
    168a:	3a f0       	brmi	.+14     	; 0x169a <__divsf3_pse+0x70>
    168c:	9e 3f       	cpi	r25, 0xFE	; 254
    168e:	51 05       	cpc	r21, r1
    1690:	78 f0       	brcs	.+30     	; 0x16b0 <__divsf3_pse+0x86>
    1692:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>
    1696:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>
    169a:	5f 3f       	cpi	r21, 0xFF	; 255
    169c:	e4 f3       	brlt	.-8      	; 0x1696 <__divsf3_pse+0x6c>
    169e:	98 3e       	cpi	r25, 0xE8	; 232
    16a0:	d4 f3       	brlt	.-12     	; 0x1696 <__divsf3_pse+0x6c>
    16a2:	86 95       	lsr	r24
    16a4:	77 95       	ror	r23
    16a6:	67 95       	ror	r22
    16a8:	b7 95       	ror	r27
    16aa:	f7 95       	ror	r31
    16ac:	9f 5f       	subi	r25, 0xFF	; 255
    16ae:	c9 f7       	brne	.-14     	; 0x16a2 <__divsf3_pse+0x78>
    16b0:	88 0f       	add	r24, r24
    16b2:	91 1d       	adc	r25, r1
    16b4:	96 95       	lsr	r25
    16b6:	87 95       	ror	r24
    16b8:	97 f9       	bld	r25, 7
    16ba:	08 95       	ret
    16bc:	e1 e0       	ldi	r30, 0x01	; 1
    16be:	66 0f       	add	r22, r22
    16c0:	77 1f       	adc	r23, r23
    16c2:	88 1f       	adc	r24, r24
    16c4:	bb 1f       	adc	r27, r27
    16c6:	62 17       	cp	r22, r18
    16c8:	73 07       	cpc	r23, r19
    16ca:	84 07       	cpc	r24, r20
    16cc:	ba 07       	cpc	r27, r26
    16ce:	20 f0       	brcs	.+8      	; 0x16d8 <__divsf3_pse+0xae>
    16d0:	62 1b       	sub	r22, r18
    16d2:	73 0b       	sbc	r23, r19
    16d4:	84 0b       	sbc	r24, r20
    16d6:	ba 0b       	sbc	r27, r26
    16d8:	ee 1f       	adc	r30, r30
    16da:	88 f7       	brcc	.-30     	; 0x16be <__divsf3_pse+0x94>
    16dc:	e0 95       	com	r30
    16de:	08 95       	ret

000016e0 <__fixunssfsi>:
    16e0:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fp_splitA>
    16e4:	88 f0       	brcs	.+34     	; 0x1708 <__fixunssfsi+0x28>
    16e6:	9f 57       	subi	r25, 0x7F	; 127
    16e8:	98 f0       	brcs	.+38     	; 0x1710 <__fixunssfsi+0x30>
    16ea:	b9 2f       	mov	r27, r25
    16ec:	99 27       	eor	r25, r25
    16ee:	b7 51       	subi	r27, 0x17	; 23
    16f0:	b0 f0       	brcs	.+44     	; 0x171e <__fixunssfsi+0x3e>
    16f2:	e1 f0       	breq	.+56     	; 0x172c <__fixunssfsi+0x4c>
    16f4:	66 0f       	add	r22, r22
    16f6:	77 1f       	adc	r23, r23
    16f8:	88 1f       	adc	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	1a f0       	brmi	.+6      	; 0x1704 <__fixunssfsi+0x24>
    16fe:	ba 95       	dec	r27
    1700:	c9 f7       	brne	.-14     	; 0x16f4 <__fixunssfsi+0x14>
    1702:	14 c0       	rjmp	.+40     	; 0x172c <__fixunssfsi+0x4c>
    1704:	b1 30       	cpi	r27, 0x01	; 1
    1706:	91 f0       	breq	.+36     	; 0x172c <__fixunssfsi+0x4c>
    1708:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fp_zero>
    170c:	b1 e0       	ldi	r27, 0x01	; 1
    170e:	08 95       	ret
    1710:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__fp_zero>
    1714:	67 2f       	mov	r22, r23
    1716:	78 2f       	mov	r23, r24
    1718:	88 27       	eor	r24, r24
    171a:	b8 5f       	subi	r27, 0xF8	; 248
    171c:	39 f0       	breq	.+14     	; 0x172c <__fixunssfsi+0x4c>
    171e:	b9 3f       	cpi	r27, 0xF9	; 249
    1720:	cc f3       	brlt	.-14     	; 0x1714 <__fixunssfsi+0x34>
    1722:	86 95       	lsr	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	b3 95       	inc	r27
    172a:	d9 f7       	brne	.-10     	; 0x1722 <__fixunssfsi+0x42>
    172c:	3e f4       	brtc	.+14     	; 0x173c <__fixunssfsi+0x5c>
    172e:	90 95       	com	r25
    1730:	80 95       	com	r24
    1732:	70 95       	com	r23
    1734:	61 95       	neg	r22
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	8f 4f       	sbci	r24, 0xFF	; 255
    173a:	9f 4f       	sbci	r25, 0xFF	; 255
    173c:	08 95       	ret

0000173e <__fp_cmp>:
    173e:	99 0f       	add	r25, r25
    1740:	00 08       	sbc	r0, r0
    1742:	55 0f       	add	r21, r21
    1744:	aa 0b       	sbc	r26, r26
    1746:	e0 e8       	ldi	r30, 0x80	; 128
    1748:	fe ef       	ldi	r31, 0xFE	; 254
    174a:	16 16       	cp	r1, r22
    174c:	17 06       	cpc	r1, r23
    174e:	e8 07       	cpc	r30, r24
    1750:	f9 07       	cpc	r31, r25
    1752:	c0 f0       	brcs	.+48     	; 0x1784 <__fp_cmp+0x46>
    1754:	12 16       	cp	r1, r18
    1756:	13 06       	cpc	r1, r19
    1758:	e4 07       	cpc	r30, r20
    175a:	f5 07       	cpc	r31, r21
    175c:	98 f0       	brcs	.+38     	; 0x1784 <__fp_cmp+0x46>
    175e:	62 1b       	sub	r22, r18
    1760:	73 0b       	sbc	r23, r19
    1762:	84 0b       	sbc	r24, r20
    1764:	95 0b       	sbc	r25, r21
    1766:	39 f4       	brne	.+14     	; 0x1776 <__fp_cmp+0x38>
    1768:	0a 26       	eor	r0, r26
    176a:	61 f0       	breq	.+24     	; 0x1784 <__fp_cmp+0x46>
    176c:	23 2b       	or	r18, r19
    176e:	24 2b       	or	r18, r20
    1770:	25 2b       	or	r18, r21
    1772:	21 f4       	brne	.+8      	; 0x177c <__fp_cmp+0x3e>
    1774:	08 95       	ret
    1776:	0a 26       	eor	r0, r26
    1778:	09 f4       	brne	.+2      	; 0x177c <__fp_cmp+0x3e>
    177a:	a1 40       	sbci	r26, 0x01	; 1
    177c:	a6 95       	lsr	r26
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	81 1d       	adc	r24, r1
    1782:	81 1d       	adc	r24, r1
    1784:	08 95       	ret

00001786 <__fp_inf>:
    1786:	97 f9       	bld	r25, 7
    1788:	9f 67       	ori	r25, 0x7F	; 127
    178a:	80 e8       	ldi	r24, 0x80	; 128
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	08 95       	ret

00001792 <__fp_nan>:
    1792:	9f ef       	ldi	r25, 0xFF	; 255
    1794:	80 ec       	ldi	r24, 0xC0	; 192
    1796:	08 95       	ret

00001798 <__fp_pscA>:
    1798:	00 24       	eor	r0, r0
    179a:	0a 94       	dec	r0
    179c:	16 16       	cp	r1, r22
    179e:	17 06       	cpc	r1, r23
    17a0:	18 06       	cpc	r1, r24
    17a2:	09 06       	cpc	r0, r25
    17a4:	08 95       	ret

000017a6 <__fp_pscB>:
    17a6:	00 24       	eor	r0, r0
    17a8:	0a 94       	dec	r0
    17aa:	12 16       	cp	r1, r18
    17ac:	13 06       	cpc	r1, r19
    17ae:	14 06       	cpc	r1, r20
    17b0:	05 06       	cpc	r0, r21
    17b2:	08 95       	ret

000017b4 <__fp_round>:
    17b4:	09 2e       	mov	r0, r25
    17b6:	03 94       	inc	r0
    17b8:	00 0c       	add	r0, r0
    17ba:	11 f4       	brne	.+4      	; 0x17c0 <__fp_round+0xc>
    17bc:	88 23       	and	r24, r24
    17be:	52 f0       	brmi	.+20     	; 0x17d4 <__fp_round+0x20>
    17c0:	bb 0f       	add	r27, r27
    17c2:	40 f4       	brcc	.+16     	; 0x17d4 <__fp_round+0x20>
    17c4:	bf 2b       	or	r27, r31
    17c6:	11 f4       	brne	.+4      	; 0x17cc <__fp_round+0x18>
    17c8:	60 ff       	sbrs	r22, 0
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <__fp_round+0x20>
    17cc:	6f 5f       	subi	r22, 0xFF	; 255
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	8f 4f       	sbci	r24, 0xFF	; 255
    17d2:	9f 4f       	sbci	r25, 0xFF	; 255
    17d4:	08 95       	ret

000017d6 <__fp_split3>:
    17d6:	57 fd       	sbrc	r21, 7
    17d8:	90 58       	subi	r25, 0x80	; 128
    17da:	44 0f       	add	r20, r20
    17dc:	55 1f       	adc	r21, r21
    17de:	59 f0       	breq	.+22     	; 0x17f6 <__fp_splitA+0x10>
    17e0:	5f 3f       	cpi	r21, 0xFF	; 255
    17e2:	71 f0       	breq	.+28     	; 0x1800 <__fp_splitA+0x1a>
    17e4:	47 95       	ror	r20

000017e6 <__fp_splitA>:
    17e6:	88 0f       	add	r24, r24
    17e8:	97 fb       	bst	r25, 7
    17ea:	99 1f       	adc	r25, r25
    17ec:	61 f0       	breq	.+24     	; 0x1806 <__fp_splitA+0x20>
    17ee:	9f 3f       	cpi	r25, 0xFF	; 255
    17f0:	79 f0       	breq	.+30     	; 0x1810 <__fp_splitA+0x2a>
    17f2:	87 95       	ror	r24
    17f4:	08 95       	ret
    17f6:	12 16       	cp	r1, r18
    17f8:	13 06       	cpc	r1, r19
    17fa:	14 06       	cpc	r1, r20
    17fc:	55 1f       	adc	r21, r21
    17fe:	f2 cf       	rjmp	.-28     	; 0x17e4 <__fp_split3+0xe>
    1800:	46 95       	lsr	r20
    1802:	f1 df       	rcall	.-30     	; 0x17e6 <__fp_splitA>
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <__fp_splitA+0x30>
    1806:	16 16       	cp	r1, r22
    1808:	17 06       	cpc	r1, r23
    180a:	18 06       	cpc	r1, r24
    180c:	99 1f       	adc	r25, r25
    180e:	f1 cf       	rjmp	.-30     	; 0x17f2 <__fp_splitA+0xc>
    1810:	86 95       	lsr	r24
    1812:	71 05       	cpc	r23, r1
    1814:	61 05       	cpc	r22, r1
    1816:	08 94       	sec
    1818:	08 95       	ret

0000181a <__fp_zero>:
    181a:	e8 94       	clt

0000181c <__fp_szero>:
    181c:	bb 27       	eor	r27, r27
    181e:	66 27       	eor	r22, r22
    1820:	77 27       	eor	r23, r23
    1822:	cb 01       	movw	r24, r22
    1824:	97 f9       	bld	r25, 7
    1826:	08 95       	ret

00001828 <__gesf2>:
    1828:	0e 94 9f 0b 	call	0x173e	; 0x173e <__fp_cmp>
    182c:	08 f4       	brcc	.+2      	; 0x1830 <__gesf2+0x8>
    182e:	8f ef       	ldi	r24, 0xFF	; 255
    1830:	08 95       	ret

00001832 <__mulsf3>:
    1832:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3x>
    1836:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__fp_round>
    183a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fp_pscA>
    183e:	38 f0       	brcs	.+14     	; 0x184e <__mulsf3+0x1c>
    1840:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fp_pscB>
    1844:	20 f0       	brcs	.+8      	; 0x184e <__mulsf3+0x1c>
    1846:	95 23       	and	r25, r21
    1848:	11 f0       	breq	.+4      	; 0x184e <__mulsf3+0x1c>
    184a:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>
    184e:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_nan>
    1852:	11 24       	eor	r1, r1
    1854:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>

00001858 <__mulsf3x>:
    1858:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_split3>
    185c:	70 f3       	brcs	.-36     	; 0x183a <__mulsf3+0x8>

0000185e <__mulsf3_pse>:
    185e:	95 9f       	mul	r25, r21
    1860:	c1 f3       	breq	.-16     	; 0x1852 <__mulsf3+0x20>
    1862:	95 0f       	add	r25, r21
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	55 1f       	adc	r21, r21
    1868:	62 9f       	mul	r22, r18
    186a:	f0 01       	movw	r30, r0
    186c:	72 9f       	mul	r23, r18
    186e:	bb 27       	eor	r27, r27
    1870:	f0 0d       	add	r31, r0
    1872:	b1 1d       	adc	r27, r1
    1874:	63 9f       	mul	r22, r19
    1876:	aa 27       	eor	r26, r26
    1878:	f0 0d       	add	r31, r0
    187a:	b1 1d       	adc	r27, r1
    187c:	aa 1f       	adc	r26, r26
    187e:	64 9f       	mul	r22, r20
    1880:	66 27       	eor	r22, r22
    1882:	b0 0d       	add	r27, r0
    1884:	a1 1d       	adc	r26, r1
    1886:	66 1f       	adc	r22, r22
    1888:	82 9f       	mul	r24, r18
    188a:	22 27       	eor	r18, r18
    188c:	b0 0d       	add	r27, r0
    188e:	a1 1d       	adc	r26, r1
    1890:	62 1f       	adc	r22, r18
    1892:	73 9f       	mul	r23, r19
    1894:	b0 0d       	add	r27, r0
    1896:	a1 1d       	adc	r26, r1
    1898:	62 1f       	adc	r22, r18
    189a:	83 9f       	mul	r24, r19
    189c:	a0 0d       	add	r26, r0
    189e:	61 1d       	adc	r22, r1
    18a0:	22 1f       	adc	r18, r18
    18a2:	74 9f       	mul	r23, r20
    18a4:	33 27       	eor	r19, r19
    18a6:	a0 0d       	add	r26, r0
    18a8:	61 1d       	adc	r22, r1
    18aa:	23 1f       	adc	r18, r19
    18ac:	84 9f       	mul	r24, r20
    18ae:	60 0d       	add	r22, r0
    18b0:	21 1d       	adc	r18, r1
    18b2:	82 2f       	mov	r24, r18
    18b4:	76 2f       	mov	r23, r22
    18b6:	6a 2f       	mov	r22, r26
    18b8:	11 24       	eor	r1, r1
    18ba:	9f 57       	subi	r25, 0x7F	; 127
    18bc:	50 40       	sbci	r21, 0x00	; 0
    18be:	9a f0       	brmi	.+38     	; 0x18e6 <__mulsf3_pse+0x88>
    18c0:	f1 f0       	breq	.+60     	; 0x18fe <__mulsf3_pse+0xa0>
    18c2:	88 23       	and	r24, r24
    18c4:	4a f0       	brmi	.+18     	; 0x18d8 <__mulsf3_pse+0x7a>
    18c6:	ee 0f       	add	r30, r30
    18c8:	ff 1f       	adc	r31, r31
    18ca:	bb 1f       	adc	r27, r27
    18cc:	66 1f       	adc	r22, r22
    18ce:	77 1f       	adc	r23, r23
    18d0:	88 1f       	adc	r24, r24
    18d2:	91 50       	subi	r25, 0x01	; 1
    18d4:	50 40       	sbci	r21, 0x00	; 0
    18d6:	a9 f7       	brne	.-22     	; 0x18c2 <__mulsf3_pse+0x64>
    18d8:	9e 3f       	cpi	r25, 0xFE	; 254
    18da:	51 05       	cpc	r21, r1
    18dc:	80 f0       	brcs	.+32     	; 0x18fe <__mulsf3_pse+0xa0>
    18de:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>
    18e2:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>
    18e6:	5f 3f       	cpi	r21, 0xFF	; 255
    18e8:	e4 f3       	brlt	.-8      	; 0x18e2 <__mulsf3_pse+0x84>
    18ea:	98 3e       	cpi	r25, 0xE8	; 232
    18ec:	d4 f3       	brlt	.-12     	; 0x18e2 <__mulsf3_pse+0x84>
    18ee:	86 95       	lsr	r24
    18f0:	77 95       	ror	r23
    18f2:	67 95       	ror	r22
    18f4:	b7 95       	ror	r27
    18f6:	f7 95       	ror	r31
    18f8:	e7 95       	ror	r30
    18fa:	9f 5f       	subi	r25, 0xFF	; 255
    18fc:	c1 f7       	brne	.-16     	; 0x18ee <__mulsf3_pse+0x90>
    18fe:	fe 2b       	or	r31, r30
    1900:	88 0f       	add	r24, r24
    1902:	91 1d       	adc	r25, r1
    1904:	96 95       	lsr	r25
    1906:	87 95       	ror	r24
    1908:	97 f9       	bld	r25, 7
    190a:	08 95       	ret

0000190c <__udivmodsi4>:
    190c:	a1 e2       	ldi	r26, 0x21	; 33
    190e:	1a 2e       	mov	r1, r26
    1910:	aa 1b       	sub	r26, r26
    1912:	bb 1b       	sub	r27, r27
    1914:	fd 01       	movw	r30, r26
    1916:	0d c0       	rjmp	.+26     	; 0x1932 <__udivmodsi4_ep>

00001918 <__udivmodsi4_loop>:
    1918:	aa 1f       	adc	r26, r26
    191a:	bb 1f       	adc	r27, r27
    191c:	ee 1f       	adc	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	a2 17       	cp	r26, r18
    1922:	b3 07       	cpc	r27, r19
    1924:	e4 07       	cpc	r30, r20
    1926:	f5 07       	cpc	r31, r21
    1928:	20 f0       	brcs	.+8      	; 0x1932 <__udivmodsi4_ep>
    192a:	a2 1b       	sub	r26, r18
    192c:	b3 0b       	sbc	r27, r19
    192e:	e4 0b       	sbc	r30, r20
    1930:	f5 0b       	sbc	r31, r21

00001932 <__udivmodsi4_ep>:
    1932:	66 1f       	adc	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	88 1f       	adc	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	1a 94       	dec	r1
    193c:	69 f7       	brne	.-38     	; 0x1918 <__udivmodsi4_loop>
    193e:	60 95       	com	r22
    1940:	70 95       	com	r23
    1942:	80 95       	com	r24
    1944:	90 95       	com	r25
    1946:	9b 01       	movw	r18, r22
    1948:	ac 01       	movw	r20, r24
    194a:	bd 01       	movw	r22, r26
    194c:	cf 01       	movw	r24, r30
    194e:	08 95       	ret

00001950 <_exit>:
    1950:	f8 94       	cli

00001952 <__stop_program>:
    1952:	ff cf       	rjmp	.-2      	; 0x1952 <__stop_program>
