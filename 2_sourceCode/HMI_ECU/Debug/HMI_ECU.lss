
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000af0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001adc  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000162a  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6d 05 	call	0xada	; 0xada <main>
  64:	0c 94 76 05 	jmp	0xaec	; 0xaec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <mcal_port_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

port_error_t mcal_port_init(u8_t base, portState dir)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <mcal_port_init+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <mcal_port_init+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8a 83       	std	Y+2, r24	; 0x02
  7c:	6b 83       	std	Y+3, r22	; 0x03
	port_error_t error = PORT_STATE_SUCCESS;
  7e:	19 82       	std	Y+1, r1	; 0x01

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
  80:	8a 81       	ldd	r24, Y+2	; 0x02
  82:	89 33       	cpi	r24, 0x39	; 57
  84:	49 f0       	breq	.+18     	; 0x98 <mcal_port_init+0x2c>
  86:	8a 81       	ldd	r24, Y+2	; 0x02
  88:	86 33       	cpi	r24, 0x36	; 54
  8a:	31 f0       	breq	.+12     	; 0x98 <mcal_port_init+0x2c>
  8c:	8a 81       	ldd	r24, Y+2	; 0x02
  8e:	83 33       	cpi	r24, 0x33	; 51
  90:	19 f0       	breq	.+6      	; 0x98 <mcal_port_init+0x2c>
  92:	8a 81       	ldd	r24, Y+2	; 0x02
  94:	80 33       	cpi	r24, 0x30	; 48
  96:	d1 f5       	brne	.+116    	; 0x10c <mcal_port_init+0xa0>
	{
		switch (dir)
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	28 2f       	mov	r18, r24
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	3d 83       	std	Y+5, r19	; 0x05
  a0:	2c 83       	std	Y+4, r18	; 0x04
  a2:	8c 81       	ldd	r24, Y+4	; 0x04
  a4:	9d 81       	ldd	r25, Y+5	; 0x05
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	91 05       	cpc	r25, r1
  aa:	91 f0       	breq	.+36     	; 0xd0 <mcal_port_init+0x64>
  ac:	2c 81       	ldd	r18, Y+4	; 0x04
  ae:	3d 81       	ldd	r19, Y+5	; 0x05
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	31 05       	cpc	r19, r1
  b4:	29 f0       	breq	.+10     	; 0xc0 <mcal_port_init+0x54>
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	9d 81       	ldd	r25, Y+5	; 0x05
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	b1 f0       	breq	.+44     	; 0xea <mcal_port_init+0x7e>
  be:	23 c0       	rjmp	.+70     	; 0x106 <mcal_port_init+0x9a>
		{
		case DIR_PORT_OUTPUT:
			reg_write(base + OFFSET_DIR, PORT_OUTPUT_DIR);
  c0:	8a 81       	ldd	r24, Y+2	; 0x02
  c2:	88 2f       	mov	r24, r24
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	fc 01       	movw	r30, r24
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	80 83       	st	Z, r24
  ce:	20 c0       	rjmp	.+64     	; 0x110 <mcal_port_init+0xa4>
			break;

		case DIR_PORT_INPUT_PULLDOWN:
			reg_write(base + OFFSET_DIR, PORT_INPUT_DIR);
  d0:	8a 81       	ldd	r24, Y+2	; 0x02
  d2:	88 2f       	mov	r24, r24
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	fc 01       	movw	r30, r24
  da:	10 82       	st	Z, r1
			reg_write(base + OFFSET_PORT, PORT_OFF);
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	88 2f       	mov	r24, r24
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 96       	adiw	r24, 0x02	; 2
  e4:	fc 01       	movw	r30, r24
  e6:	10 82       	st	Z, r1
  e8:	13 c0       	rjmp	.+38     	; 0x110 <mcal_port_init+0xa4>
			break;

		case DIR_PORT_INPUT_PULLUP:
			reg_write(base + OFFSET_DIR, PORT_INPUT_DIR);
  ea:	8a 81       	ldd	r24, Y+2	; 0x02
  ec:	88 2f       	mov	r24, r24
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	fc 01       	movw	r30, r24
  f4:	10 82       	st	Z, r1
			reg_write(base + OFFSET_PORT, PORT_ON);
  f6:	8a 81       	ldd	r24, Y+2	; 0x02
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 96       	adiw	r24, 0x02	; 2
  fe:	fc 01       	movw	r30, r24
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	80 83       	st	Z, r24
 104:	05 c0       	rjmp	.+10     	; 0x110 <mcal_port_init+0xa4>
			break;

		default:
			error = PORT_STATE_INVALID_DIR;
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	02 c0       	rjmp	.+4      	; 0x110 <mcal_port_init+0xa4>
			break;
		}
	}
	else
	{
		error = PORT_STATE_INVALID_ADDR;
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	89 83       	std	Y+1, r24	; 0x01
	}

	return error;
 110:	89 81       	ldd	r24, Y+1	; 0x01
}
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <mcal_port_write>:

port_error_t mcal_port_write(u8_t base, u8_t value)
{
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	00 d0       	rcall	.+0      	; 0x128 <mcal_port_write+0x6>
 128:	0f 92       	push	r0
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	8a 83       	std	Y+2, r24	; 0x02
 130:	6b 83       	std	Y+3, r22	; 0x03
	port_error_t error = PORT_STATE_SUCCESS;
 132:	19 82       	std	Y+1, r1	; 0x01

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	89 33       	cpi	r24, 0x39	; 57
 138:	49 f0       	breq	.+18     	; 0x14c <mcal_port_write+0x2a>
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	86 33       	cpi	r24, 0x36	; 54
 13e:	31 f0       	breq	.+12     	; 0x14c <mcal_port_write+0x2a>
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	83 33       	cpi	r24, 0x33	; 51
 144:	19 f0       	breq	.+6      	; 0x14c <mcal_port_write+0x2a>
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	80 33       	cpi	r24, 0x30	; 48
 14a:	41 f4       	brne	.+16     	; 0x15c <mcal_port_write+0x3a>
	{
		reg_write(base + OFFSET_PORT, value);
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 96       	adiw	r24, 0x02	; 2
 154:	fc 01       	movw	r30, r24
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	80 83       	st	Z, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <mcal_port_write+0x3e>
	}
	else
	{
		error = PORT_STATE_INVALID_ADDR;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	89 83       	std	Y+1, r24	; 0x01
	}

	return error;
 160:	89 81       	ldd	r24, Y+1	; 0x01
}
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	cf 91       	pop	r28
 16a:	df 91       	pop	r29
 16c:	08 95       	ret

0000016e <mcal_port_read>:

port_error_t mcal_port_read(u8_t base, u8_t *value)
{
 16e:	df 93       	push	r29
 170:	cf 93       	push	r28
 172:	00 d0       	rcall	.+0      	; 0x174 <mcal_port_read+0x6>
 174:	00 d0       	rcall	.+0      	; 0x176 <mcal_port_read+0x8>
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	8a 83       	std	Y+2, r24	; 0x02
 17c:	7c 83       	std	Y+4, r23	; 0x04
 17e:	6b 83       	std	Y+3, r22	; 0x03
	port_error_t error = PORT_STATE_SUCCESS;
 180:	19 82       	std	Y+1, r1	; 0x01

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	89 33       	cpi	r24, 0x39	; 57
 186:	49 f0       	breq	.+18     	; 0x19a <mcal_port_read+0x2c>
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	86 33       	cpi	r24, 0x36	; 54
 18c:	31 f0       	breq	.+12     	; 0x19a <mcal_port_read+0x2c>
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	83 33       	cpi	r24, 0x33	; 51
 192:	19 f0       	breq	.+6      	; 0x19a <mcal_port_read+0x2c>
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	80 33       	cpi	r24, 0x30	; 48
 198:	49 f4       	brne	.+18     	; 0x1ac <mcal_port_read+0x3e>
	{
		reg_read(base + OFFSET_PIN, value);
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	88 2f       	mov	r24, r24
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	dc 01       	movw	r26, r24
 1a2:	eb 81       	ldd	r30, Y+3	; 0x03
 1a4:	fc 81       	ldd	r31, Y+4	; 0x04
 1a6:	80 81       	ld	r24, Z
 1a8:	8c 93       	st	X, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <mcal_port_read+0x42>
	}
	else
	{
		error = PORT_STATE_INVALID_ADDR;
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return error;
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	08 95       	ret

000001c0 <mcal_interrupt_initialize>:
/*                     Functions Implementation                          */
/*************************************************************************/

interrupt_error mcal_interrupt_initialize(u8_t interruptNo,
		interrupt_mode_t mode)
{
 1c0:	df 93       	push	r29
 1c2:	cf 93       	push	r28
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	2b 97       	sbiw	r28, 0x0b	; 11
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	cd bf       	out	0x3d, r28	; 61
 1d4:	8a 83       	std	Y+2, r24	; 0x02
 1d6:	6b 83       	std	Y+3, r22	; 0x03
	interrupt_error error = INTERRUPT_STATE_SUCCESS;
 1d8:	19 82       	std	Y+1, r1	; 0x01

	/*enable global interrupts*/
	setGlobalInterrupt;
 1da:	af e5       	ldi	r26, 0x5F	; 95
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	ef e5       	ldi	r30, 0x5F	; 95
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	8c 93       	st	X, r24

	switch (interruptNo)
 1e8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	3b 87       	std	Y+11, r19	; 0x0b
 1f0:	2a 87       	std	Y+10, r18	; 0x0a
 1f2:	8a 85       	ldd	r24, Y+10	; 0x0a
 1f4:	9b 85       	ldd	r25, Y+11	; 0x0b
 1f6:	86 30       	cpi	r24, 0x06	; 6
 1f8:	91 05       	cpc	r25, r1
 1fa:	69 f0       	breq	.+26     	; 0x216 <mcal_interrupt_initialize+0x56>
 1fc:	2a 85       	ldd	r18, Y+10	; 0x0a
 1fe:	3b 85       	ldd	r19, Y+11	; 0x0b
 200:	27 30       	cpi	r18, 0x07	; 7
 202:	31 05       	cpc	r19, r1
 204:	09 f4       	brne	.+2      	; 0x208 <mcal_interrupt_initialize+0x48>
 206:	51 c0       	rjmp	.+162    	; 0x2aa <mcal_interrupt_initialize+0xea>
 208:	8a 85       	ldd	r24, Y+10	; 0x0a
 20a:	9b 85       	ldd	r25, Y+11	; 0x0b
 20c:	85 30       	cpi	r24, 0x05	; 5
 20e:	91 05       	cpc	r25, r1
 210:	09 f4       	brne	.+2      	; 0x214 <mcal_interrupt_initialize+0x54>
 212:	95 c0       	rjmp	.+298    	; 0x33e <mcal_interrupt_initialize+0x17e>
 214:	bd c0       	rjmp	.+378    	; 0x390 <mcal_interrupt_initialize+0x1d0>
	{

	case INT0:
	{
		/*enable interrupt 0 */
		set_bit(GICR, INT0);
 216:	ab e5       	ldi	r26, 0x5B	; 91
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	eb e5       	ldi	r30, 0x5B	; 91
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	80 64       	ori	r24, 0x40	; 64
 222:	8c 93       	st	X, r24

		switch (mode)
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	39 87       	std	Y+9, r19	; 0x09
 22c:	28 87       	std	Y+8, r18	; 0x08
 22e:	88 85       	ldd	r24, Y+8	; 0x08
 230:	99 85       	ldd	r25, Y+9	; 0x09
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	91 05       	cpc	r25, r1
 236:	c1 f0       	breq	.+48     	; 0x268 <mcal_interrupt_initialize+0xa8>
 238:	28 85       	ldd	r18, Y+8	; 0x08
 23a:	39 85       	ldd	r19, Y+9	; 0x09
 23c:	22 30       	cpi	r18, 0x02	; 2
 23e:	31 05       	cpc	r19, r1
 240:	11 f1       	breq	.+68     	; 0x286 <mcal_interrupt_initialize+0xc6>
 242:	88 85       	ldd	r24, Y+8	; 0x08
 244:	99 85       	ldd	r25, Y+9	; 0x09
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	69 f5       	brne	.+90     	; 0x2a4 <mcal_interrupt_initialize+0xe4>
		{
		case RISING_EDGE:
			set_bit(MCUCR, ISC00);
 24a:	a5 e5       	ldi	r26, 0x55	; 85
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	e5 e5       	ldi	r30, 0x55	; 85
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	81 60       	ori	r24, 0x01	; 1
 256:	8c 93       	st	X, r24
			set_bit(MCUCR, ISC01);
 258:	a5 e5       	ldi	r26, 0x55	; 85
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	e5 e5       	ldi	r30, 0x55	; 85
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	82 60       	ori	r24, 0x02	; 2
 264:	8c 93       	st	X, r24
 266:	96 c0       	rjmp	.+300    	; 0x394 <mcal_interrupt_initialize+0x1d4>
			break;

		case FALLING_EDGE:
			set_bit(MCUCR, ISC01);
 268:	a5 e5       	ldi	r26, 0x55	; 85
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	e5 e5       	ldi	r30, 0x55	; 85
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	82 60       	ori	r24, 0x02	; 2
 274:	8c 93       	st	X, r24
			clr_bit(MCUCR, ISC00);
 276:	a5 e5       	ldi	r26, 0x55	; 85
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	e5 e5       	ldi	r30, 0x55	; 85
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	8e 7f       	andi	r24, 0xFE	; 254
 282:	8c 93       	st	X, r24
 284:	87 c0       	rjmp	.+270    	; 0x394 <mcal_interrupt_initialize+0x1d4>
			break;

		case CHANGING_EDGE:
			set_bit(MCUCR, ISC00);
 286:	a5 e5       	ldi	r26, 0x55	; 85
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	e5 e5       	ldi	r30, 0x55	; 85
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	81 60       	ori	r24, 0x01	; 1
 292:	8c 93       	st	X, r24
			clr_bit(MCUCR, ISC01);
 294:	a5 e5       	ldi	r26, 0x55	; 85
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	e5 e5       	ldi	r30, 0x55	; 85
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	8d 7f       	andi	r24, 0xFD	; 253
 2a0:	8c 93       	st	X, r24
 2a2:	78 c0       	rjmp	.+240    	; 0x394 <mcal_interrupt_initialize+0x1d4>
			break;

		default:
			error = INTERRUPT_STATE_INVALID_OPERATION_MODE;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	89 83       	std	Y+1, r24	; 0x01
 2a8:	75 c0       	rjmp	.+234    	; 0x394 <mcal_interrupt_initialize+0x1d4>
	}

	case INT1:
	{
		/*enable interrupt 1 */
		set_bit(GICR, INT1);
 2aa:	ab e5       	ldi	r26, 0x5B	; 91
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	eb e5       	ldi	r30, 0x5B	; 91
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	8c 93       	st	X, r24

		switch (mode)
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	3f 83       	std	Y+7, r19	; 0x07
 2c0:	2e 83       	std	Y+6, r18	; 0x06
 2c2:	8e 81       	ldd	r24, Y+6	; 0x06
 2c4:	9f 81       	ldd	r25, Y+7	; 0x07
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	91 05       	cpc	r25, r1
 2ca:	c1 f0       	breq	.+48     	; 0x2fc <mcal_interrupt_initialize+0x13c>
 2cc:	2e 81       	ldd	r18, Y+6	; 0x06
 2ce:	3f 81       	ldd	r19, Y+7	; 0x07
 2d0:	22 30       	cpi	r18, 0x02	; 2
 2d2:	31 05       	cpc	r19, r1
 2d4:	11 f1       	breq	.+68     	; 0x31a <mcal_interrupt_initialize+0x15a>
 2d6:	8e 81       	ldd	r24, Y+6	; 0x06
 2d8:	9f 81       	ldd	r25, Y+7	; 0x07
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	69 f5       	brne	.+90     	; 0x338 <mcal_interrupt_initialize+0x178>
		{
		case RISING_EDGE:
			set_bit(MCUCR, ISC11);
 2de:	a5 e5       	ldi	r26, 0x55	; 85
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
 2e2:	e5 e5       	ldi	r30, 0x55	; 85
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	8c 93       	st	X, r24
			set_bit(MCUCR, ISC10);
 2ec:	a5 e5       	ldi	r26, 0x55	; 85
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	e5 e5       	ldi	r30, 0x55	; 85
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	84 60       	ori	r24, 0x04	; 4
 2f8:	8c 93       	st	X, r24
 2fa:	4c c0       	rjmp	.+152    	; 0x394 <mcal_interrupt_initialize+0x1d4>
			break;

		case FALLING_EDGE:
			set_bit(MCUCR, ISC11);
 2fc:	a5 e5       	ldi	r26, 0x55	; 85
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	e5 e5       	ldi	r30, 0x55	; 85
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	88 60       	ori	r24, 0x08	; 8
 308:	8c 93       	st	X, r24
			clr_bit(MCUCR, ISC10);
 30a:	a5 e5       	ldi	r26, 0x55	; 85
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	e5 e5       	ldi	r30, 0x55	; 85
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	8b 7f       	andi	r24, 0xFB	; 251
 316:	8c 93       	st	X, r24
 318:	3d c0       	rjmp	.+122    	; 0x394 <mcal_interrupt_initialize+0x1d4>
			break;

		case CHANGING_EDGE:
			set_bit(MCUCR, ISC10);
 31a:	a5 e5       	ldi	r26, 0x55	; 85
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	e5 e5       	ldi	r30, 0x55	; 85
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	84 60       	ori	r24, 0x04	; 4
 326:	8c 93       	st	X, r24
			clr_bit(MCUCR, ISC11);
 328:	a5 e5       	ldi	r26, 0x55	; 85
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	e5 e5       	ldi	r30, 0x55	; 85
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	87 7f       	andi	r24, 0xF7	; 247
 334:	8c 93       	st	X, r24
 336:	2e c0       	rjmp	.+92     	; 0x394 <mcal_interrupt_initialize+0x1d4>
			break;

		default:
			error = INTERRUPT_STATE_INVALID_OPERATION_MODE;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	89 83       	std	Y+1, r24	; 0x01
 33c:	2b c0       	rjmp	.+86     	; 0x394 <mcal_interrupt_initialize+0x1d4>
	}

	case INT2:
	{
		/*enable interrupt 2 */
		set_bit(GICR, INT2);
 33e:	ab e5       	ldi	r26, 0x5B	; 91
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	eb e5       	ldi	r30, 0x5B	; 91
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 62       	ori	r24, 0x20	; 32
 34a:	8c 93       	st	X, r24

		switch (mode)
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	3d 83       	std	Y+5, r19	; 0x05
 354:	2c 83       	std	Y+4, r18	; 0x04
 356:	8c 81       	ldd	r24, Y+4	; 0x04
 358:	9d 81       	ldd	r25, Y+5	; 0x05
 35a:	00 97       	sbiw	r24, 0x00	; 0
 35c:	31 f0       	breq	.+12     	; 0x36a <mcal_interrupt_initialize+0x1aa>
 35e:	2c 81       	ldd	r18, Y+4	; 0x04
 360:	3d 81       	ldd	r19, Y+5	; 0x05
 362:	21 30       	cpi	r18, 0x01	; 1
 364:	31 05       	cpc	r19, r1
 366:	49 f0       	breq	.+18     	; 0x37a <mcal_interrupt_initialize+0x1ba>
 368:	10 c0       	rjmp	.+32     	; 0x38a <mcal_interrupt_initialize+0x1ca>
		{
		case RISING_EDGE:
			set_bit(MCUCR, ISC2);
 36a:	a5 e5       	ldi	r26, 0x55	; 85
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	e5 e5       	ldi	r30, 0x55	; 85
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	80 64       	ori	r24, 0x40	; 64
 376:	8c 93       	st	X, r24
 378:	0d c0       	rjmp	.+26     	; 0x394 <mcal_interrupt_initialize+0x1d4>
			break;

		case FALLING_EDGE:
			clr_bit(MCUCSR, ISC2);
 37a:	a4 e5       	ldi	r26, 0x54	; 84
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	e4 e5       	ldi	r30, 0x54	; 84
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	8f 7b       	andi	r24, 0xBF	; 191
 386:	8c 93       	st	X, r24
 388:	05 c0       	rjmp	.+10     	; 0x394 <mcal_interrupt_initialize+0x1d4>
			break;

		default:
			error = INTERRUPT_STATE_INVALID_OPERATION_MODE;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	89 83       	std	Y+1, r24	; 0x01
 38e:	02 c0       	rjmp	.+4      	; 0x394 <mcal_interrupt_initialize+0x1d4>
		break;
	}

	default:
	{
		error = INTERRUPT_STATE_INVAILD_INTERRUPT_NUMBER;
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	89 83       	std	Y+1, r24	; 0x01
	}
	}
	return error;
 394:	89 81       	ldd	r24, Y+1	; 0x01
}
 396:	2b 96       	adiw	r28, 0x0b	; 11
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
 3a2:	cf 91       	pop	r28
 3a4:	df 91       	pop	r29
 3a6:	08 95       	ret

000003a8 <mcal_interrupt_read_flag>:

interrupt_error mcal_interrupt_read_flag(u8_t flag, u8_t *result)
{
 3a8:	df 93       	push	r29
 3aa:	cf 93       	push	r28
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	29 97       	sbiw	r28, 0x09	; 9
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	8a 83       	std	Y+2, r24	; 0x02
 3be:	7c 83       	std	Y+4, r23	; 0x04
 3c0:	6b 83       	std	Y+3, r22	; 0x03
	interrupt_error error = INTERRUPT_STATE_SUCCESS;
 3c2:	19 82       	std	Y+1, r1	; 0x01

	switch (flag)
 3c4:	8a 81       	ldd	r24, Y+2	; 0x02
 3c6:	28 2f       	mov	r18, r24
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	39 87       	std	Y+9, r19	; 0x09
 3cc:	28 87       	std	Y+8, r18	; 0x08
 3ce:	88 85       	ldd	r24, Y+8	; 0x08
 3d0:	99 85       	ldd	r25, Y+9	; 0x09
 3d2:	86 30       	cpi	r24, 0x06	; 6
 3d4:	91 05       	cpc	r25, r1
 3d6:	59 f0       	breq	.+22     	; 0x3ee <mcal_interrupt_read_flag+0x46>
 3d8:	28 85       	ldd	r18, Y+8	; 0x08
 3da:	39 85       	ldd	r19, Y+9	; 0x09
 3dc:	27 30       	cpi	r18, 0x07	; 7
 3de:	31 05       	cpc	r19, r1
 3e0:	b9 f0       	breq	.+46     	; 0x410 <mcal_interrupt_read_flag+0x68>
 3e2:	88 85       	ldd	r24, Y+8	; 0x08
 3e4:	99 85       	ldd	r25, Y+9	; 0x09
 3e6:	85 30       	cpi	r24, 0x05	; 5
 3e8:	91 05       	cpc	r25, r1
 3ea:	f9 f0       	breq	.+62     	; 0x42a <mcal_interrupt_read_flag+0x82>
 3ec:	2f c0       	rjmp	.+94     	; 0x44c <mcal_interrupt_read_flag+0xa4>
	{
	case INTF0:
		*result = bit_is_set(GIFR, INTF0);
 3ee:	ea e5       	ldi	r30, 0x5A	; 90
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	88 2f       	mov	r24, r24
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	80 74       	andi	r24, 0x40	; 64
 3fa:	90 70       	andi	r25, 0x00	; 0
 3fc:	1f 82       	std	Y+7, r1	; 0x07
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	11 f0       	breq	.+4      	; 0x406 <mcal_interrupt_read_flag+0x5e>
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	9f 83       	std	Y+7, r25	; 0x07
 406:	eb 81       	ldd	r30, Y+3	; 0x03
 408:	fc 81       	ldd	r31, Y+4	; 0x04
 40a:	2f 81       	ldd	r18, Y+7	; 0x07
 40c:	20 83       	st	Z, r18
 40e:	20 c0       	rjmp	.+64     	; 0x450 <mcal_interrupt_read_flag+0xa8>
		break;

	case INTF1:
		*result = bit_is_set(GIFR, INTF1);
 410:	ea e5       	ldi	r30, 0x5A	; 90
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	1e 82       	std	Y+6, r1	; 0x06
 418:	88 23       	and	r24, r24
 41a:	14 f4       	brge	.+4      	; 0x420 <mcal_interrupt_read_flag+0x78>
 41c:	31 e0       	ldi	r19, 0x01	; 1
 41e:	3e 83       	std	Y+6, r19	; 0x06
 420:	eb 81       	ldd	r30, Y+3	; 0x03
 422:	fc 81       	ldd	r31, Y+4	; 0x04
 424:	8e 81       	ldd	r24, Y+6	; 0x06
 426:	80 83       	st	Z, r24
 428:	13 c0       	rjmp	.+38     	; 0x450 <mcal_interrupt_read_flag+0xa8>
		break;

	case INTF2:
		*result = bit_is_set(GIFR, INTF2);
 42a:	ea e5       	ldi	r30, 0x5A	; 90
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	88 2f       	mov	r24, r24
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	80 72       	andi	r24, 0x20	; 32
 436:	90 70       	andi	r25, 0x00	; 0
 438:	1d 82       	std	Y+5, r1	; 0x05
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	11 f0       	breq	.+4      	; 0x442 <mcal_interrupt_read_flag+0x9a>
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	9d 83       	std	Y+5, r25	; 0x05
 442:	eb 81       	ldd	r30, Y+3	; 0x03
 444:	fc 81       	ldd	r31, Y+4	; 0x04
 446:	2d 81       	ldd	r18, Y+5	; 0x05
 448:	20 83       	st	Z, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <mcal_interrupt_read_flag+0xa8>
		break;

	default:
		error = INTERRUPT_STATE_INVAILD_INTERRUPT_NUMBER;
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return error;
 450:	89 81       	ldd	r24, Y+1	; 0x01
}
 452:	29 96       	adiw	r28, 0x09	; 9
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
 45e:	cf 91       	pop	r28
 460:	df 91       	pop	r29
 462:	08 95       	ret

00000464 <mcal_interrupt_clear_flag>:

interrupt_error mcal_interrupt_clear_flag(u8_t flag)
{
 464:	df 93       	push	r29
 466:	cf 93       	push	r28
 468:	00 d0       	rcall	.+0      	; 0x46a <mcal_interrupt_clear_flag+0x6>
 46a:	00 d0       	rcall	.+0      	; 0x46c <mcal_interrupt_clear_flag+0x8>
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	8a 83       	std	Y+2, r24	; 0x02
	interrupt_error error = INTERRUPT_STATE_SUCCESS;
 472:	19 82       	std	Y+1, r1	; 0x01

	switch (flag)
 474:	8a 81       	ldd	r24, Y+2	; 0x02
 476:	28 2f       	mov	r18, r24
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	3c 83       	std	Y+4, r19	; 0x04
 47c:	2b 83       	std	Y+3, r18	; 0x03
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	9c 81       	ldd	r25, Y+4	; 0x04
 482:	86 30       	cpi	r24, 0x06	; 6
 484:	91 05       	cpc	r25, r1
 486:	59 f0       	breq	.+22     	; 0x49e <mcal_interrupt_clear_flag+0x3a>
 488:	2b 81       	ldd	r18, Y+3	; 0x03
 48a:	3c 81       	ldd	r19, Y+4	; 0x04
 48c:	27 30       	cpi	r18, 0x07	; 7
 48e:	31 05       	cpc	r19, r1
 490:	71 f0       	breq	.+28     	; 0x4ae <mcal_interrupt_clear_flag+0x4a>
 492:	8b 81       	ldd	r24, Y+3	; 0x03
 494:	9c 81       	ldd	r25, Y+4	; 0x04
 496:	85 30       	cpi	r24, 0x05	; 5
 498:	91 05       	cpc	r25, r1
 49a:	89 f0       	breq	.+34     	; 0x4be <mcal_interrupt_clear_flag+0x5a>
 49c:	18 c0       	rjmp	.+48     	; 0x4ce <mcal_interrupt_clear_flag+0x6a>
	{
	case INTF0:
		clr_bit(GIFR, INTF0);
 49e:	aa e5       	ldi	r26, 0x5A	; 90
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	ea e5       	ldi	r30, 0x5A	; 90
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	8f 7b       	andi	r24, 0xBF	; 191
 4aa:	8c 93       	st	X, r24
 4ac:	12 c0       	rjmp	.+36     	; 0x4d2 <mcal_interrupt_clear_flag+0x6e>
		break;

	case INTF1:
		clr_bit(GIFR, INTF1);
 4ae:	aa e5       	ldi	r26, 0x5A	; 90
 4b0:	b0 e0       	ldi	r27, 0x00	; 0
 4b2:	ea e5       	ldi	r30, 0x5A	; 90
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	8f 77       	andi	r24, 0x7F	; 127
 4ba:	8c 93       	st	X, r24
 4bc:	0a c0       	rjmp	.+20     	; 0x4d2 <mcal_interrupt_clear_flag+0x6e>
		break;

	case INTF2:
		clr_bit(GIFR, INTF2);
 4be:	aa e5       	ldi	r26, 0x5A	; 90
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	ea e5       	ldi	r30, 0x5A	; 90
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	8f 7d       	andi	r24, 0xDF	; 223
 4ca:	8c 93       	st	X, r24
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <mcal_interrupt_clear_flag+0x6e>
		break;

	default:
		error = INTERRUPT_STATE_INVAILD_INTERRUPT_NUMBER;
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return error;
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
}
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	cf 91       	pop	r28
 4de:	df 91       	pop	r29
 4e0:	08 95       	ret

000004e2 <mcal_gpio_pin_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

GPIO_STATE_ERROR_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
 4e2:	df 93       	push	r29
 4e4:	cf 93       	push	r28
 4e6:	00 d0       	rcall	.+0      	; 0x4e8 <mcal_gpio_pin_init+0x6>
 4e8:	00 d0       	rcall	.+0      	; 0x4ea <mcal_gpio_pin_init+0x8>
 4ea:	00 d0       	rcall	.+0      	; 0x4ec <mcal_gpio_pin_init+0xa>
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
 4f0:	8a 83       	std	Y+2, r24	; 0x02
 4f2:	6b 83       	std	Y+3, r22	; 0x03
 4f4:	4c 83       	std	Y+4, r20	; 0x04
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
 4f6:	19 82       	std	Y+1, r1	; 0x01

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 4f8:	8a 81       	ldd	r24, Y+2	; 0x02
 4fa:	89 33       	cpi	r24, 0x39	; 57
 4fc:	51 f0       	breq	.+20     	; 0x512 <mcal_gpio_pin_init+0x30>
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	86 33       	cpi	r24, 0x36	; 54
 502:	39 f0       	breq	.+14     	; 0x512 <mcal_gpio_pin_init+0x30>
 504:	8a 81       	ldd	r24, Y+2	; 0x02
 506:	83 33       	cpi	r24, 0x33	; 51
 508:	21 f0       	breq	.+8      	; 0x512 <mcal_gpio_pin_init+0x30>
 50a:	8a 81       	ldd	r24, Y+2	; 0x02
 50c:	80 33       	cpi	r24, 0x30	; 48
 50e:	09 f0       	breq	.+2      	; 0x512 <mcal_gpio_pin_init+0x30>
 510:	86 c0       	rjmp	.+268    	; 0x61e <mcal_gpio_pin_init+0x13c>
	{
		if (pin < MAX_PIN_NUMBER)
 512:	8b 81       	ldd	r24, Y+3	; 0x03
 514:	88 30       	cpi	r24, 0x08	; 8
 516:	08 f0       	brcs	.+2      	; 0x51a <mcal_gpio_pin_init+0x38>
 518:	7f c0       	rjmp	.+254    	; 0x618 <mcal_gpio_pin_init+0x136>
		{
			switch (dir)
 51a:	8c 81       	ldd	r24, Y+4	; 0x04
 51c:	28 2f       	mov	r18, r24
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	3e 83       	std	Y+6, r19	; 0x06
 522:	2d 83       	std	Y+5, r18	; 0x05
 524:	8d 81       	ldd	r24, Y+5	; 0x05
 526:	9e 81       	ldd	r25, Y+6	; 0x06
 528:	81 30       	cpi	r24, 0x01	; 1
 52a:	91 05       	cpc	r25, r1
 52c:	21 f1       	breq	.+72     	; 0x576 <mcal_gpio_pin_init+0x94>
 52e:	2d 81       	ldd	r18, Y+5	; 0x05
 530:	3e 81       	ldd	r19, Y+6	; 0x06
 532:	22 30       	cpi	r18, 0x02	; 2
 534:	31 05       	cpc	r19, r1
 536:	29 f0       	breq	.+10     	; 0x542 <mcal_gpio_pin_init+0x60>
 538:	8d 81       	ldd	r24, Y+5	; 0x05
 53a:	9e 81       	ldd	r25, Y+6	; 0x06
 53c:	00 97       	sbiw	r24, 0x00	; 0
 53e:	b1 f1       	breq	.+108    	; 0x5ac <mcal_gpio_pin_init+0xca>
 540:	68 c0       	rjmp	.+208    	; 0x612 <mcal_gpio_pin_init+0x130>
			{
			case DIR_OUTPUT:
				set_bit(base + OFFSET_DIR, pin);
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	88 2f       	mov	r24, r24
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	dc 01       	movw	r26, r24
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	88 2f       	mov	r24, r24
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	fc 01       	movw	r30, r24
 556:	80 81       	ld	r24, Z
 558:	48 2f       	mov	r20, r24
 55a:	8b 81       	ldd	r24, Y+3	; 0x03
 55c:	28 2f       	mov	r18, r24
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 2e       	mov	r0, r18
 566:	02 c0       	rjmp	.+4      	; 0x56c <mcal_gpio_pin_init+0x8a>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	0a 94       	dec	r0
 56e:	e2 f7       	brpl	.-8      	; 0x568 <mcal_gpio_pin_init+0x86>
 570:	84 2b       	or	r24, r20
 572:	8c 93       	st	X, r24
 574:	56 c0       	rjmp	.+172    	; 0x622 <mcal_gpio_pin_init+0x140>
				break;

			case DIR_INPUT_PULLDOWN:
				clr_bit(base + OFFSET_DIR, pin);
 576:	8a 81       	ldd	r24, Y+2	; 0x02
 578:	88 2f       	mov	r24, r24
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	dc 01       	movw	r26, r24
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	88 2f       	mov	r24, r24
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	fc 01       	movw	r30, r24
 58a:	80 81       	ld	r24, Z
 58c:	48 2f       	mov	r20, r24
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 2e       	mov	r0, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <mcal_gpio_pin_init+0xbe>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	0a 94       	dec	r0
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <mcal_gpio_pin_init+0xba>
 5a4:	80 95       	com	r24
 5a6:	84 23       	and	r24, r20
 5a8:	8c 93       	st	X, r24
 5aa:	3b c0       	rjmp	.+118    	; 0x622 <mcal_gpio_pin_init+0x140>
				break;

			case DIR_INPUT_PULLUP:
				clr_bit(base + OFFSET_DIR, pin);
 5ac:	8a 81       	ldd	r24, Y+2	; 0x02
 5ae:	88 2f       	mov	r24, r24
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	01 96       	adiw	r24, 0x01	; 1
 5b4:	dc 01       	movw	r26, r24
 5b6:	8a 81       	ldd	r24, Y+2	; 0x02
 5b8:	88 2f       	mov	r24, r24
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	fc 01       	movw	r30, r24
 5c0:	80 81       	ld	r24, Z
 5c2:	48 2f       	mov	r20, r24
 5c4:	8b 81       	ldd	r24, Y+3	; 0x03
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <mcal_gpio_pin_init+0xf2>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	2a 95       	dec	r18
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <mcal_gpio_pin_init+0xee>
 5d8:	80 95       	com	r24
 5da:	84 23       	and	r24, r20
 5dc:	8c 93       	st	X, r24
				set_bit(base + OFFSET_PORT, pin);
 5de:	8a 81       	ldd	r24, Y+2	; 0x02
 5e0:	88 2f       	mov	r24, r24
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	02 96       	adiw	r24, 0x02	; 2
 5e6:	dc 01       	movw	r26, r24
 5e8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ea:	88 2f       	mov	r24, r24
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 96       	adiw	r24, 0x02	; 2
 5f0:	fc 01       	movw	r30, r24
 5f2:	80 81       	ld	r24, Z
 5f4:	48 2f       	mov	r20, r24
 5f6:	8b 81       	ldd	r24, Y+3	; 0x03
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 2e       	mov	r0, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <mcal_gpio_pin_init+0x126>
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	0a 94       	dec	r0
 60a:	e2 f7       	brpl	.-8      	; 0x604 <mcal_gpio_pin_init+0x122>
 60c:	84 2b       	or	r24, r20
 60e:	8c 93       	st	X, r24
 610:	08 c0       	rjmp	.+16     	; 0x622 <mcal_gpio_pin_init+0x140>
				break;

			default:
				error = GPIO_STATE_INVALID_DIR;
 612:	84 e0       	ldi	r24, 0x04	; 4
 614:	89 83       	std	Y+1, r24	; 0x01
 616:	05 c0       	rjmp	.+10     	; 0x622 <mcal_gpio_pin_init+0x140>
				break;
			}
		}
		else
		{
			error = GPIO_STATE_INVAILD_PIN;
 618:	83 e0       	ldi	r24, 0x03	; 3
 61a:	89 83       	std	Y+1, r24	; 0x01
 61c:	02 c0       	rjmp	.+4      	; 0x622 <mcal_gpio_pin_init+0x140>
		}
	}
	else
	{
		error = GPIO_STATE_INVALID_ADDR;
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	89 83       	std	Y+1, r24	; 0x01
	}
	return error;
 622:	89 81       	ldd	r24, Y+1	; 0x01
}
 624:	26 96       	adiw	r28, 0x06	; 6
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	f8 94       	cli
 62a:	de bf       	out	0x3e, r29	; 62
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	cd bf       	out	0x3d, r28	; 61
 630:	cf 91       	pop	r28
 632:	df 91       	pop	r29
 634:	08 95       	ret

00000636 <mcal_gpio_pin_write>:

GPIO_STATE_ERROR_t mcal_gpio_pin_write(u8_t base, u8_t pin, u8_t value)
{
 636:	df 93       	push	r29
 638:	cf 93       	push	r28
 63a:	00 d0       	rcall	.+0      	; 0x63c <mcal_gpio_pin_write+0x6>
 63c:	00 d0       	rcall	.+0      	; 0x63e <mcal_gpio_pin_write+0x8>
 63e:	00 d0       	rcall	.+0      	; 0x640 <mcal_gpio_pin_write+0xa>
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	8a 83       	std	Y+2, r24	; 0x02
 646:	6b 83       	std	Y+3, r22	; 0x03
 648:	4c 83       	std	Y+4, r20	; 0x04
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
 64a:	19 82       	std	Y+1, r1	; 0x01

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 64c:	8a 81       	ldd	r24, Y+2	; 0x02
 64e:	89 33       	cpi	r24, 0x39	; 57
 650:	51 f0       	breq	.+20     	; 0x666 <mcal_gpio_pin_write+0x30>
 652:	8a 81       	ldd	r24, Y+2	; 0x02
 654:	86 33       	cpi	r24, 0x36	; 54
 656:	39 f0       	breq	.+14     	; 0x666 <mcal_gpio_pin_write+0x30>
 658:	8a 81       	ldd	r24, Y+2	; 0x02
 65a:	83 33       	cpi	r24, 0x33	; 51
 65c:	21 f0       	breq	.+8      	; 0x666 <mcal_gpio_pin_write+0x30>
 65e:	8a 81       	ldd	r24, Y+2	; 0x02
 660:	80 33       	cpi	r24, 0x30	; 48
 662:	09 f0       	breq	.+2      	; 0x666 <mcal_gpio_pin_write+0x30>
 664:	4d c0       	rjmp	.+154    	; 0x700 <mcal_gpio_pin_write+0xca>
	{
		if (pin < MAX_PIN_NUMBER)
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	88 30       	cpi	r24, 0x08	; 8
 66a:	08 f0       	brcs	.+2      	; 0x66e <mcal_gpio_pin_write+0x38>
 66c:	46 c0       	rjmp	.+140    	; 0x6fa <mcal_gpio_pin_write+0xc4>
		{
			switch (value)
 66e:	8c 81       	ldd	r24, Y+4	; 0x04
 670:	28 2f       	mov	r18, r24
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	3e 83       	std	Y+6, r19	; 0x06
 676:	2d 83       	std	Y+5, r18	; 0x05
 678:	8d 81       	ldd	r24, Y+5	; 0x05
 67a:	9e 81       	ldd	r25, Y+6	; 0x06
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	f9 f0       	breq	.+62     	; 0x6be <mcal_gpio_pin_write+0x88>
 680:	2d 81       	ldd	r18, Y+5	; 0x05
 682:	3e 81       	ldd	r19, Y+6	; 0x06
 684:	21 30       	cpi	r18, 0x01	; 1
 686:	31 05       	cpc	r19, r1
 688:	a9 f5       	brne	.+106    	; 0x6f4 <mcal_gpio_pin_write+0xbe>
			{
			case HIGH:
				set_bit(base + OFFSET_PORT, pin);
 68a:	8a 81       	ldd	r24, Y+2	; 0x02
 68c:	88 2f       	mov	r24, r24
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	02 96       	adiw	r24, 0x02	; 2
 692:	dc 01       	movw	r26, r24
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	88 2f       	mov	r24, r24
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 96       	adiw	r24, 0x02	; 2
 69c:	fc 01       	movw	r30, r24
 69e:	80 81       	ld	r24, Z
 6a0:	48 2f       	mov	r20, r24
 6a2:	8b 81       	ldd	r24, Y+3	; 0x03
 6a4:	28 2f       	mov	r18, r24
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	02 2e       	mov	r0, r18
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <mcal_gpio_pin_write+0x7e>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	0a 94       	dec	r0
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <mcal_gpio_pin_write+0x7a>
 6b8:	84 2b       	or	r24, r20
 6ba:	8c 93       	st	X, r24
 6bc:	23 c0       	rjmp	.+70     	; 0x704 <mcal_gpio_pin_write+0xce>
				break;

			case LOW:
				clr_bit(base + OFFSET_PORT, pin);
 6be:	8a 81       	ldd	r24, Y+2	; 0x02
 6c0:	88 2f       	mov	r24, r24
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 96       	adiw	r24, 0x02	; 2
 6c6:	dc 01       	movw	r26, r24
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	88 2f       	mov	r24, r24
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	02 96       	adiw	r24, 0x02	; 2
 6d0:	fc 01       	movw	r30, r24
 6d2:	80 81       	ld	r24, Z
 6d4:	48 2f       	mov	r20, r24
 6d6:	8b 81       	ldd	r24, Y+3	; 0x03
 6d8:	28 2f       	mov	r18, r24
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 2e       	mov	r0, r18
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <mcal_gpio_pin_write+0xb2>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	0a 94       	dec	r0
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <mcal_gpio_pin_write+0xae>
 6ec:	80 95       	com	r24
 6ee:	84 23       	and	r24, r20
 6f0:	8c 93       	st	X, r24
 6f2:	08 c0       	rjmp	.+16     	; 0x704 <mcal_gpio_pin_write+0xce>
				break;

			default:
				error = GPIO_STATE_INVALID_VALUE;
 6f4:	85 e0       	ldi	r24, 0x05	; 5
 6f6:	89 83       	std	Y+1, r24	; 0x01
 6f8:	05 c0       	rjmp	.+10     	; 0x704 <mcal_gpio_pin_write+0xce>
				break;
			}
		}
		else
		{
			error = GPIO_STATE_INVAILD_PIN;
 6fa:	83 e0       	ldi	r24, 0x03	; 3
 6fc:	89 83       	std	Y+1, r24	; 0x01
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <mcal_gpio_pin_write+0xce>
		}
	}
	else
	{
		error = GPIO_STATE_INVALID_ADDR;
 700:	82 e0       	ldi	r24, 0x02	; 2
 702:	89 83       	std	Y+1, r24	; 0x01
	}

	return error;
 704:	89 81       	ldd	r24, Y+1	; 0x01
}
 706:	26 96       	adiw	r28, 0x06	; 6
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	f8 94       	cli
 70c:	de bf       	out	0x3e, r29	; 62
 70e:	0f be       	out	0x3f, r0	; 63
 710:	cd bf       	out	0x3d, r28	; 61
 712:	cf 91       	pop	r28
 714:	df 91       	pop	r29
 716:	08 95       	ret

00000718 <mcal_gpio_pin_toggle>:

GPIO_STATE_ERROR_t mcal_gpio_pin_toggle(u8_t base, u8_t pin)
{
 718:	df 93       	push	r29
 71a:	cf 93       	push	r28
 71c:	00 d0       	rcall	.+0      	; 0x71e <mcal_gpio_pin_toggle+0x6>
 71e:	0f 92       	push	r0
 720:	cd b7       	in	r28, 0x3d	; 61
 722:	de b7       	in	r29, 0x3e	; 62
 724:	8a 83       	std	Y+2, r24	; 0x02
 726:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
 728:	19 82       	std	Y+1, r1	; 0x01

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 72a:	8a 81       	ldd	r24, Y+2	; 0x02
 72c:	89 33       	cpi	r24, 0x39	; 57
 72e:	49 f0       	breq	.+18     	; 0x742 <mcal_gpio_pin_toggle+0x2a>
 730:	8a 81       	ldd	r24, Y+2	; 0x02
 732:	86 33       	cpi	r24, 0x36	; 54
 734:	31 f0       	breq	.+12     	; 0x742 <mcal_gpio_pin_toggle+0x2a>
 736:	8a 81       	ldd	r24, Y+2	; 0x02
 738:	83 33       	cpi	r24, 0x33	; 51
 73a:	19 f0       	breq	.+6      	; 0x742 <mcal_gpio_pin_toggle+0x2a>
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	80 33       	cpi	r24, 0x30	; 48
 740:	d1 f4       	brne	.+52     	; 0x776 <mcal_gpio_pin_toggle+0x5e>
	{

		tog_bit(base + OFFSET_PORT, pin);
 742:	8a 81       	ldd	r24, Y+2	; 0x02
 744:	88 2f       	mov	r24, r24
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	02 96       	adiw	r24, 0x02	; 2
 74a:	dc 01       	movw	r26, r24
 74c:	8a 81       	ldd	r24, Y+2	; 0x02
 74e:	88 2f       	mov	r24, r24
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	02 96       	adiw	r24, 0x02	; 2
 754:	fc 01       	movw	r30, r24
 756:	80 81       	ld	r24, Z
 758:	48 2f       	mov	r20, r24
 75a:	8b 81       	ldd	r24, Y+3	; 0x03
 75c:	28 2f       	mov	r18, r24
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	02 2e       	mov	r0, r18
 766:	02 c0       	rjmp	.+4      	; 0x76c <mcal_gpio_pin_toggle+0x54>
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	0a 94       	dec	r0
 76e:	e2 f7       	brpl	.-8      	; 0x768 <mcal_gpio_pin_toggle+0x50>
 770:	84 27       	eor	r24, r20
 772:	8c 93       	st	X, r24
 774:	02 c0       	rjmp	.+4      	; 0x77a <mcal_gpio_pin_toggle+0x62>
	}
	else
	{
		error = GPIO_STATE_INVALID_ADDR;
 776:	82 e0       	ldi	r24, 0x02	; 2
 778:	89 83       	std	Y+1, r24	; 0x01
	}

	return error;
 77a:	89 81       	ldd	r24, Y+1	; 0x01
}
 77c:	0f 90       	pop	r0
 77e:	0f 90       	pop	r0
 780:	0f 90       	pop	r0
 782:	cf 91       	pop	r28
 784:	df 91       	pop	r29
 786:	08 95       	ret

00000788 <mcal_gpio_pin_read>:

GPIO_STATE_ERROR_t mcal_gpio_pin_read(u8_t base, u8_t pin, u8_t *value)
{
 788:	df 93       	push	r29
 78a:	cf 93       	push	r28
 78c:	00 d0       	rcall	.+0      	; 0x78e <mcal_gpio_pin_read+0x6>
 78e:	00 d0       	rcall	.+0      	; 0x790 <mcal_gpio_pin_read+0x8>
 790:	0f 92       	push	r0
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
 796:	8a 83       	std	Y+2, r24	; 0x02
 798:	6b 83       	std	Y+3, r22	; 0x03
 79a:	5d 83       	std	Y+5, r21	; 0x05
 79c:	4c 83       	std	Y+4, r20	; 0x04
	GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
 79e:	19 82       	std	Y+1, r1	; 0x01

	if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 7a0:	8a 81       	ldd	r24, Y+2	; 0x02
 7a2:	89 33       	cpi	r24, 0x39	; 57
 7a4:	49 f0       	breq	.+18     	; 0x7b8 <mcal_gpio_pin_read+0x30>
 7a6:	8a 81       	ldd	r24, Y+2	; 0x02
 7a8:	86 33       	cpi	r24, 0x36	; 54
 7aa:	31 f0       	breq	.+12     	; 0x7b8 <mcal_gpio_pin_read+0x30>
 7ac:	8a 81       	ldd	r24, Y+2	; 0x02
 7ae:	83 33       	cpi	r24, 0x33	; 51
 7b0:	19 f0       	breq	.+6      	; 0x7b8 <mcal_gpio_pin_read+0x30>
 7b2:	8a 81       	ldd	r24, Y+2	; 0x02
 7b4:	80 33       	cpi	r24, 0x30	; 48
 7b6:	e1 f4       	brne	.+56     	; 0x7f0 <mcal_gpio_pin_read+0x68>
	{
		if (pin < MAX_PIN_NUMBER)
 7b8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ba:	88 30       	cpi	r24, 0x08	; 8
 7bc:	b0 f4       	brcc	.+44     	; 0x7ea <mcal_gpio_pin_read+0x62>
		{
			*value = bit_is_set(base + OFFSET_PIN, pin);
 7be:	8a 81       	ldd	r24, Y+2	; 0x02
 7c0:	88 2f       	mov	r24, r24
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	fc 01       	movw	r30, r24
 7c6:	80 81       	ld	r24, Z
 7c8:	28 2f       	mov	r18, r24
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	8b 81       	ldd	r24, Y+3	; 0x03
 7ce:	88 2f       	mov	r24, r24
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	a9 01       	movw	r20, r18
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <mcal_gpio_pin_read+0x52>
 7d6:	55 95       	asr	r21
 7d8:	47 95       	ror	r20
 7da:	8a 95       	dec	r24
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <mcal_gpio_pin_read+0x4e>
 7de:	ca 01       	movw	r24, r20
 7e0:	81 70       	andi	r24, 0x01	; 1
 7e2:	ec 81       	ldd	r30, Y+4	; 0x04
 7e4:	fd 81       	ldd	r31, Y+5	; 0x05
 7e6:	80 83       	st	Z, r24
 7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <mcal_gpio_pin_read+0x6c>
		}
		else
		{
			error = GPIO_STATE_INVAILD_PIN;
 7ea:	83 e0       	ldi	r24, 0x03	; 3
 7ec:	89 83       	std	Y+1, r24	; 0x01
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <mcal_gpio_pin_read+0x6c>
		}
	}
	else
	{
		error = GPIO_STATE_INVALID_ADDR;
 7f0:	82 e0       	ldi	r24, 0x02	; 2
 7f2:	89 83       	std	Y+1, r24	; 0x01
	}
	return error;
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
}
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	cf 91       	pop	r28
 802:	df 91       	pop	r29
 804:	08 95       	ret

00000806 <hal_led_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

led_error_t hal_led_init(led_t *the_led)
{
 806:	df 93       	push	r29
 808:	cf 93       	push	r28
 80a:	00 d0       	rcall	.+0      	; 0x80c <hal_led_init+0x6>
 80c:	0f 92       	push	r0
 80e:	cd b7       	in	r28, 0x3d	; 61
 810:	de b7       	in	r29, 0x3e	; 62
 812:	9b 83       	std	Y+3, r25	; 0x03
 814:	8a 83       	std	Y+2, r24	; 0x02
	led_error_t error = LED_GPIO_STATE_SUCCESS;
 816:	19 82       	std	Y+1, r1	; 0x01

	if (the_led->wiring == CURRENT_SOURCING ||
 818:	ea 81       	ldd	r30, Y+2	; 0x02
 81a:	fb 81       	ldd	r31, Y+3	; 0x03
 81c:	82 81       	ldd	r24, Z+2	; 0x02
 81e:	88 23       	and	r24, r24
 820:	29 f0       	breq	.+10     	; 0x82c <hal_led_init+0x26>
 822:	ea 81       	ldd	r30, Y+2	; 0x02
 824:	fb 81       	ldd	r31, Y+3	; 0x03
 826:	82 81       	ldd	r24, Z+2	; 0x02
 828:	81 30       	cpi	r24, 0x01	; 1
 82a:	79 f4       	brne	.+30     	; 0x84a <hal_led_init+0x44>
			the_led->wiring == CURRENT_SINKING)
	{
		if (GPIO_STATE_SUCCESS == mcal_gpio_pin_init(
 82c:	ea 81       	ldd	r30, Y+2	; 0x02
 82e:	fb 81       	ldd	r31, Y+3	; 0x03
 830:	80 81       	ld	r24, Z
 832:	ea 81       	ldd	r30, Y+2	; 0x02
 834:	fb 81       	ldd	r31, Y+3	; 0x03
 836:	91 81       	ldd	r25, Z+1	; 0x01
 838:	69 2f       	mov	r22, r25
 83a:	42 e0       	ldi	r20, 0x02	; 2
 83c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcal_gpio_pin_init>
 840:	88 23       	and	r24, r24
 842:	29 f0       	breq	.+10     	; 0x84e <hal_led_init+0x48>
		{
			/* led initialized */
		}
		else
		{
			error = LED_GPIO_STATE_ERROR;
 844:	82 e0       	ldi	r24, 0x02	; 2
 846:	89 83       	std	Y+1, r24	; 0x01
 848:	02 c0       	rjmp	.+4      	; 0x84e <hal_led_init+0x48>
		}
	}
	else
	{
		error = LED_GPIO_INVALID_CURRENT;
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	89 83       	std	Y+1, r24	; 0x01
	}
	return error;
 84e:	89 81       	ldd	r24, Y+1	; 0x01
}
 850:	0f 90       	pop	r0
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	cf 91       	pop	r28
 858:	df 91       	pop	r29
 85a:	08 95       	ret

0000085c <hal_led_set_state>:

led_error_t hal_led_set_state(led_t *the_led, u8_t value)
{
 85c:	df 93       	push	r29
 85e:	cf 93       	push	r28
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
 864:	27 97       	sbiw	r28, 0x07	; 7
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	f8 94       	cli
 86a:	de bf       	out	0x3e, r29	; 62
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	cd bf       	out	0x3d, r28	; 61
 870:	9b 83       	std	Y+3, r25	; 0x03
 872:	8a 83       	std	Y+2, r24	; 0x02
 874:	6c 83       	std	Y+4, r22	; 0x04
	led_error_t error = LED_GPIO_STATE_SUCCESS;
 876:	19 82       	std	Y+1, r1	; 0x01

	if (the_led->wiring == CURRENT_SOURCING)
 878:	ea 81       	ldd	r30, Y+2	; 0x02
 87a:	fb 81       	ldd	r31, Y+3	; 0x03
 87c:	82 81       	ldd	r24, Z+2	; 0x02
 87e:	88 23       	and	r24, r24
 880:	79 f4       	brne	.+30     	; 0x8a0 <hal_led_set_state+0x44>
	{
		if (GPIO_STATE_SUCCESS == mcal_gpio_pin_write(
 882:	ea 81       	ldd	r30, Y+2	; 0x02
 884:	fb 81       	ldd	r31, Y+3	; 0x03
 886:	80 81       	ld	r24, Z
 888:	ea 81       	ldd	r30, Y+2	; 0x02
 88a:	fb 81       	ldd	r31, Y+3	; 0x03
 88c:	91 81       	ldd	r25, Z+1	; 0x01
 88e:	69 2f       	mov	r22, r25
 890:	4c 81       	ldd	r20, Y+4	; 0x04
 892:	0e 94 1b 03 	call	0x636	; 0x636 <mcal_gpio_pin_write>
 896:	88 23       	and	r24, r24
 898:	11 f1       	breq	.+68     	; 0x8de <hal_led_set_state+0x82>
		{
			/* led value is written */
		}
		else
		{
			error = LED_GPIO_STATE_ERROR;
 89a:	82 e0       	ldi	r24, 0x02	; 2
 89c:	89 83       	std	Y+1, r24	; 0x01
 89e:	1f c0       	rjmp	.+62     	; 0x8de <hal_led_set_state+0x82>
		}
	}
	else if (the_led->wiring == CURRENT_SINKING)
 8a0:	ea 81       	ldd	r30, Y+2	; 0x02
 8a2:	fb 81       	ldd	r31, Y+3	; 0x03
 8a4:	82 81       	ldd	r24, Z+2	; 0x02
 8a6:	81 30       	cpi	r24, 0x01	; 1
 8a8:	c1 f4       	brne	.+48     	; 0x8da <hal_led_set_state+0x7e>
	{
		if (GPIO_STATE_SUCCESS == mcal_gpio_pin_write(
 8aa:	ea 81       	ldd	r30, Y+2	; 0x02
 8ac:	fb 81       	ldd	r31, Y+3	; 0x03
 8ae:	80 81       	ld	r24, Z
 8b0:	8f 83       	std	Y+7, r24	; 0x07
 8b2:	ea 81       	ldd	r30, Y+2	; 0x02
 8b4:	fb 81       	ldd	r31, Y+3	; 0x03
 8b6:	81 81       	ldd	r24, Z+1	; 0x01
 8b8:	8e 83       	std	Y+6, r24	; 0x06
 8ba:	1d 82       	std	Y+5, r1	; 0x05
 8bc:	8c 81       	ldd	r24, Y+4	; 0x04
 8be:	88 23       	and	r24, r24
 8c0:	11 f4       	brne	.+4      	; 0x8c6 <hal_led_set_state+0x6a>
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	8d 83       	std	Y+5, r24	; 0x05
 8c6:	8f 81       	ldd	r24, Y+7	; 0x07
 8c8:	6e 81       	ldd	r22, Y+6	; 0x06
 8ca:	4d 81       	ldd	r20, Y+5	; 0x05
 8cc:	0e 94 1b 03 	call	0x636	; 0x636 <mcal_gpio_pin_write>
 8d0:	88 23       	and	r24, r24
 8d2:	29 f0       	breq	.+10     	; 0x8de <hal_led_set_state+0x82>
		{
			/* led value is written */
		}
		else
		{
			error = LED_GPIO_STATE_ERROR;
 8d4:	82 e0       	ldi	r24, 0x02	; 2
 8d6:	89 83       	std	Y+1, r24	; 0x01
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <hal_led_set_state+0x82>
		}
	}
	else
	{
		error = LED_GPIO_INVALID_CURRENT;
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return error;
 8de:	89 81       	ldd	r24, Y+1	; 0x01
}
 8e0:	27 96       	adiw	r28, 0x07	; 7
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	f8 94       	cli
 8e6:	de bf       	out	0x3e, r29	; 62
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	cd bf       	out	0x3d, r28	; 61
 8ec:	cf 91       	pop	r28
 8ee:	df 91       	pop	r29
 8f0:	08 95       	ret

000008f2 <hal_led_toggle_state>:

led_error_t hal_led_toggle_state(led_t *the_led)
{
 8f2:	df 93       	push	r29
 8f4:	cf 93       	push	r28
 8f6:	00 d0       	rcall	.+0      	; 0x8f8 <hal_led_toggle_state+0x6>
 8f8:	0f 92       	push	r0
 8fa:	cd b7       	in	r28, 0x3d	; 61
 8fc:	de b7       	in	r29, 0x3e	; 62
 8fe:	9b 83       	std	Y+3, r25	; 0x03
 900:	8a 83       	std	Y+2, r24	; 0x02
	led_error_t error = LED_GPIO_STATE_SUCCESS;
 902:	19 82       	std	Y+1, r1	; 0x01

	if (the_led->wiring == CURRENT_SOURCING)
 904:	ea 81       	ldd	r30, Y+2	; 0x02
 906:	fb 81       	ldd	r31, Y+3	; 0x03
 908:	82 81       	ldd	r24, Z+2	; 0x02
 90a:	88 23       	and	r24, r24
 90c:	69 f4       	brne	.+26     	; 0x928 <hal_led_toggle_state+0x36>
	{
		if (GPIO_STATE_SUCCESS == mcal_gpio_pin_toggle(
 90e:	ea 81       	ldd	r30, Y+2	; 0x02
 910:	fb 81       	ldd	r31, Y+3	; 0x03
 912:	80 81       	ld	r24, Z
 914:	ea 81       	ldd	r30, Y+2	; 0x02
 916:	fb 81       	ldd	r31, Y+3	; 0x03
 918:	91 81       	ldd	r25, Z+1	; 0x01
 91a:	69 2f       	mov	r22, r25
 91c:	0e 94 8c 03 	call	0x718	; 0x718 <mcal_gpio_pin_toggle>
 920:	88 23       	and	r24, r24
 922:	11 f0       	breq	.+4      	; 0x928 <hal_led_toggle_state+0x36>
		{
			/* led value is written */
		}
		else
		{
			error = LED_GPIO_STATE_ERROR;
 924:	82 e0       	ldi	r24, 0x02	; 2
 926:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return error;
 928:	89 81       	ldd	r24, Y+1	; 0x01
}
 92a:	0f 90       	pop	r0
 92c:	0f 90       	pop	r0
 92e:	0f 90       	pop	r0
 930:	cf 91       	pop	r28
 932:	df 91       	pop	r29
 934:	08 95       	ret

00000936 <hal_led_get_state>:

led_error_t hal_led_get_state(led_t *the_led, u8_t *result)
{
 936:	df 93       	push	r29
 938:	cf 93       	push	r28
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
 93e:	27 97       	sbiw	r28, 0x07	; 7
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	f8 94       	cli
 944:	de bf       	out	0x3e, r29	; 62
 946:	0f be       	out	0x3f, r0	; 63
 948:	cd bf       	out	0x3d, r28	; 61
 94a:	9c 83       	std	Y+4, r25	; 0x04
 94c:	8b 83       	std	Y+3, r24	; 0x03
 94e:	7e 83       	std	Y+6, r23	; 0x06
 950:	6d 83       	std	Y+5, r22	; 0x05
	led_error_t error = LED_GPIO_STATE_SUCCESS;
 952:	19 82       	std	Y+1, r1	; 0x01

	u8_t pin;

	if (GPIO_STATE_SUCCESS == mcal_gpio_pin_read(
 954:	eb 81       	ldd	r30, Y+3	; 0x03
 956:	fc 81       	ldd	r31, Y+4	; 0x04
 958:	80 81       	ld	r24, Z
 95a:	eb 81       	ldd	r30, Y+3	; 0x03
 95c:	fc 81       	ldd	r31, Y+4	; 0x04
 95e:	91 81       	ldd	r25, Z+1	; 0x01
 960:	9e 01       	movw	r18, r28
 962:	2e 5f       	subi	r18, 0xFE	; 254
 964:	3f 4f       	sbci	r19, 0xFF	; 255
 966:	69 2f       	mov	r22, r25
 968:	a9 01       	movw	r20, r18
 96a:	0e 94 c4 03 	call	0x788	; 0x788 <mcal_gpio_pin_read>
 96e:	88 23       	and	r24, r24
 970:	e9 f4       	brne	.+58     	; 0x9ac <hal_led_get_state+0x76>
			the_led->base_addr,
			the_led->pin_num, &pin))
	{
		if (the_led->wiring == CURRENT_SOURCING)
 972:	eb 81       	ldd	r30, Y+3	; 0x03
 974:	fc 81       	ldd	r31, Y+4	; 0x04
 976:	82 81       	ldd	r24, Z+2	; 0x02
 978:	88 23       	and	r24, r24
 97a:	29 f4       	brne	.+10     	; 0x986 <hal_led_get_state+0x50>
		{
			*result = pin;
 97c:	8a 81       	ldd	r24, Y+2	; 0x02
 97e:	ed 81       	ldd	r30, Y+5	; 0x05
 980:	fe 81       	ldd	r31, Y+6	; 0x06
 982:	80 83       	st	Z, r24
 984:	15 c0       	rjmp	.+42     	; 0x9b0 <hal_led_get_state+0x7a>
		}
		else if (the_led->wiring == CURRENT_SINKING)
 986:	eb 81       	ldd	r30, Y+3	; 0x03
 988:	fc 81       	ldd	r31, Y+4	; 0x04
 98a:	82 81       	ldd	r24, Z+2	; 0x02
 98c:	81 30       	cpi	r24, 0x01	; 1
 98e:	59 f4       	brne	.+22     	; 0x9a6 <hal_led_get_state+0x70>
		{
			*result = !pin;
 990:	8a 81       	ldd	r24, Y+2	; 0x02
 992:	1f 82       	std	Y+7, r1	; 0x07
 994:	88 23       	and	r24, r24
 996:	11 f4       	brne	.+4      	; 0x99c <hal_led_get_state+0x66>
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	8f 83       	std	Y+7, r24	; 0x07
 99c:	ed 81       	ldd	r30, Y+5	; 0x05
 99e:	fe 81       	ldd	r31, Y+6	; 0x06
 9a0:	8f 81       	ldd	r24, Y+7	; 0x07
 9a2:	80 83       	st	Z, r24
 9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <hal_led_get_state+0x7a>
		}
		else
		{
			error = LED_GPIO_INVALID_CURRENT;
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	89 83       	std	Y+1, r24	; 0x01
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <hal_led_get_state+0x7a>
		}
	}
	else
	{
		error = LED_GPIO_STATE_ERROR;
 9ac:	82 e0       	ldi	r24, 0x02	; 2
 9ae:	89 83       	std	Y+1, r24	; 0x01
	}

	return error;
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 9b2:	27 96       	adiw	r28, 0x07	; 7
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	f8 94       	cli
 9b8:	de bf       	out	0x3e, r29	; 62
 9ba:	0f be       	out	0x3f, r0	; 63
 9bc:	cd bf       	out	0x3d, r28	; 61
 9be:	cf 91       	pop	r28
 9c0:	df 91       	pop	r29
 9c2:	08 95       	ret

000009c4 <hal_button_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

button_error_t hal_button_init(button_t *the_button)
{
 9c4:	df 93       	push	r29
 9c6:	cf 93       	push	r28
 9c8:	00 d0       	rcall	.+0      	; 0x9ca <hal_button_init+0x6>
 9ca:	00 d0       	rcall	.+0      	; 0x9cc <hal_button_init+0x8>
 9cc:	0f 92       	push	r0
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
 9d2:	9b 83       	std	Y+3, r25	; 0x03
 9d4:	8a 83       	std	Y+2, r24	; 0x02
	button_error_t error = BUTTON_GPIO_STATE_SUCCESS;
 9d6:	19 82       	std	Y+1, r1	; 0x01

	switch (the_button->connection)
 9d8:	ea 81       	ldd	r30, Y+2	; 0x02
 9da:	fb 81       	ldd	r31, Y+3	; 0x03
 9dc:	82 81       	ldd	r24, Z+2	; 0x02
 9de:	28 2f       	mov	r18, r24
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	3d 83       	std	Y+5, r19	; 0x05
 9e4:	2c 83       	std	Y+4, r18	; 0x04
 9e6:	8c 81       	ldd	r24, Y+4	; 0x04
 9e8:	9d 81       	ldd	r25, Y+5	; 0x05
 9ea:	00 97       	sbiw	r24, 0x00	; 0
 9ec:	31 f0       	breq	.+12     	; 0x9fa <hal_button_init+0x36>
 9ee:	2c 81       	ldd	r18, Y+4	; 0x04
 9f0:	3d 81       	ldd	r19, Y+5	; 0x05
 9f2:	21 30       	cpi	r18, 0x01	; 1
 9f4:	31 05       	cpc	r19, r1
 9f6:	81 f0       	breq	.+32     	; 0xa18 <hal_button_init+0x54>
 9f8:	1e c0       	rjmp	.+60     	; 0xa36 <hal_button_init+0x72>
	{
	case PULLUP_CONNECTION:
		if (GPIO_STATE_SUCCESS == mcal_gpio_pin_init(
 9fa:	ea 81       	ldd	r30, Y+2	; 0x02
 9fc:	fb 81       	ldd	r31, Y+3	; 0x03
 9fe:	80 81       	ld	r24, Z
 a00:	ea 81       	ldd	r30, Y+2	; 0x02
 a02:	fb 81       	ldd	r31, Y+3	; 0x03
 a04:	91 81       	ldd	r25, Z+1	; 0x01
 a06:	69 2f       	mov	r22, r25
 a08:	40 e0       	ldi	r20, 0x00	; 0
 a0a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcal_gpio_pin_init>
 a0e:	88 23       	and	r24, r24
 a10:	a1 f0       	breq	.+40     	; 0xa3a <hal_button_init+0x76>
		{
			/* button initialized */
		}
		else
		{
			error = BUTTON_GPIO_STATE_ERROR;
 a12:	82 e0       	ldi	r24, 0x02	; 2
 a14:	89 83       	std	Y+1, r24	; 0x01
 a16:	11 c0       	rjmp	.+34     	; 0xa3a <hal_button_init+0x76>
		}
		break;

	case PULLDOWN_CONNECTION:
		if (GPIO_STATE_SUCCESS == mcal_gpio_pin_init(
 a18:	ea 81       	ldd	r30, Y+2	; 0x02
 a1a:	fb 81       	ldd	r31, Y+3	; 0x03
 a1c:	80 81       	ld	r24, Z
 a1e:	ea 81       	ldd	r30, Y+2	; 0x02
 a20:	fb 81       	ldd	r31, Y+3	; 0x03
 a22:	91 81       	ldd	r25, Z+1	; 0x01
 a24:	69 2f       	mov	r22, r25
 a26:	41 e0       	ldi	r20, 0x01	; 1
 a28:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mcal_gpio_pin_init>
 a2c:	88 23       	and	r24, r24
 a2e:	29 f0       	breq	.+10     	; 0xa3a <hal_button_init+0x76>
		{
			/* button initialized */
		}
		else
		{
			error = BUTTON_GPIO_STATE_ERROR;
 a30:	82 e0       	ldi	r24, 0x02	; 2
 a32:	89 83       	std	Y+1, r24	; 0x01
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <hal_button_init+0x76>
		}
		break;

	default:
		error = BUTTON_GPIO_INVALID_CONNECTION;
 a36:	81 e0       	ldi	r24, 0x01	; 1
 a38:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return error;
 a3a:	89 81       	ldd	r24, Y+1	; 0x01
}
 a3c:	0f 90       	pop	r0
 a3e:	0f 90       	pop	r0
 a40:	0f 90       	pop	r0
 a42:	0f 90       	pop	r0
 a44:	0f 90       	pop	r0
 a46:	cf 91       	pop	r28
 a48:	df 91       	pop	r29
 a4a:	08 95       	ret

00000a4c <hal_button_get_state>:

button_error_t hal_button_get_state(
		button_t *the_button,
		button_states_t *result)
{
 a4c:	df 93       	push	r29
 a4e:	cf 93       	push	r28
 a50:	cd b7       	in	r28, 0x3d	; 61
 a52:	de b7       	in	r29, 0x3e	; 62
 a54:	27 97       	sbiw	r28, 0x07	; 7
 a56:	0f b6       	in	r0, 0x3f	; 63
 a58:	f8 94       	cli
 a5a:	de bf       	out	0x3e, r29	; 62
 a5c:	0f be       	out	0x3f, r0	; 63
 a5e:	cd bf       	out	0x3d, r28	; 61
 a60:	9c 83       	std	Y+4, r25	; 0x04
 a62:	8b 83       	std	Y+3, r24	; 0x03
 a64:	7e 83       	std	Y+6, r23	; 0x06
 a66:	6d 83       	std	Y+5, r22	; 0x05
	button_error_t error = BUTTON_GPIO_STATE_SUCCESS;
 a68:	19 82       	std	Y+1, r1	; 0x01

	button_states_t states;

	if (GPIO_STATE_SUCCESS == mcal_gpio_pin_read(
 a6a:	eb 81       	ldd	r30, Y+3	; 0x03
 a6c:	fc 81       	ldd	r31, Y+4	; 0x04
 a6e:	80 81       	ld	r24, Z
 a70:	eb 81       	ldd	r30, Y+3	; 0x03
 a72:	fc 81       	ldd	r31, Y+4	; 0x04
 a74:	91 81       	ldd	r25, Z+1	; 0x01
 a76:	9e 01       	movw	r18, r28
 a78:	2e 5f       	subi	r18, 0xFE	; 254
 a7a:	3f 4f       	sbci	r19, 0xFF	; 255
 a7c:	69 2f       	mov	r22, r25
 a7e:	a9 01       	movw	r20, r18
 a80:	0e 94 c4 03 	call	0x788	; 0x788 <mcal_gpio_pin_read>
 a84:	88 23       	and	r24, r24
 a86:	e9 f4       	brne	.+58     	; 0xac2 <hal_button_get_state+0x76>
			the_button->base_addr,
			the_button->pin_num, &states))
	{
		if (the_button->connection == PULLDOWN_CONNECTION)
 a88:	eb 81       	ldd	r30, Y+3	; 0x03
 a8a:	fc 81       	ldd	r31, Y+4	; 0x04
 a8c:	82 81       	ldd	r24, Z+2	; 0x02
 a8e:	81 30       	cpi	r24, 0x01	; 1
 a90:	29 f4       	brne	.+10     	; 0xa9c <hal_button_get_state+0x50>
		{
			*result = (button_states_t)states;
 a92:	8a 81       	ldd	r24, Y+2	; 0x02
 a94:	ed 81       	ldd	r30, Y+5	; 0x05
 a96:	fe 81       	ldd	r31, Y+6	; 0x06
 a98:	80 83       	st	Z, r24
 a9a:	15 c0       	rjmp	.+42     	; 0xac6 <hal_button_get_state+0x7a>
		}
		else if (the_button->connection == PULLUP_CONNECTION)
 a9c:	eb 81       	ldd	r30, Y+3	; 0x03
 a9e:	fc 81       	ldd	r31, Y+4	; 0x04
 aa0:	82 81       	ldd	r24, Z+2	; 0x02
 aa2:	88 23       	and	r24, r24
 aa4:	59 f4       	brne	.+22     	; 0xabc <hal_button_get_state+0x70>
		{
			*result = (button_states_t)(!states);
 aa6:	8a 81       	ldd	r24, Y+2	; 0x02
 aa8:	1f 82       	std	Y+7, r1	; 0x07
 aaa:	88 23       	and	r24, r24
 aac:	11 f4       	brne	.+4      	; 0xab2 <hal_button_get_state+0x66>
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	8f 83       	std	Y+7, r24	; 0x07
 ab2:	ed 81       	ldd	r30, Y+5	; 0x05
 ab4:	fe 81       	ldd	r31, Y+6	; 0x06
 ab6:	8f 81       	ldd	r24, Y+7	; 0x07
 ab8:	80 83       	st	Z, r24
 aba:	05 c0       	rjmp	.+10     	; 0xac6 <hal_button_get_state+0x7a>
		}
		else
		{
			error = BUTTON_GPIO_INVALID_CONNECTION;
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	89 83       	std	Y+1, r24	; 0x01
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <hal_button_get_state+0x7a>
		}
	}
	else
	{
		error = BUTTON_GPIO_STATE_ERROR;
 ac2:	82 e0       	ldi	r24, 0x02	; 2
 ac4:	89 83       	std	Y+1, r24	; 0x01
	}

	return error;
 ac6:	89 81       	ldd	r24, Y+1	; 0x01
}
 ac8:	27 96       	adiw	r28, 0x07	; 7
 aca:	0f b6       	in	r0, 0x3f	; 63
 acc:	f8 94       	cli
 ace:	de bf       	out	0x3e, r29	; 62
 ad0:	0f be       	out	0x3f, r0	; 63
 ad2:	cd bf       	out	0x3d, r28	; 61
 ad4:	cf 91       	pop	r28
 ad6:	df 91       	pop	r29
 ad8:	08 95       	ret

00000ada <main>:
#include "./includes/atmega32.h"
/*************************************************************************/
/*                               Main test                               */
/*************************************************************************/
int main(void)
{
 ada:	df 93       	push	r29
 adc:	cf 93       	push	r28
 ade:	cd b7       	in	r28, 0x3d	; 61
 ae0:	de b7       	in	r29, 0x3e	; 62

	return 0;
 ae2:	80 e0       	ldi	r24, 0x00	; 0
 ae4:	90 e0       	ldi	r25, 0x00	; 0
}
 ae6:	cf 91       	pop	r28
 ae8:	df 91       	pop	r29
 aea:	08 95       	ret

00000aec <_exit>:
 aec:	f8 94       	cli

00000aee <__stop_program>:
 aee:	ff cf       	rjmp	.-2      	; 0xaee <__stop_program>
