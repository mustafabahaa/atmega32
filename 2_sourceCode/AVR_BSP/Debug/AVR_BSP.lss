
AVR_BSP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800060  00800060  00000e84  2**0
                  ALLOC
  2 .stab         0000297c  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00002aa8  00000000  00000000  00003800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_1>
   8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_2>
   c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 db 06 	call	0xdb6	; 0xdb6 <main>
  74:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <execute_port_program>:

/*************************************************************************/
/*                             Application                               */
/*************************************************************************/
void execute_port_program(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  systemInit();
  84:	0e 94 49 00 	call	0x92	; 0x92 <systemInit>

  mcal_port_write(BASE_C, PORT_ON);
  88:	83 e3       	ldi	r24, 0x33	; 51
  8a:	6f ef       	ldi	r22, 0xFF	; 255
  8c:	0e 94 06 02 	call	0x40c	; 0x40c <mcal_port_write>
  90:	ff cf       	rjmp	.-2      	; 0x90 <execute_port_program+0x14>

00000092 <systemInit>:

/*************************************************************************/
/*                   Static Functions Implementations                    */
/*************************************************************************/
static void systemInit()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  init_port();
  9a:	0e 94 52 00 	call	0xa4	; 0xa4 <init_port>
}
  9e:	cf 91       	pop	r28
  a0:	df 91       	pop	r29
  a2:	08 95       	ret

000000a4 <init_port>:

static void init_port()
{
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  mcal_port_init(BASE_A, DIR_PORT_OUTPUT);
  ac:	89 e3       	ldi	r24, 0x39	; 57
  ae:	62 e0       	ldi	r22, 0x02	; 2
  b0:	0e 94 ab 01 	call	0x356	; 0x356 <mcal_port_init>
  mcal_port_init(BASE_B, DIR_PORT_OUTPUT);
  b4:	86 e3       	ldi	r24, 0x36	; 54
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	0e 94 ab 01 	call	0x356	; 0x356 <mcal_port_init>
  mcal_port_init(BASE_C, DIR_PORT_OUTPUT);
  bc:	83 e3       	ldi	r24, 0x33	; 51
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 ab 01 	call	0x356	; 0x356 <mcal_port_init>
  mcal_port_init(BASE_D, DIR_PORT_INPUT_PULLDOWN);
  c4:	80 e3       	ldi	r24, 0x30	; 48
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	0e 94 ab 01 	call	0x356	; 0x356 <mcal_port_init>
}
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	08 95       	ret

000000d2 <execute_gpio_program>:
button_t button_1;
/*************************************************************************/
/*                             Application                               */
/*************************************************************************/
void execute_gpio_program(void)
{
  d2:	df 93       	push	r29
  d4:	cf 93       	push	r28
  d6:	00 d0       	rcall	.+0      	; 0xd8 <execute_gpio_program+0x6>
  d8:	0f 92       	push	r0
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  button_states_t button_states;
  systemInit();
  de:	0e 94 93 00 	call	0x126	; 0x126 <systemInit>

  while (1)
  {

    hal_button_get_state(&button_1, &button_states);
  e2:	83 e6       	ldi	r24, 0x63	; 99
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	9e 01       	movw	r18, r28
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	b9 01       	movw	r22, r18
  ee:	0e 94 94 06 	call	0xd28	; 0xd28 <hal_button_get_state>

    switch (button_states)
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	3b 83       	std	Y+3, r19	; 0x03
  fa:	2a 83       	std	Y+2, r18	; 0x02
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	59 f0       	breq	.+22     	; 0x11a <execute_gpio_program+0x48>
 104:	2a 81       	ldd	r18, Y+2	; 0x02
 106:	3b 81       	ldd	r19, Y+3	; 0x03
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	31 05       	cpc	r19, r1
 10c:	51 f7       	brne	.-44     	; 0xe2 <execute_gpio_program+0x10>
    {
    case BUTTON_PRESSED:
      hal_led_set_state(&red_led, ON);
 10e:	80 e6       	ldi	r24, 0x60	; 96
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	0e 94 9c 05 	call	0xb38	; 0xb38 <hal_led_set_state>
 118:	e4 cf       	rjmp	.-56     	; 0xe2 <execute_gpio_program+0x10>
      break;

    case BUTTON_NOT_PRESSED:
      hal_led_set_state(&red_led, OFF);
 11a:	80 e6       	ldi	r24, 0x60	; 96
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	0e 94 9c 05 	call	0xb38	; 0xb38 <hal_led_set_state>
 124:	de cf       	rjmp	.-68     	; 0xe2 <execute_gpio_program+0x10>

00000126 <systemInit>:

/*************************************************************************/
/*                   Static Functions Implementations                    */
/*************************************************************************/
static void systemInit()
{
 126:	df 93       	push	r29
 128:	cf 93       	push	r28
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
  init_led();
 12e:	0e 94 9e 00 	call	0x13c	; 0x13c <init_led>
  init_button();
 132:	0e 94 b5 00 	call	0x16a	; 0x16a <init_button>
}
 136:	cf 91       	pop	r28
 138:	df 91       	pop	r29
 13a:	08 95       	ret

0000013c <init_led>:

static void init_led()
{
 13c:	df 93       	push	r29
 13e:	cf 93       	push	r28
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
  red_led.base_addr = BASE_C;
 144:	83 e3       	ldi	r24, 0x33	; 51
 146:	80 93 60 00 	sts	0x0060, r24
  red_led.pin_num = 0;
 14a:	10 92 61 00 	sts	0x0061, r1
  red_led.wiring = CURRENT_SOURCING;
 14e:	10 92 62 00 	sts	0x0062, r1
  hal_led_init(&red_led);
 152:	80 e6       	ldi	r24, 0x60	; 96
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 71 05 	call	0xae2	; 0xae2 <hal_led_init>
  hal_led_set_state(&red_led, OFF);
 15a:	80 e6       	ldi	r24, 0x60	; 96
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	0e 94 9c 05 	call	0xb38	; 0xb38 <hal_led_set_state>
}
 164:	cf 91       	pop	r28
 166:	df 91       	pop	r29
 168:	08 95       	ret

0000016a <init_button>:

static void init_button()
{
 16a:	df 93       	push	r29
 16c:	cf 93       	push	r28
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
  button_1.base_addr = BASE_C;
 172:	83 e3       	ldi	r24, 0x33	; 51
 174:	80 93 63 00 	sts	0x0063, r24
  button_1.pin_num = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 64 00 	sts	0x0064, r24
  button_1.connection = PULLDOWN_CONNECTION;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 65 00 	sts	0x0065, r24
  hal_button_init(&button_1);
 184:	83 e6       	ldi	r24, 0x63	; 99
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 50 06 	call	0xca0	; 0xca0 <hal_button_init>
}
 18c:	cf 91       	pop	r28
 18e:	df 91       	pop	r29
 190:	08 95       	ret

00000192 <execute_interrupt_program>:

/*************************************************************************/
/*                             Application                               */
/*************************************************************************/
void execute_interrupt_program(void)
{
 192:	df 93       	push	r29
 194:	cf 93       	push	r28
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
  systemInit();
 19a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <systemInit>
 19e:	ff cf       	rjmp	.-2      	; 0x19e <execute_interrupt_program+0xc>

000001a0 <systemInit>:

/*************************************************************************/
/*                   Static Functions Implementations                    */
/*************************************************************************/
static void systemInit()
{
 1a0:	df 93       	push	r29
 1a2:	cf 93       	push	r28
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
  init_interrupts();
 1a8:	0e 94 14 01 	call	0x228	; 0x228 <init_interrupts>
  init_led();
 1ac:	0e 94 db 00 	call	0x1b6	; 0x1b6 <init_led>
}
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

000001b6 <init_led>:

static void init_led()
{
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
  green_led.base_addr = BASE_C;
 1be:	83 e3       	ldi	r24, 0x33	; 51
 1c0:	80 93 69 00 	sts	0x0069, r24
  green_led.pin_num = 0;
 1c4:	10 92 6a 00 	sts	0x006A, r1
  green_led.wiring = CURRENT_SOURCING;
 1c8:	10 92 6b 00 	sts	0x006B, r1
  hal_led_init(&green_led);
 1cc:	89 e6       	ldi	r24, 0x69	; 105
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 71 05 	call	0xae2	; 0xae2 <hal_led_init>
  hal_led_set_state(&green_led, OFF);
 1d4:	89 e6       	ldi	r24, 0x69	; 105
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	0e 94 9c 05 	call	0xb38	; 0xb38 <hal_led_set_state>

  blue_led.base_addr = BASE_C;
 1de:	83 e3       	ldi	r24, 0x33	; 51
 1e0:	80 93 66 00 	sts	0x0066, r24
  blue_led.pin_num = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 67 00 	sts	0x0067, r24
  blue_led.wiring = CURRENT_SOURCING;
 1ea:	10 92 68 00 	sts	0x0068, r1
  hal_led_init(&blue_led);
 1ee:	86 e6       	ldi	r24, 0x66	; 102
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 71 05 	call	0xae2	; 0xae2 <hal_led_init>
  hal_led_set_state(&blue_led, OFF);
 1f6:	86 e6       	ldi	r24, 0x66	; 102
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	0e 94 9c 05 	call	0xb38	; 0xb38 <hal_led_set_state>

  red_led.base_addr = BASE_C;
 200:	83 e3       	ldi	r24, 0x33	; 51
 202:	80 93 60 00 	sts	0x0060, r24
  red_led.pin_num = 2;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 61 00 	sts	0x0061, r24
  red_led.wiring = CURRENT_SOURCING;
 20c:	10 92 62 00 	sts	0x0062, r1
  hal_led_init(&red_led);
 210:	80 e6       	ldi	r24, 0x60	; 96
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 71 05 	call	0xae2	; 0xae2 <hal_led_init>
  hal_led_set_state(&red_led, OFF);
 218:	80 e6       	ldi	r24, 0x60	; 96
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	0e 94 9c 05 	call	0xb38	; 0xb38 <hal_led_set_state>
}
 222:	cf 91       	pop	r28
 224:	df 91       	pop	r29
 226:	08 95       	ret

00000228 <init_interrupts>:

static void init_interrupts()
{
 228:	df 93       	push	r29
 22a:	cf 93       	push	r28
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
  mcal_interrupt_initialize(INT0, RISING_EDGE);
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	0e 94 55 02 	call	0x4aa	; 0x4aa <mcal_interrupt_initialize>
  mcal_interrupt_initialize(INT1, RISING_EDGE);
 238:	87 e0       	ldi	r24, 0x07	; 7
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	0e 94 55 02 	call	0x4aa	; 0x4aa <mcal_interrupt_initialize>
  mcal_interrupt_initialize(INT2, RISING_EDGE);
 240:	85 e0       	ldi	r24, 0x05	; 5
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	0e 94 55 02 	call	0x4aa	; 0x4aa <mcal_interrupt_initialize>
}
 248:	cf 91       	pop	r28
 24a:	df 91       	pop	r29
 24c:	08 95       	ret

0000024e <__vector_1>:
/*************************************************************************/
/*            External Interrupts ISR Implementations                    */
/*************************************************************************/

void __vector_1(void)
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
  hal_led_toggle_state(&green_led);
 278:	89 e6       	ldi	r24, 0x69	; 105
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 e7 05 	call	0xbce	; 0xbce <hal_led_toggle_state>
}
 280:	cf 91       	pop	r28
 282:	df 91       	pop	r29
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_2>:

void __vector_2(void)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	4f 93       	push	r20
 2b6:	5f 93       	push	r21
 2b8:	6f 93       	push	r22
 2ba:	7f 93       	push	r23
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
 2c8:	df 93       	push	r29
 2ca:	cf 93       	push	r28
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
  hal_led_toggle_state(&blue_led);
 2d0:	86 e6       	ldi	r24, 0x66	; 102
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 e7 05 	call	0xbce	; 0xbce <hal_led_toggle_state>
}
 2d8:	cf 91       	pop	r28
 2da:	df 91       	pop	r29
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <__vector_3>:

void __vector_3(void)
{
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	2f 93       	push	r18
 30a:	3f 93       	push	r19
 30c:	4f 93       	push	r20
 30e:	5f 93       	push	r21
 310:	6f 93       	push	r22
 312:	7f 93       	push	r23
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	af 93       	push	r26
 31a:	bf 93       	push	r27
 31c:	ef 93       	push	r30
 31e:	ff 93       	push	r31
 320:	df 93       	push	r29
 322:	cf 93       	push	r28
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
  hal_led_toggle_state(&red_led);
 328:	80 e6       	ldi	r24, 0x60	; 96
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 e7 05 	call	0xbce	; 0xbce <hal_led_toggle_state>
 330:	cf 91       	pop	r28
 332:	df 91       	pop	r29
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <mcal_port_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

port_error_t mcal_port_init(u8_t base, portState dir)
{
 356:	df 93       	push	r29
 358:	cf 93       	push	r28
 35a:	00 d0       	rcall	.+0      	; 0x35c <mcal_port_init+0x6>
 35c:	00 d0       	rcall	.+0      	; 0x35e <mcal_port_init+0x8>
 35e:	0f 92       	push	r0
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	8a 83       	std	Y+2, r24	; 0x02
 366:	6b 83       	std	Y+3, r22	; 0x03
  port_error_t error = PORT_STATE_SUCCESS;
 368:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 36a:	8a 81       	ldd	r24, Y+2	; 0x02
 36c:	89 33       	cpi	r24, 0x39	; 57
 36e:	49 f0       	breq	.+18     	; 0x382 <mcal_port_init+0x2c>
 370:	8a 81       	ldd	r24, Y+2	; 0x02
 372:	86 33       	cpi	r24, 0x36	; 54
 374:	31 f0       	breq	.+12     	; 0x382 <mcal_port_init+0x2c>
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	83 33       	cpi	r24, 0x33	; 51
 37a:	19 f0       	breq	.+6      	; 0x382 <mcal_port_init+0x2c>
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	80 33       	cpi	r24, 0x30	; 48
 380:	d1 f5       	brne	.+116    	; 0x3f6 <mcal_port_init+0xa0>
  {
    switch (dir)
 382:	8b 81       	ldd	r24, Y+3	; 0x03
 384:	28 2f       	mov	r18, r24
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	3d 83       	std	Y+5, r19	; 0x05
 38a:	2c 83       	std	Y+4, r18	; 0x04
 38c:	8c 81       	ldd	r24, Y+4	; 0x04
 38e:	9d 81       	ldd	r25, Y+5	; 0x05
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	91 05       	cpc	r25, r1
 394:	91 f0       	breq	.+36     	; 0x3ba <mcal_port_init+0x64>
 396:	2c 81       	ldd	r18, Y+4	; 0x04
 398:	3d 81       	ldd	r19, Y+5	; 0x05
 39a:	22 30       	cpi	r18, 0x02	; 2
 39c:	31 05       	cpc	r19, r1
 39e:	29 f0       	breq	.+10     	; 0x3aa <mcal_port_init+0x54>
 3a0:	8c 81       	ldd	r24, Y+4	; 0x04
 3a2:	9d 81       	ldd	r25, Y+5	; 0x05
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	b1 f0       	breq	.+44     	; 0x3d4 <mcal_port_init+0x7e>
 3a8:	23 c0       	rjmp	.+70     	; 0x3f0 <mcal_port_init+0x9a>
    {
    case DIR_PORT_OUTPUT:
      reg_write(base + OFFSET_DIR, PORT_OUTPUT_DIR);
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	88 2f       	mov	r24, r24
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	fc 01       	movw	r30, r24
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	80 83       	st	Z, r24
 3b8:	20 c0       	rjmp	.+64     	; 0x3fa <mcal_port_init+0xa4>
      break;

    case DIR_PORT_INPUT_PULLDOWN:
      reg_write(base + OFFSET_DIR, PORT_INPUT_DIR);
 3ba:	8a 81       	ldd	r24, Y+2	; 0x02
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	fc 01       	movw	r30, r24
 3c4:	10 82       	st	Z, r1
      reg_write(base + OFFSET_PORT, PORT_OFF);
 3c6:	8a 81       	ldd	r24, Y+2	; 0x02
 3c8:	88 2f       	mov	r24, r24
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 96       	adiw	r24, 0x02	; 2
 3ce:	fc 01       	movw	r30, r24
 3d0:	10 82       	st	Z, r1
 3d2:	13 c0       	rjmp	.+38     	; 0x3fa <mcal_port_init+0xa4>
      break;

    case DIR_PORT_INPUT_PULLUP:
      reg_write(base + OFFSET_DIR, PORT_INPUT_DIR);
 3d4:	8a 81       	ldd	r24, Y+2	; 0x02
 3d6:	88 2f       	mov	r24, r24
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	fc 01       	movw	r30, r24
 3de:	10 82       	st	Z, r1
      reg_write(base + OFFSET_PORT, PORT_ON);
 3e0:	8a 81       	ldd	r24, Y+2	; 0x02
 3e2:	88 2f       	mov	r24, r24
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 96       	adiw	r24, 0x02	; 2
 3e8:	fc 01       	movw	r30, r24
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	80 83       	st	Z, r24
 3ee:	05 c0       	rjmp	.+10     	; 0x3fa <mcal_port_init+0xa4>
      break;

    default:
      error = PORT_STATE_INVALID_DIR;
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	89 83       	std	Y+1, r24	; 0x01
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <mcal_port_init+0xa4>
      break;
    }
  }
  else
  {
    error = PORT_STATE_INVALID_ADDR;
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	89 83       	std	Y+1, r24	; 0x01
  }

  return error;
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	cf 91       	pop	r28
 408:	df 91       	pop	r29
 40a:	08 95       	ret

0000040c <mcal_port_write>:

port_error_t mcal_port_write(u8_t base, u8_t value)
{
 40c:	df 93       	push	r29
 40e:	cf 93       	push	r28
 410:	00 d0       	rcall	.+0      	; 0x412 <mcal_port_write+0x6>
 412:	0f 92       	push	r0
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
 418:	8a 83       	std	Y+2, r24	; 0x02
 41a:	6b 83       	std	Y+3, r22	; 0x03
  port_error_t error = PORT_STATE_SUCCESS;
 41c:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	89 33       	cpi	r24, 0x39	; 57
 422:	49 f0       	breq	.+18     	; 0x436 <mcal_port_write+0x2a>
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	86 33       	cpi	r24, 0x36	; 54
 428:	31 f0       	breq	.+12     	; 0x436 <mcal_port_write+0x2a>
 42a:	8a 81       	ldd	r24, Y+2	; 0x02
 42c:	83 33       	cpi	r24, 0x33	; 51
 42e:	19 f0       	breq	.+6      	; 0x436 <mcal_port_write+0x2a>
 430:	8a 81       	ldd	r24, Y+2	; 0x02
 432:	80 33       	cpi	r24, 0x30	; 48
 434:	41 f4       	brne	.+16     	; 0x446 <mcal_port_write+0x3a>
  {
    reg_write(base + OFFSET_PORT, value);
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	88 2f       	mov	r24, r24
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 96       	adiw	r24, 0x02	; 2
 43e:	fc 01       	movw	r30, r24
 440:	8b 81       	ldd	r24, Y+3	; 0x03
 442:	80 83       	st	Z, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <mcal_port_write+0x3e>
  }
  else
  {
    error = PORT_STATE_INVALID_ADDR;
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	89 83       	std	Y+1, r24	; 0x01
  }

  return error;
 44a:	89 81       	ldd	r24, Y+1	; 0x01
}
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	cf 91       	pop	r28
 454:	df 91       	pop	r29
 456:	08 95       	ret

00000458 <mcal_port_read>:

port_error_t mcal_port_read(u8_t base, u8_t *value)
{
 458:	df 93       	push	r29
 45a:	cf 93       	push	r28
 45c:	00 d0       	rcall	.+0      	; 0x45e <mcal_port_read+0x6>
 45e:	00 d0       	rcall	.+0      	; 0x460 <__stack+0x1>
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	8a 83       	std	Y+2, r24	; 0x02
 466:	7c 83       	std	Y+4, r23	; 0x04
 468:	6b 83       	std	Y+3, r22	; 0x03
  port_error_t error = PORT_STATE_SUCCESS;
 46a:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 46c:	8a 81       	ldd	r24, Y+2	; 0x02
 46e:	89 33       	cpi	r24, 0x39	; 57
 470:	49 f0       	breq	.+18     	; 0x484 <__stack+0x25>
 472:	8a 81       	ldd	r24, Y+2	; 0x02
 474:	86 33       	cpi	r24, 0x36	; 54
 476:	31 f0       	breq	.+12     	; 0x484 <__stack+0x25>
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	83 33       	cpi	r24, 0x33	; 51
 47c:	19 f0       	breq	.+6      	; 0x484 <__stack+0x25>
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	80 33       	cpi	r24, 0x30	; 48
 482:	49 f4       	brne	.+18     	; 0x496 <__stack+0x37>
  {
    reg_read(base + OFFSET_PIN, value);
 484:	8a 81       	ldd	r24, Y+2	; 0x02
 486:	88 2f       	mov	r24, r24
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	dc 01       	movw	r26, r24
 48c:	eb 81       	ldd	r30, Y+3	; 0x03
 48e:	fc 81       	ldd	r31, Y+4	; 0x04
 490:	80 81       	ld	r24, Z
 492:	8c 93       	st	X, r24
 494:	02 c0       	rjmp	.+4      	; 0x49a <__stack+0x3b>
  }
  else
  {
    error = PORT_STATE_INVALID_ADDR;
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	89 83       	std	Y+1, r24	; 0x01
  }
  return error;
 49a:	89 81       	ldd	r24, Y+1	; 0x01
}
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	cf 91       	pop	r28
 4a6:	df 91       	pop	r29
 4a8:	08 95       	ret

000004aa <mcal_interrupt_initialize>:
/*                     Functions Implementation                          */
/*************************************************************************/

interrupt_error mcal_interrupt_initialize(u8_t interruptNo,
                                          interrupt_mode_t mode)
{
 4aa:	df 93       	push	r29
 4ac:	cf 93       	push	r28
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	2b 97       	sbiw	r28, 0x0b	; 11
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	8a 83       	std	Y+2, r24	; 0x02
 4c0:	6b 83       	std	Y+3, r22	; 0x03
  interrupt_error error = INTERRUPT_STATE_SUCCESS;
 4c2:	19 82       	std	Y+1, r1	; 0x01

  /*enable global interrupts*/
  setGlobalInterrupt;
 4c4:	af e5       	ldi	r26, 0x5F	; 95
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	ef e5       	ldi	r30, 0x5F	; 95
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	80 68       	ori	r24, 0x80	; 128
 4d0:	8c 93       	st	X, r24

  switch (interruptNo)
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	28 2f       	mov	r18, r24
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	3b 87       	std	Y+11, r19	; 0x0b
 4da:	2a 87       	std	Y+10, r18	; 0x0a
 4dc:	8a 85       	ldd	r24, Y+10	; 0x0a
 4de:	9b 85       	ldd	r25, Y+11	; 0x0b
 4e0:	86 30       	cpi	r24, 0x06	; 6
 4e2:	91 05       	cpc	r25, r1
 4e4:	69 f0       	breq	.+26     	; 0x500 <mcal_interrupt_initialize+0x56>
 4e6:	2a 85       	ldd	r18, Y+10	; 0x0a
 4e8:	3b 85       	ldd	r19, Y+11	; 0x0b
 4ea:	27 30       	cpi	r18, 0x07	; 7
 4ec:	31 05       	cpc	r19, r1
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <mcal_interrupt_initialize+0x48>
 4f0:	51 c0       	rjmp	.+162    	; 0x594 <mcal_interrupt_initialize+0xea>
 4f2:	8a 85       	ldd	r24, Y+10	; 0x0a
 4f4:	9b 85       	ldd	r25, Y+11	; 0x0b
 4f6:	85 30       	cpi	r24, 0x05	; 5
 4f8:	91 05       	cpc	r25, r1
 4fa:	09 f4       	brne	.+2      	; 0x4fe <mcal_interrupt_initialize+0x54>
 4fc:	95 c0       	rjmp	.+298    	; 0x628 <mcal_interrupt_initialize+0x17e>
 4fe:	bd c0       	rjmp	.+378    	; 0x67a <mcal_interrupt_initialize+0x1d0>
  {

  case INT0:
  {
    /*enable interrupt 0 */
    set_bit(GICR, INT0);
 500:	ab e5       	ldi	r26, 0x5B	; 91
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	eb e5       	ldi	r30, 0x5B	; 91
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	80 64       	ori	r24, 0x40	; 64
 50c:	8c 93       	st	X, r24

    switch (mode)
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	28 2f       	mov	r18, r24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	39 87       	std	Y+9, r19	; 0x09
 516:	28 87       	std	Y+8, r18	; 0x08
 518:	88 85       	ldd	r24, Y+8	; 0x08
 51a:	99 85       	ldd	r25, Y+9	; 0x09
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	91 05       	cpc	r25, r1
 520:	c1 f0       	breq	.+48     	; 0x552 <mcal_interrupt_initialize+0xa8>
 522:	28 85       	ldd	r18, Y+8	; 0x08
 524:	39 85       	ldd	r19, Y+9	; 0x09
 526:	22 30       	cpi	r18, 0x02	; 2
 528:	31 05       	cpc	r19, r1
 52a:	11 f1       	breq	.+68     	; 0x570 <mcal_interrupt_initialize+0xc6>
 52c:	88 85       	ldd	r24, Y+8	; 0x08
 52e:	99 85       	ldd	r25, Y+9	; 0x09
 530:	00 97       	sbiw	r24, 0x00	; 0
 532:	69 f5       	brne	.+90     	; 0x58e <mcal_interrupt_initialize+0xe4>
    {
    case RISING_EDGE:
      set_bit(MCUCR, ISC00);
 534:	a5 e5       	ldi	r26, 0x55	; 85
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	e5 e5       	ldi	r30, 0x55	; 85
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	81 60       	ori	r24, 0x01	; 1
 540:	8c 93       	st	X, r24
      set_bit(MCUCR, ISC01);
 542:	a5 e5       	ldi	r26, 0x55	; 85
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	e5 e5       	ldi	r30, 0x55	; 85
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	82 60       	ori	r24, 0x02	; 2
 54e:	8c 93       	st	X, r24
 550:	96 c0       	rjmp	.+300    	; 0x67e <mcal_interrupt_initialize+0x1d4>
      break;

    case FALLING_EDGE:
      set_bit(MCUCR, ISC01);
 552:	a5 e5       	ldi	r26, 0x55	; 85
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	e5 e5       	ldi	r30, 0x55	; 85
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	82 60       	ori	r24, 0x02	; 2
 55e:	8c 93       	st	X, r24
      clr_bit(MCUCR, ISC00);
 560:	a5 e5       	ldi	r26, 0x55	; 85
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	e5 e5       	ldi	r30, 0x55	; 85
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	8e 7f       	andi	r24, 0xFE	; 254
 56c:	8c 93       	st	X, r24
 56e:	87 c0       	rjmp	.+270    	; 0x67e <mcal_interrupt_initialize+0x1d4>
      break;

    case CHANGING_EDGE:
      set_bit(MCUCR, ISC00);
 570:	a5 e5       	ldi	r26, 0x55	; 85
 572:	b0 e0       	ldi	r27, 0x00	; 0
 574:	e5 e5       	ldi	r30, 0x55	; 85
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	81 60       	ori	r24, 0x01	; 1
 57c:	8c 93       	st	X, r24
      clr_bit(MCUCR, ISC01);
 57e:	a5 e5       	ldi	r26, 0x55	; 85
 580:	b0 e0       	ldi	r27, 0x00	; 0
 582:	e5 e5       	ldi	r30, 0x55	; 85
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	8d 7f       	andi	r24, 0xFD	; 253
 58a:	8c 93       	st	X, r24
 58c:	78 c0       	rjmp	.+240    	; 0x67e <mcal_interrupt_initialize+0x1d4>
      break;

    default:
      error = INTERRUPT_STATE_INVALID_OPERATION_MODE;
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	89 83       	std	Y+1, r24	; 0x01
 592:	75 c0       	rjmp	.+234    	; 0x67e <mcal_interrupt_initialize+0x1d4>
  }

  case INT1:
  {
    /*enable interrupt 1 */
    set_bit(GICR, INT1);
 594:	ab e5       	ldi	r26, 0x5B	; 91
 596:	b0 e0       	ldi	r27, 0x00	; 0
 598:	eb e5       	ldi	r30, 0x5B	; 91
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	80 68       	ori	r24, 0x80	; 128
 5a0:	8c 93       	st	X, r24

    switch (mode)
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	28 2f       	mov	r18, r24
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	3f 83       	std	Y+7, r19	; 0x07
 5aa:	2e 83       	std	Y+6, r18	; 0x06
 5ac:	8e 81       	ldd	r24, Y+6	; 0x06
 5ae:	9f 81       	ldd	r25, Y+7	; 0x07
 5b0:	81 30       	cpi	r24, 0x01	; 1
 5b2:	91 05       	cpc	r25, r1
 5b4:	c1 f0       	breq	.+48     	; 0x5e6 <mcal_interrupt_initialize+0x13c>
 5b6:	2e 81       	ldd	r18, Y+6	; 0x06
 5b8:	3f 81       	ldd	r19, Y+7	; 0x07
 5ba:	22 30       	cpi	r18, 0x02	; 2
 5bc:	31 05       	cpc	r19, r1
 5be:	11 f1       	breq	.+68     	; 0x604 <mcal_interrupt_initialize+0x15a>
 5c0:	8e 81       	ldd	r24, Y+6	; 0x06
 5c2:	9f 81       	ldd	r25, Y+7	; 0x07
 5c4:	00 97       	sbiw	r24, 0x00	; 0
 5c6:	69 f5       	brne	.+90     	; 0x622 <mcal_interrupt_initialize+0x178>
    {
    case RISING_EDGE:
      set_bit(MCUCR, ISC11);
 5c8:	a5 e5       	ldi	r26, 0x55	; 85
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	e5 e5       	ldi	r30, 0x55	; 85
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	88 60       	ori	r24, 0x08	; 8
 5d4:	8c 93       	st	X, r24
      set_bit(MCUCR, ISC10);
 5d6:	a5 e5       	ldi	r26, 0x55	; 85
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	e5 e5       	ldi	r30, 0x55	; 85
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	84 60       	ori	r24, 0x04	; 4
 5e2:	8c 93       	st	X, r24
 5e4:	4c c0       	rjmp	.+152    	; 0x67e <mcal_interrupt_initialize+0x1d4>
      break;

    case FALLING_EDGE:
      set_bit(MCUCR, ISC11);
 5e6:	a5 e5       	ldi	r26, 0x55	; 85
 5e8:	b0 e0       	ldi	r27, 0x00	; 0
 5ea:	e5 e5       	ldi	r30, 0x55	; 85
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	88 60       	ori	r24, 0x08	; 8
 5f2:	8c 93       	st	X, r24
      clr_bit(MCUCR, ISC10);
 5f4:	a5 e5       	ldi	r26, 0x55	; 85
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	e5 e5       	ldi	r30, 0x55	; 85
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	8b 7f       	andi	r24, 0xFB	; 251
 600:	8c 93       	st	X, r24
 602:	3d c0       	rjmp	.+122    	; 0x67e <mcal_interrupt_initialize+0x1d4>
      break;

    case CHANGING_EDGE:
      set_bit(MCUCR, ISC10);
 604:	a5 e5       	ldi	r26, 0x55	; 85
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e5 e5       	ldi	r30, 0x55	; 85
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	84 60       	ori	r24, 0x04	; 4
 610:	8c 93       	st	X, r24
      clr_bit(MCUCR, ISC11);
 612:	a5 e5       	ldi	r26, 0x55	; 85
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	e5 e5       	ldi	r30, 0x55	; 85
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	87 7f       	andi	r24, 0xF7	; 247
 61e:	8c 93       	st	X, r24
 620:	2e c0       	rjmp	.+92     	; 0x67e <mcal_interrupt_initialize+0x1d4>
      break;

    default:
      error = INTERRUPT_STATE_INVALID_OPERATION_MODE;
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	89 83       	std	Y+1, r24	; 0x01
 626:	2b c0       	rjmp	.+86     	; 0x67e <mcal_interrupt_initialize+0x1d4>
  }

  case INT2:
  {
    /*enable interrupt 2 */
    set_bit(GICR, INT2);
 628:	ab e5       	ldi	r26, 0x5B	; 91
 62a:	b0 e0       	ldi	r27, 0x00	; 0
 62c:	eb e5       	ldi	r30, 0x5B	; 91
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	80 81       	ld	r24, Z
 632:	80 62       	ori	r24, 0x20	; 32
 634:	8c 93       	st	X, r24

    switch (mode)
 636:	8b 81       	ldd	r24, Y+3	; 0x03
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	3d 83       	std	Y+5, r19	; 0x05
 63e:	2c 83       	std	Y+4, r18	; 0x04
 640:	8c 81       	ldd	r24, Y+4	; 0x04
 642:	9d 81       	ldd	r25, Y+5	; 0x05
 644:	00 97       	sbiw	r24, 0x00	; 0
 646:	31 f0       	breq	.+12     	; 0x654 <mcal_interrupt_initialize+0x1aa>
 648:	2c 81       	ldd	r18, Y+4	; 0x04
 64a:	3d 81       	ldd	r19, Y+5	; 0x05
 64c:	21 30       	cpi	r18, 0x01	; 1
 64e:	31 05       	cpc	r19, r1
 650:	49 f0       	breq	.+18     	; 0x664 <mcal_interrupt_initialize+0x1ba>
 652:	10 c0       	rjmp	.+32     	; 0x674 <mcal_interrupt_initialize+0x1ca>
    {
    case RISING_EDGE:
      set_bit(MCUCR, ISC2);
 654:	a5 e5       	ldi	r26, 0x55	; 85
 656:	b0 e0       	ldi	r27, 0x00	; 0
 658:	e5 e5       	ldi	r30, 0x55	; 85
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	80 64       	ori	r24, 0x40	; 64
 660:	8c 93       	st	X, r24
 662:	0d c0       	rjmp	.+26     	; 0x67e <mcal_interrupt_initialize+0x1d4>
      break;

    case FALLING_EDGE:
      clr_bit(MCUCSR, ISC2);
 664:	a4 e5       	ldi	r26, 0x54	; 84
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	e4 e5       	ldi	r30, 0x54	; 84
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	8f 7b       	andi	r24, 0xBF	; 191
 670:	8c 93       	st	X, r24
 672:	05 c0       	rjmp	.+10     	; 0x67e <mcal_interrupt_initialize+0x1d4>
      break;

    default:
      error = INTERRUPT_STATE_INVALID_OPERATION_MODE;
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	89 83       	std	Y+1, r24	; 0x01
 678:	02 c0       	rjmp	.+4      	; 0x67e <mcal_interrupt_initialize+0x1d4>
    break;
  }

  default:
  {
    error = INTERRUPT_STATE_INVAILD_INTERRUPT_NUMBER;
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	89 83       	std	Y+1, r24	; 0x01
  }
  }
  return error;
 67e:	89 81       	ldd	r24, Y+1	; 0x01
}
 680:	2b 96       	adiw	r28, 0x0b	; 11
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	f8 94       	cli
 686:	de bf       	out	0x3e, r29	; 62
 688:	0f be       	out	0x3f, r0	; 63
 68a:	cd bf       	out	0x3d, r28	; 61
 68c:	cf 91       	pop	r28
 68e:	df 91       	pop	r29
 690:	08 95       	ret

00000692 <mcal_interrupt_read_flag>:

interrupt_error mcal_interrupt_read_flag(u8_t flag, u8_t *result)
{
 692:	df 93       	push	r29
 694:	cf 93       	push	r28
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	29 97       	sbiw	r28, 0x09	; 9
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	f8 94       	cli
 6a0:	de bf       	out	0x3e, r29	; 62
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	cd bf       	out	0x3d, r28	; 61
 6a6:	8a 83       	std	Y+2, r24	; 0x02
 6a8:	7c 83       	std	Y+4, r23	; 0x04
 6aa:	6b 83       	std	Y+3, r22	; 0x03
  interrupt_error error = INTERRUPT_STATE_SUCCESS;
 6ac:	19 82       	std	Y+1, r1	; 0x01

  switch (flag)
 6ae:	8a 81       	ldd	r24, Y+2	; 0x02
 6b0:	28 2f       	mov	r18, r24
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	39 87       	std	Y+9, r19	; 0x09
 6b6:	28 87       	std	Y+8, r18	; 0x08
 6b8:	88 85       	ldd	r24, Y+8	; 0x08
 6ba:	99 85       	ldd	r25, Y+9	; 0x09
 6bc:	86 30       	cpi	r24, 0x06	; 6
 6be:	91 05       	cpc	r25, r1
 6c0:	59 f0       	breq	.+22     	; 0x6d8 <mcal_interrupt_read_flag+0x46>
 6c2:	28 85       	ldd	r18, Y+8	; 0x08
 6c4:	39 85       	ldd	r19, Y+9	; 0x09
 6c6:	27 30       	cpi	r18, 0x07	; 7
 6c8:	31 05       	cpc	r19, r1
 6ca:	b9 f0       	breq	.+46     	; 0x6fa <mcal_interrupt_read_flag+0x68>
 6cc:	88 85       	ldd	r24, Y+8	; 0x08
 6ce:	99 85       	ldd	r25, Y+9	; 0x09
 6d0:	85 30       	cpi	r24, 0x05	; 5
 6d2:	91 05       	cpc	r25, r1
 6d4:	f9 f0       	breq	.+62     	; 0x714 <mcal_interrupt_read_flag+0x82>
 6d6:	2f c0       	rjmp	.+94     	; 0x736 <mcal_interrupt_read_flag+0xa4>
  {
  case INTF0:
    *result = bit_is_set(GIFR, INTF0);
 6d8:	ea e5       	ldi	r30, 0x5A	; 90
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	88 2f       	mov	r24, r24
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	80 74       	andi	r24, 0x40	; 64
 6e4:	90 70       	andi	r25, 0x00	; 0
 6e6:	1f 82       	std	Y+7, r1	; 0x07
 6e8:	00 97       	sbiw	r24, 0x00	; 0
 6ea:	11 f0       	breq	.+4      	; 0x6f0 <mcal_interrupt_read_flag+0x5e>
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	9f 83       	std	Y+7, r25	; 0x07
 6f0:	eb 81       	ldd	r30, Y+3	; 0x03
 6f2:	fc 81       	ldd	r31, Y+4	; 0x04
 6f4:	2f 81       	ldd	r18, Y+7	; 0x07
 6f6:	20 83       	st	Z, r18
 6f8:	20 c0       	rjmp	.+64     	; 0x73a <mcal_interrupt_read_flag+0xa8>
    break;

  case INTF1:
    *result = bit_is_set(GIFR, INTF1);
 6fa:	ea e5       	ldi	r30, 0x5A	; 90
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	1e 82       	std	Y+6, r1	; 0x06
 702:	88 23       	and	r24, r24
 704:	14 f4       	brge	.+4      	; 0x70a <mcal_interrupt_read_flag+0x78>
 706:	31 e0       	ldi	r19, 0x01	; 1
 708:	3e 83       	std	Y+6, r19	; 0x06
 70a:	eb 81       	ldd	r30, Y+3	; 0x03
 70c:	fc 81       	ldd	r31, Y+4	; 0x04
 70e:	8e 81       	ldd	r24, Y+6	; 0x06
 710:	80 83       	st	Z, r24
 712:	13 c0       	rjmp	.+38     	; 0x73a <mcal_interrupt_read_flag+0xa8>
    break;

  case INTF2:
    *result = bit_is_set(GIFR, INTF2);
 714:	ea e5       	ldi	r30, 0x5A	; 90
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	80 81       	ld	r24, Z
 71a:	88 2f       	mov	r24, r24
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	80 72       	andi	r24, 0x20	; 32
 720:	90 70       	andi	r25, 0x00	; 0
 722:	1d 82       	std	Y+5, r1	; 0x05
 724:	00 97       	sbiw	r24, 0x00	; 0
 726:	11 f0       	breq	.+4      	; 0x72c <mcal_interrupt_read_flag+0x9a>
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	9d 83       	std	Y+5, r25	; 0x05
 72c:	eb 81       	ldd	r30, Y+3	; 0x03
 72e:	fc 81       	ldd	r31, Y+4	; 0x04
 730:	2d 81       	ldd	r18, Y+5	; 0x05
 732:	20 83       	st	Z, r18
 734:	02 c0       	rjmp	.+4      	; 0x73a <mcal_interrupt_read_flag+0xa8>
    break;

  default:
    error = INTERRUPT_STATE_INVAILD_INTERRUPT_NUMBER;
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	89 83       	std	Y+1, r24	; 0x01
    break;
  }
  return error;
 73a:	89 81       	ldd	r24, Y+1	; 0x01
}
 73c:	29 96       	adiw	r28, 0x09	; 9
 73e:	0f b6       	in	r0, 0x3f	; 63
 740:	f8 94       	cli
 742:	de bf       	out	0x3e, r29	; 62
 744:	0f be       	out	0x3f, r0	; 63
 746:	cd bf       	out	0x3d, r28	; 61
 748:	cf 91       	pop	r28
 74a:	df 91       	pop	r29
 74c:	08 95       	ret

0000074e <mcal_interrupt_clear_flag>:

interrupt_error mcal_interrupt_clear_flag(u8_t flag)
{
 74e:	df 93       	push	r29
 750:	cf 93       	push	r28
 752:	00 d0       	rcall	.+0      	; 0x754 <mcal_interrupt_clear_flag+0x6>
 754:	00 d0       	rcall	.+0      	; 0x756 <mcal_interrupt_clear_flag+0x8>
 756:	cd b7       	in	r28, 0x3d	; 61
 758:	de b7       	in	r29, 0x3e	; 62
 75a:	8a 83       	std	Y+2, r24	; 0x02
  interrupt_error error = INTERRUPT_STATE_SUCCESS;
 75c:	19 82       	std	Y+1, r1	; 0x01

  switch (flag)
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	28 2f       	mov	r18, r24
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	3c 83       	std	Y+4, r19	; 0x04
 766:	2b 83       	std	Y+3, r18	; 0x03
 768:	8b 81       	ldd	r24, Y+3	; 0x03
 76a:	9c 81       	ldd	r25, Y+4	; 0x04
 76c:	86 30       	cpi	r24, 0x06	; 6
 76e:	91 05       	cpc	r25, r1
 770:	59 f0       	breq	.+22     	; 0x788 <mcal_interrupt_clear_flag+0x3a>
 772:	2b 81       	ldd	r18, Y+3	; 0x03
 774:	3c 81       	ldd	r19, Y+4	; 0x04
 776:	27 30       	cpi	r18, 0x07	; 7
 778:	31 05       	cpc	r19, r1
 77a:	71 f0       	breq	.+28     	; 0x798 <mcal_interrupt_clear_flag+0x4a>
 77c:	8b 81       	ldd	r24, Y+3	; 0x03
 77e:	9c 81       	ldd	r25, Y+4	; 0x04
 780:	85 30       	cpi	r24, 0x05	; 5
 782:	91 05       	cpc	r25, r1
 784:	89 f0       	breq	.+34     	; 0x7a8 <mcal_interrupt_clear_flag+0x5a>
 786:	18 c0       	rjmp	.+48     	; 0x7b8 <mcal_interrupt_clear_flag+0x6a>
  {
  case INTF0:
    clr_bit(GIFR, INTF0);
 788:	aa e5       	ldi	r26, 0x5A	; 90
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	ea e5       	ldi	r30, 0x5A	; 90
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	8f 7b       	andi	r24, 0xBF	; 191
 794:	8c 93       	st	X, r24
 796:	12 c0       	rjmp	.+36     	; 0x7bc <mcal_interrupt_clear_flag+0x6e>
    break;

  case INTF1:
    clr_bit(GIFR, INTF1);
 798:	aa e5       	ldi	r26, 0x5A	; 90
 79a:	b0 e0       	ldi	r27, 0x00	; 0
 79c:	ea e5       	ldi	r30, 0x5A	; 90
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
 7a2:	8f 77       	andi	r24, 0x7F	; 127
 7a4:	8c 93       	st	X, r24
 7a6:	0a c0       	rjmp	.+20     	; 0x7bc <mcal_interrupt_clear_flag+0x6e>
    break;

  case INTF2:
    clr_bit(GIFR, INTF2);
 7a8:	aa e5       	ldi	r26, 0x5A	; 90
 7aa:	b0 e0       	ldi	r27, 0x00	; 0
 7ac:	ea e5       	ldi	r30, 0x5A	; 90
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	80 81       	ld	r24, Z
 7b2:	8f 7d       	andi	r24, 0xDF	; 223
 7b4:	8c 93       	st	X, r24
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <mcal_interrupt_clear_flag+0x6e>
    break;

  default:
    error = INTERRUPT_STATE_INVAILD_INTERRUPT_NUMBER;
 7b8:	82 e0       	ldi	r24, 0x02	; 2
 7ba:	89 83       	std	Y+1, r24	; 0x01
    break;
  }
  return error;
 7bc:	89 81       	ldd	r24, Y+1	; 0x01
 7be:	0f 90       	pop	r0
 7c0:	0f 90       	pop	r0
 7c2:	0f 90       	pop	r0
 7c4:	0f 90       	pop	r0
 7c6:	cf 91       	pop	r28
 7c8:	df 91       	pop	r29
 7ca:	08 95       	ret

000007cc <mcal_gpio_pin_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

GPIO_STATE_ERROR_t mcal_gpio_pin_init(u8_t base, u8_t pin, pinState dir)
{
 7cc:	df 93       	push	r29
 7ce:	cf 93       	push	r28
 7d0:	00 d0       	rcall	.+0      	; 0x7d2 <mcal_gpio_pin_init+0x6>
 7d2:	00 d0       	rcall	.+0      	; 0x7d4 <mcal_gpio_pin_init+0x8>
 7d4:	00 d0       	rcall	.+0      	; 0x7d6 <mcal_gpio_pin_init+0xa>
 7d6:	cd b7       	in	r28, 0x3d	; 61
 7d8:	de b7       	in	r29, 0x3e	; 62
 7da:	8a 83       	std	Y+2, r24	; 0x02
 7dc:	6b 83       	std	Y+3, r22	; 0x03
 7de:	4c 83       	std	Y+4, r20	; 0x04
  GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
 7e0:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 7e2:	8a 81       	ldd	r24, Y+2	; 0x02
 7e4:	89 33       	cpi	r24, 0x39	; 57
 7e6:	51 f0       	breq	.+20     	; 0x7fc <mcal_gpio_pin_init+0x30>
 7e8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ea:	86 33       	cpi	r24, 0x36	; 54
 7ec:	39 f0       	breq	.+14     	; 0x7fc <mcal_gpio_pin_init+0x30>
 7ee:	8a 81       	ldd	r24, Y+2	; 0x02
 7f0:	83 33       	cpi	r24, 0x33	; 51
 7f2:	21 f0       	breq	.+8      	; 0x7fc <mcal_gpio_pin_init+0x30>
 7f4:	8a 81       	ldd	r24, Y+2	; 0x02
 7f6:	80 33       	cpi	r24, 0x30	; 48
 7f8:	09 f0       	breq	.+2      	; 0x7fc <mcal_gpio_pin_init+0x30>
 7fa:	86 c0       	rjmp	.+268    	; 0x908 <mcal_gpio_pin_init+0x13c>
  {
    if (pin < MAX_PIN_NUMBER)
 7fc:	8b 81       	ldd	r24, Y+3	; 0x03
 7fe:	88 30       	cpi	r24, 0x08	; 8
 800:	08 f0       	brcs	.+2      	; 0x804 <mcal_gpio_pin_init+0x38>
 802:	7f c0       	rjmp	.+254    	; 0x902 <mcal_gpio_pin_init+0x136>
    {
      switch (dir)
 804:	8c 81       	ldd	r24, Y+4	; 0x04
 806:	28 2f       	mov	r18, r24
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	3e 83       	std	Y+6, r19	; 0x06
 80c:	2d 83       	std	Y+5, r18	; 0x05
 80e:	8d 81       	ldd	r24, Y+5	; 0x05
 810:	9e 81       	ldd	r25, Y+6	; 0x06
 812:	81 30       	cpi	r24, 0x01	; 1
 814:	91 05       	cpc	r25, r1
 816:	21 f1       	breq	.+72     	; 0x860 <mcal_gpio_pin_init+0x94>
 818:	2d 81       	ldd	r18, Y+5	; 0x05
 81a:	3e 81       	ldd	r19, Y+6	; 0x06
 81c:	22 30       	cpi	r18, 0x02	; 2
 81e:	31 05       	cpc	r19, r1
 820:	29 f0       	breq	.+10     	; 0x82c <mcal_gpio_pin_init+0x60>
 822:	8d 81       	ldd	r24, Y+5	; 0x05
 824:	9e 81       	ldd	r25, Y+6	; 0x06
 826:	00 97       	sbiw	r24, 0x00	; 0
 828:	b1 f1       	breq	.+108    	; 0x896 <mcal_gpio_pin_init+0xca>
 82a:	68 c0       	rjmp	.+208    	; 0x8fc <mcal_gpio_pin_init+0x130>
      {
      case DIR_OUTPUT:
        set_bit(base + OFFSET_DIR, pin);
 82c:	8a 81       	ldd	r24, Y+2	; 0x02
 82e:	88 2f       	mov	r24, r24
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	01 96       	adiw	r24, 0x01	; 1
 834:	dc 01       	movw	r26, r24
 836:	8a 81       	ldd	r24, Y+2	; 0x02
 838:	88 2f       	mov	r24, r24
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	01 96       	adiw	r24, 0x01	; 1
 83e:	fc 01       	movw	r30, r24
 840:	80 81       	ld	r24, Z
 842:	48 2f       	mov	r20, r24
 844:	8b 81       	ldd	r24, Y+3	; 0x03
 846:	28 2f       	mov	r18, r24
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 2e       	mov	r0, r18
 850:	02 c0       	rjmp	.+4      	; 0x856 <mcal_gpio_pin_init+0x8a>
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	0a 94       	dec	r0
 858:	e2 f7       	brpl	.-8      	; 0x852 <mcal_gpio_pin_init+0x86>
 85a:	84 2b       	or	r24, r20
 85c:	8c 93       	st	X, r24
 85e:	56 c0       	rjmp	.+172    	; 0x90c <mcal_gpio_pin_init+0x140>
        break;

      case DIR_INPUT_PULLDOWN:
        clr_bit(base + OFFSET_DIR, pin);
 860:	8a 81       	ldd	r24, Y+2	; 0x02
 862:	88 2f       	mov	r24, r24
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	01 96       	adiw	r24, 0x01	; 1
 868:	dc 01       	movw	r26, r24
 86a:	8a 81       	ldd	r24, Y+2	; 0x02
 86c:	88 2f       	mov	r24, r24
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	01 96       	adiw	r24, 0x01	; 1
 872:	fc 01       	movw	r30, r24
 874:	80 81       	ld	r24, Z
 876:	48 2f       	mov	r20, r24
 878:	8b 81       	ldd	r24, Y+3	; 0x03
 87a:	28 2f       	mov	r18, r24
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	02 2e       	mov	r0, r18
 884:	02 c0       	rjmp	.+4      	; 0x88a <mcal_gpio_pin_init+0xbe>
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	0a 94       	dec	r0
 88c:	e2 f7       	brpl	.-8      	; 0x886 <mcal_gpio_pin_init+0xba>
 88e:	80 95       	com	r24
 890:	84 23       	and	r24, r20
 892:	8c 93       	st	X, r24
 894:	3b c0       	rjmp	.+118    	; 0x90c <mcal_gpio_pin_init+0x140>
        break;

      case DIR_INPUT_PULLUP:
        clr_bit(base + OFFSET_DIR, pin);
 896:	8a 81       	ldd	r24, Y+2	; 0x02
 898:	88 2f       	mov	r24, r24
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	01 96       	adiw	r24, 0x01	; 1
 89e:	dc 01       	movw	r26, r24
 8a0:	8a 81       	ldd	r24, Y+2	; 0x02
 8a2:	88 2f       	mov	r24, r24
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	01 96       	adiw	r24, 0x01	; 1
 8a8:	fc 01       	movw	r30, r24
 8aa:	80 81       	ld	r24, Z
 8ac:	48 2f       	mov	r20, r24
 8ae:	8b 81       	ldd	r24, Y+3	; 0x03
 8b0:	28 2f       	mov	r18, r24
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <mcal_gpio_pin_init+0xf2>
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	2a 95       	dec	r18
 8c0:	e2 f7       	brpl	.-8      	; 0x8ba <mcal_gpio_pin_init+0xee>
 8c2:	80 95       	com	r24
 8c4:	84 23       	and	r24, r20
 8c6:	8c 93       	st	X, r24
        set_bit(base + OFFSET_PORT, pin);
 8c8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ca:	88 2f       	mov	r24, r24
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	02 96       	adiw	r24, 0x02	; 2
 8d0:	dc 01       	movw	r26, r24
 8d2:	8a 81       	ldd	r24, Y+2	; 0x02
 8d4:	88 2f       	mov	r24, r24
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	02 96       	adiw	r24, 0x02	; 2
 8da:	fc 01       	movw	r30, r24
 8dc:	80 81       	ld	r24, Z
 8de:	48 2f       	mov	r20, r24
 8e0:	8b 81       	ldd	r24, Y+3	; 0x03
 8e2:	28 2f       	mov	r18, r24
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	02 2e       	mov	r0, r18
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <mcal_gpio_pin_init+0x126>
 8ee:	88 0f       	add	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	0a 94       	dec	r0
 8f4:	e2 f7       	brpl	.-8      	; 0x8ee <mcal_gpio_pin_init+0x122>
 8f6:	84 2b       	or	r24, r20
 8f8:	8c 93       	st	X, r24
 8fa:	08 c0       	rjmp	.+16     	; 0x90c <mcal_gpio_pin_init+0x140>
        break;

      default:
        error = GPIO_STATE_INVALID_DIR;
 8fc:	84 e0       	ldi	r24, 0x04	; 4
 8fe:	89 83       	std	Y+1, r24	; 0x01
 900:	05 c0       	rjmp	.+10     	; 0x90c <mcal_gpio_pin_init+0x140>
        break;
      }
    }
    else
    {
      error = GPIO_STATE_INVAILD_PIN;
 902:	83 e0       	ldi	r24, 0x03	; 3
 904:	89 83       	std	Y+1, r24	; 0x01
 906:	02 c0       	rjmp	.+4      	; 0x90c <mcal_gpio_pin_init+0x140>
    }
  }
  else
  {
    error = GPIO_STATE_INVALID_ADDR;
 908:	82 e0       	ldi	r24, 0x02	; 2
 90a:	89 83       	std	Y+1, r24	; 0x01
  }
  return error;
 90c:	89 81       	ldd	r24, Y+1	; 0x01
}
 90e:	26 96       	adiw	r28, 0x06	; 6
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	f8 94       	cli
 914:	de bf       	out	0x3e, r29	; 62
 916:	0f be       	out	0x3f, r0	; 63
 918:	cd bf       	out	0x3d, r28	; 61
 91a:	cf 91       	pop	r28
 91c:	df 91       	pop	r29
 91e:	08 95       	ret

00000920 <mcal_gpio_pin_write>:

GPIO_STATE_ERROR_t mcal_gpio_pin_write(u8_t base, u8_t pin, u8_t value)
{
 920:	df 93       	push	r29
 922:	cf 93       	push	r28
 924:	00 d0       	rcall	.+0      	; 0x926 <mcal_gpio_pin_write+0x6>
 926:	00 d0       	rcall	.+0      	; 0x928 <mcal_gpio_pin_write+0x8>
 928:	00 d0       	rcall	.+0      	; 0x92a <mcal_gpio_pin_write+0xa>
 92a:	cd b7       	in	r28, 0x3d	; 61
 92c:	de b7       	in	r29, 0x3e	; 62
 92e:	8a 83       	std	Y+2, r24	; 0x02
 930:	6b 83       	std	Y+3, r22	; 0x03
 932:	4c 83       	std	Y+4, r20	; 0x04
  GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
 934:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 936:	8a 81       	ldd	r24, Y+2	; 0x02
 938:	89 33       	cpi	r24, 0x39	; 57
 93a:	51 f0       	breq	.+20     	; 0x950 <mcal_gpio_pin_write+0x30>
 93c:	8a 81       	ldd	r24, Y+2	; 0x02
 93e:	86 33       	cpi	r24, 0x36	; 54
 940:	39 f0       	breq	.+14     	; 0x950 <mcal_gpio_pin_write+0x30>
 942:	8a 81       	ldd	r24, Y+2	; 0x02
 944:	83 33       	cpi	r24, 0x33	; 51
 946:	21 f0       	breq	.+8      	; 0x950 <mcal_gpio_pin_write+0x30>
 948:	8a 81       	ldd	r24, Y+2	; 0x02
 94a:	80 33       	cpi	r24, 0x30	; 48
 94c:	09 f0       	breq	.+2      	; 0x950 <mcal_gpio_pin_write+0x30>
 94e:	46 c0       	rjmp	.+140    	; 0x9dc <mcal_gpio_pin_write+0xbc>
  {
    switch (value)
 950:	8c 81       	ldd	r24, Y+4	; 0x04
 952:	28 2f       	mov	r18, r24
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	3e 83       	std	Y+6, r19	; 0x06
 958:	2d 83       	std	Y+5, r18	; 0x05
 95a:	8d 81       	ldd	r24, Y+5	; 0x05
 95c:	9e 81       	ldd	r25, Y+6	; 0x06
 95e:	00 97       	sbiw	r24, 0x00	; 0
 960:	f9 f0       	breq	.+62     	; 0x9a0 <mcal_gpio_pin_write+0x80>
 962:	2d 81       	ldd	r18, Y+5	; 0x05
 964:	3e 81       	ldd	r19, Y+6	; 0x06
 966:	21 30       	cpi	r18, 0x01	; 1
 968:	31 05       	cpc	r19, r1
 96a:	a9 f5       	brne	.+106    	; 0x9d6 <mcal_gpio_pin_write+0xb6>
    {
    case HIGH:
      set_bit(base + OFFSET_PORT, pin);
 96c:	8a 81       	ldd	r24, Y+2	; 0x02
 96e:	88 2f       	mov	r24, r24
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	02 96       	adiw	r24, 0x02	; 2
 974:	dc 01       	movw	r26, r24
 976:	8a 81       	ldd	r24, Y+2	; 0x02
 978:	88 2f       	mov	r24, r24
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	02 96       	adiw	r24, 0x02	; 2
 97e:	fc 01       	movw	r30, r24
 980:	80 81       	ld	r24, Z
 982:	48 2f       	mov	r20, r24
 984:	8b 81       	ldd	r24, Y+3	; 0x03
 986:	28 2f       	mov	r18, r24
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	02 2e       	mov	r0, r18
 990:	02 c0       	rjmp	.+4      	; 0x996 <mcal_gpio_pin_write+0x76>
 992:	88 0f       	add	r24, r24
 994:	99 1f       	adc	r25, r25
 996:	0a 94       	dec	r0
 998:	e2 f7       	brpl	.-8      	; 0x992 <mcal_gpio_pin_write+0x72>
 99a:	84 2b       	or	r24, r20
 99c:	8c 93       	st	X, r24
 99e:	20 c0       	rjmp	.+64     	; 0x9e0 <mcal_gpio_pin_write+0xc0>
      break;

    case LOW:
      clr_bit(base + OFFSET_PORT, pin);
 9a0:	8a 81       	ldd	r24, Y+2	; 0x02
 9a2:	88 2f       	mov	r24, r24
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	02 96       	adiw	r24, 0x02	; 2
 9a8:	dc 01       	movw	r26, r24
 9aa:	8a 81       	ldd	r24, Y+2	; 0x02
 9ac:	88 2f       	mov	r24, r24
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	02 96       	adiw	r24, 0x02	; 2
 9b2:	fc 01       	movw	r30, r24
 9b4:	80 81       	ld	r24, Z
 9b6:	48 2f       	mov	r20, r24
 9b8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ba:	28 2f       	mov	r18, r24
 9bc:	30 e0       	ldi	r19, 0x00	; 0
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	02 2e       	mov	r0, r18
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <mcal_gpio_pin_write+0xaa>
 9c6:	88 0f       	add	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	0a 94       	dec	r0
 9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <mcal_gpio_pin_write+0xa6>
 9ce:	80 95       	com	r24
 9d0:	84 23       	and	r24, r20
 9d2:	8c 93       	st	X, r24
 9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <mcal_gpio_pin_write+0xc0>
      break;

    default:
      error = GPIO_STATE_INVALID_VALUE;
 9d6:	85 e0       	ldi	r24, 0x05	; 5
 9d8:	89 83       	std	Y+1, r24	; 0x01
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <mcal_gpio_pin_write+0xc0>
      break;
    }
  }
  else
  {
    error = GPIO_STATE_INVALID_ADDR;
 9dc:	82 e0       	ldi	r24, 0x02	; 2
 9de:	89 83       	std	Y+1, r24	; 0x01
  }

  return error;
 9e0:	89 81       	ldd	r24, Y+1	; 0x01
}
 9e2:	26 96       	adiw	r28, 0x06	; 6
 9e4:	0f b6       	in	r0, 0x3f	; 63
 9e6:	f8 94       	cli
 9e8:	de bf       	out	0x3e, r29	; 62
 9ea:	0f be       	out	0x3f, r0	; 63
 9ec:	cd bf       	out	0x3d, r28	; 61
 9ee:	cf 91       	pop	r28
 9f0:	df 91       	pop	r29
 9f2:	08 95       	ret

000009f4 <mcal_gpio_pin_toggle>:

GPIO_STATE_ERROR_t mcal_gpio_pin_toggle(u8_t base, u8_t pin)
{
 9f4:	df 93       	push	r29
 9f6:	cf 93       	push	r28
 9f8:	00 d0       	rcall	.+0      	; 0x9fa <mcal_gpio_pin_toggle+0x6>
 9fa:	0f 92       	push	r0
 9fc:	cd b7       	in	r28, 0x3d	; 61
 9fe:	de b7       	in	r29, 0x3e	; 62
 a00:	8a 83       	std	Y+2, r24	; 0x02
 a02:	6b 83       	std	Y+3, r22	; 0x03
  GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
 a04:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 a06:	8a 81       	ldd	r24, Y+2	; 0x02
 a08:	89 33       	cpi	r24, 0x39	; 57
 a0a:	49 f0       	breq	.+18     	; 0xa1e <mcal_gpio_pin_toggle+0x2a>
 a0c:	8a 81       	ldd	r24, Y+2	; 0x02
 a0e:	86 33       	cpi	r24, 0x36	; 54
 a10:	31 f0       	breq	.+12     	; 0xa1e <mcal_gpio_pin_toggle+0x2a>
 a12:	8a 81       	ldd	r24, Y+2	; 0x02
 a14:	83 33       	cpi	r24, 0x33	; 51
 a16:	19 f0       	breq	.+6      	; 0xa1e <mcal_gpio_pin_toggle+0x2a>
 a18:	8a 81       	ldd	r24, Y+2	; 0x02
 a1a:	80 33       	cpi	r24, 0x30	; 48
 a1c:	d1 f4       	brne	.+52     	; 0xa52 <mcal_gpio_pin_toggle+0x5e>
  {

    tog_bit(base + OFFSET_PORT, pin);
 a1e:	8a 81       	ldd	r24, Y+2	; 0x02
 a20:	88 2f       	mov	r24, r24
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	02 96       	adiw	r24, 0x02	; 2
 a26:	dc 01       	movw	r26, r24
 a28:	8a 81       	ldd	r24, Y+2	; 0x02
 a2a:	88 2f       	mov	r24, r24
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	02 96       	adiw	r24, 0x02	; 2
 a30:	fc 01       	movw	r30, r24
 a32:	80 81       	ld	r24, Z
 a34:	48 2f       	mov	r20, r24
 a36:	8b 81       	ldd	r24, Y+3	; 0x03
 a38:	28 2f       	mov	r18, r24
 a3a:	30 e0       	ldi	r19, 0x00	; 0
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	02 2e       	mov	r0, r18
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <mcal_gpio_pin_toggle+0x54>
 a44:	88 0f       	add	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	0a 94       	dec	r0
 a4a:	e2 f7       	brpl	.-8      	; 0xa44 <mcal_gpio_pin_toggle+0x50>
 a4c:	84 27       	eor	r24, r20
 a4e:	8c 93       	st	X, r24
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <mcal_gpio_pin_toggle+0x62>
  }
  else
  {
    error = GPIO_STATE_INVALID_ADDR;
 a52:	82 e0       	ldi	r24, 0x02	; 2
 a54:	89 83       	std	Y+1, r24	; 0x01
  }

  return error;
 a56:	89 81       	ldd	r24, Y+1	; 0x01
}
 a58:	0f 90       	pop	r0
 a5a:	0f 90       	pop	r0
 a5c:	0f 90       	pop	r0
 a5e:	cf 91       	pop	r28
 a60:	df 91       	pop	r29
 a62:	08 95       	ret

00000a64 <mcal_gpio_pin_read>:

GPIO_STATE_ERROR_t mcal_gpio_pin_read(u8_t base, u8_t pin, u8_t *value)
{
 a64:	df 93       	push	r29
 a66:	cf 93       	push	r28
 a68:	00 d0       	rcall	.+0      	; 0xa6a <mcal_gpio_pin_read+0x6>
 a6a:	00 d0       	rcall	.+0      	; 0xa6c <mcal_gpio_pin_read+0x8>
 a6c:	0f 92       	push	r0
 a6e:	cd b7       	in	r28, 0x3d	; 61
 a70:	de b7       	in	r29, 0x3e	; 62
 a72:	8a 83       	std	Y+2, r24	; 0x02
 a74:	6b 83       	std	Y+3, r22	; 0x03
 a76:	5d 83       	std	Y+5, r21	; 0x05
 a78:	4c 83       	std	Y+4, r20	; 0x04
  GPIO_STATE_ERROR_t error = GPIO_STATE_SUCCESS;
 a7a:	19 82       	std	Y+1, r1	; 0x01

  if (base == BASE_A || base == BASE_B || base == BASE_C || base == BASE_D)
 a7c:	8a 81       	ldd	r24, Y+2	; 0x02
 a7e:	89 33       	cpi	r24, 0x39	; 57
 a80:	49 f0       	breq	.+18     	; 0xa94 <mcal_gpio_pin_read+0x30>
 a82:	8a 81       	ldd	r24, Y+2	; 0x02
 a84:	86 33       	cpi	r24, 0x36	; 54
 a86:	31 f0       	breq	.+12     	; 0xa94 <mcal_gpio_pin_read+0x30>
 a88:	8a 81       	ldd	r24, Y+2	; 0x02
 a8a:	83 33       	cpi	r24, 0x33	; 51
 a8c:	19 f0       	breq	.+6      	; 0xa94 <mcal_gpio_pin_read+0x30>
 a8e:	8a 81       	ldd	r24, Y+2	; 0x02
 a90:	80 33       	cpi	r24, 0x30	; 48
 a92:	e1 f4       	brne	.+56     	; 0xacc <mcal_gpio_pin_read+0x68>
  {
    if (pin < MAX_PIN_NUMBER)
 a94:	8b 81       	ldd	r24, Y+3	; 0x03
 a96:	88 30       	cpi	r24, 0x08	; 8
 a98:	b0 f4       	brcc	.+44     	; 0xac6 <mcal_gpio_pin_read+0x62>
    {
      *value = bit_is_set(base + OFFSET_PIN, pin);
 a9a:	8a 81       	ldd	r24, Y+2	; 0x02
 a9c:	88 2f       	mov	r24, r24
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	fc 01       	movw	r30, r24
 aa2:	80 81       	ld	r24, Z
 aa4:	28 2f       	mov	r18, r24
 aa6:	30 e0       	ldi	r19, 0x00	; 0
 aa8:	8b 81       	ldd	r24, Y+3	; 0x03
 aaa:	88 2f       	mov	r24, r24
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	a9 01       	movw	r20, r18
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <mcal_gpio_pin_read+0x52>
 ab2:	55 95       	asr	r21
 ab4:	47 95       	ror	r20
 ab6:	8a 95       	dec	r24
 ab8:	e2 f7       	brpl	.-8      	; 0xab2 <mcal_gpio_pin_read+0x4e>
 aba:	ca 01       	movw	r24, r20
 abc:	81 70       	andi	r24, 0x01	; 1
 abe:	ec 81       	ldd	r30, Y+4	; 0x04
 ac0:	fd 81       	ldd	r31, Y+5	; 0x05
 ac2:	80 83       	st	Z, r24
 ac4:	05 c0       	rjmp	.+10     	; 0xad0 <mcal_gpio_pin_read+0x6c>
    }
    else
    {
      error = GPIO_STATE_INVAILD_PIN;
 ac6:	83 e0       	ldi	r24, 0x03	; 3
 ac8:	89 83       	std	Y+1, r24	; 0x01
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <mcal_gpio_pin_read+0x6c>
    }
  }
  else
  {
    error = GPIO_STATE_INVALID_ADDR;
 acc:	82 e0       	ldi	r24, 0x02	; 2
 ace:	89 83       	std	Y+1, r24	; 0x01
  }
  return error;
 ad0:	89 81       	ldd	r24, Y+1	; 0x01
}
 ad2:	0f 90       	pop	r0
 ad4:	0f 90       	pop	r0
 ad6:	0f 90       	pop	r0
 ad8:	0f 90       	pop	r0
 ada:	0f 90       	pop	r0
 adc:	cf 91       	pop	r28
 ade:	df 91       	pop	r29
 ae0:	08 95       	ret

00000ae2 <hal_led_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

led_error_t hal_led_init(led_t *the_led)
{
 ae2:	df 93       	push	r29
 ae4:	cf 93       	push	r28
 ae6:	00 d0       	rcall	.+0      	; 0xae8 <hal_led_init+0x6>
 ae8:	0f 92       	push	r0
 aea:	cd b7       	in	r28, 0x3d	; 61
 aec:	de b7       	in	r29, 0x3e	; 62
 aee:	9b 83       	std	Y+3, r25	; 0x03
 af0:	8a 83       	std	Y+2, r24	; 0x02
  led_error_t error = LED_GPIO_STATE_SUCCESS;
 af2:	19 82       	std	Y+1, r1	; 0x01

  if (the_led->wiring == CURRENT_SOURCING ||
 af4:	ea 81       	ldd	r30, Y+2	; 0x02
 af6:	fb 81       	ldd	r31, Y+3	; 0x03
 af8:	82 81       	ldd	r24, Z+2	; 0x02
 afa:	88 23       	and	r24, r24
 afc:	29 f0       	breq	.+10     	; 0xb08 <hal_led_init+0x26>
 afe:	ea 81       	ldd	r30, Y+2	; 0x02
 b00:	fb 81       	ldd	r31, Y+3	; 0x03
 b02:	82 81       	ldd	r24, Z+2	; 0x02
 b04:	81 30       	cpi	r24, 0x01	; 1
 b06:	79 f4       	brne	.+30     	; 0xb26 <hal_led_init+0x44>
      the_led->wiring == CURRENT_SINKING)
  {
    if (GPIO_STATE_SUCCESS == mcal_gpio_pin_init(
 b08:	ea 81       	ldd	r30, Y+2	; 0x02
 b0a:	fb 81       	ldd	r31, Y+3	; 0x03
 b0c:	80 81       	ld	r24, Z
 b0e:	ea 81       	ldd	r30, Y+2	; 0x02
 b10:	fb 81       	ldd	r31, Y+3	; 0x03
 b12:	91 81       	ldd	r25, Z+1	; 0x01
 b14:	69 2f       	mov	r22, r25
 b16:	42 e0       	ldi	r20, 0x02	; 2
 b18:	0e 94 e6 03 	call	0x7cc	; 0x7cc <mcal_gpio_pin_init>
 b1c:	88 23       	and	r24, r24
 b1e:	29 f0       	breq	.+10     	; 0xb2a <hal_led_init+0x48>
    {
      /* led initialized */
    }
    else
    {
      error = LED_GPIO_STATE_ERROR;
 b20:	82 e0       	ldi	r24, 0x02	; 2
 b22:	89 83       	std	Y+1, r24	; 0x01
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <hal_led_init+0x48>
    }
  }
  else
  {
    error = LED_GPIO_INVALID_CURRENT;
 b26:	81 e0       	ldi	r24, 0x01	; 1
 b28:	89 83       	std	Y+1, r24	; 0x01
  }
  return error;
 b2a:	89 81       	ldd	r24, Y+1	; 0x01
}
 b2c:	0f 90       	pop	r0
 b2e:	0f 90       	pop	r0
 b30:	0f 90       	pop	r0
 b32:	cf 91       	pop	r28
 b34:	df 91       	pop	r29
 b36:	08 95       	ret

00000b38 <hal_led_set_state>:

led_error_t hal_led_set_state(led_t *the_led, u8_t value)
{
 b38:	df 93       	push	r29
 b3a:	cf 93       	push	r28
 b3c:	cd b7       	in	r28, 0x3d	; 61
 b3e:	de b7       	in	r29, 0x3e	; 62
 b40:	27 97       	sbiw	r28, 0x07	; 7
 b42:	0f b6       	in	r0, 0x3f	; 63
 b44:	f8 94       	cli
 b46:	de bf       	out	0x3e, r29	; 62
 b48:	0f be       	out	0x3f, r0	; 63
 b4a:	cd bf       	out	0x3d, r28	; 61
 b4c:	9b 83       	std	Y+3, r25	; 0x03
 b4e:	8a 83       	std	Y+2, r24	; 0x02
 b50:	6c 83       	std	Y+4, r22	; 0x04
  led_error_t error = LED_GPIO_STATE_SUCCESS;
 b52:	19 82       	std	Y+1, r1	; 0x01

  if (the_led->wiring == CURRENT_SOURCING)
 b54:	ea 81       	ldd	r30, Y+2	; 0x02
 b56:	fb 81       	ldd	r31, Y+3	; 0x03
 b58:	82 81       	ldd	r24, Z+2	; 0x02
 b5a:	88 23       	and	r24, r24
 b5c:	79 f4       	brne	.+30     	; 0xb7c <hal_led_set_state+0x44>
  {
    if (GPIO_STATE_SUCCESS == mcal_gpio_pin_write(
 b5e:	ea 81       	ldd	r30, Y+2	; 0x02
 b60:	fb 81       	ldd	r31, Y+3	; 0x03
 b62:	80 81       	ld	r24, Z
 b64:	ea 81       	ldd	r30, Y+2	; 0x02
 b66:	fb 81       	ldd	r31, Y+3	; 0x03
 b68:	91 81       	ldd	r25, Z+1	; 0x01
 b6a:	69 2f       	mov	r22, r25
 b6c:	4c 81       	ldd	r20, Y+4	; 0x04
 b6e:	0e 94 90 04 	call	0x920	; 0x920 <mcal_gpio_pin_write>
 b72:	88 23       	and	r24, r24
 b74:	11 f1       	breq	.+68     	; 0xbba <hal_led_set_state+0x82>
    {
      /* led value is written */
    }
    else
    {
      error = LED_GPIO_STATE_ERROR;
 b76:	82 e0       	ldi	r24, 0x02	; 2
 b78:	89 83       	std	Y+1, r24	; 0x01
 b7a:	1f c0       	rjmp	.+62     	; 0xbba <hal_led_set_state+0x82>
    }
  }
  else if (the_led->wiring == CURRENT_SINKING)
 b7c:	ea 81       	ldd	r30, Y+2	; 0x02
 b7e:	fb 81       	ldd	r31, Y+3	; 0x03
 b80:	82 81       	ldd	r24, Z+2	; 0x02
 b82:	81 30       	cpi	r24, 0x01	; 1
 b84:	c1 f4       	brne	.+48     	; 0xbb6 <hal_led_set_state+0x7e>
  {
    if (GPIO_STATE_SUCCESS == mcal_gpio_pin_write(
 b86:	ea 81       	ldd	r30, Y+2	; 0x02
 b88:	fb 81       	ldd	r31, Y+3	; 0x03
 b8a:	80 81       	ld	r24, Z
 b8c:	8f 83       	std	Y+7, r24	; 0x07
 b8e:	ea 81       	ldd	r30, Y+2	; 0x02
 b90:	fb 81       	ldd	r31, Y+3	; 0x03
 b92:	81 81       	ldd	r24, Z+1	; 0x01
 b94:	8e 83       	std	Y+6, r24	; 0x06
 b96:	1d 82       	std	Y+5, r1	; 0x05
 b98:	8c 81       	ldd	r24, Y+4	; 0x04
 b9a:	88 23       	and	r24, r24
 b9c:	11 f4       	brne	.+4      	; 0xba2 <hal_led_set_state+0x6a>
 b9e:	81 e0       	ldi	r24, 0x01	; 1
 ba0:	8d 83       	std	Y+5, r24	; 0x05
 ba2:	8f 81       	ldd	r24, Y+7	; 0x07
 ba4:	6e 81       	ldd	r22, Y+6	; 0x06
 ba6:	4d 81       	ldd	r20, Y+5	; 0x05
 ba8:	0e 94 90 04 	call	0x920	; 0x920 <mcal_gpio_pin_write>
 bac:	88 23       	and	r24, r24
 bae:	29 f0       	breq	.+10     	; 0xbba <hal_led_set_state+0x82>
    {
      /* led value is written */
    }
    else
    {
      error = LED_GPIO_STATE_ERROR;
 bb0:	82 e0       	ldi	r24, 0x02	; 2
 bb2:	89 83       	std	Y+1, r24	; 0x01
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <hal_led_set_state+0x82>
    }
  }
  else
  {
    error = LED_GPIO_INVALID_CURRENT;
 bb6:	81 e0       	ldi	r24, 0x01	; 1
 bb8:	89 83       	std	Y+1, r24	; 0x01
  }
  return error;
 bba:	89 81       	ldd	r24, Y+1	; 0x01
}
 bbc:	27 96       	adiw	r28, 0x07	; 7
 bbe:	0f b6       	in	r0, 0x3f	; 63
 bc0:	f8 94       	cli
 bc2:	de bf       	out	0x3e, r29	; 62
 bc4:	0f be       	out	0x3f, r0	; 63
 bc6:	cd bf       	out	0x3d, r28	; 61
 bc8:	cf 91       	pop	r28
 bca:	df 91       	pop	r29
 bcc:	08 95       	ret

00000bce <hal_led_toggle_state>:

led_error_t hal_led_toggle_state(led_t *the_led)
{
 bce:	df 93       	push	r29
 bd0:	cf 93       	push	r28
 bd2:	00 d0       	rcall	.+0      	; 0xbd4 <hal_led_toggle_state+0x6>
 bd4:	0f 92       	push	r0
 bd6:	cd b7       	in	r28, 0x3d	; 61
 bd8:	de b7       	in	r29, 0x3e	; 62
 bda:	9b 83       	std	Y+3, r25	; 0x03
 bdc:	8a 83       	std	Y+2, r24	; 0x02
  led_error_t error = LED_GPIO_STATE_SUCCESS;
 bde:	19 82       	std	Y+1, r1	; 0x01

  if (the_led->wiring == CURRENT_SOURCING)
 be0:	ea 81       	ldd	r30, Y+2	; 0x02
 be2:	fb 81       	ldd	r31, Y+3	; 0x03
 be4:	82 81       	ldd	r24, Z+2	; 0x02
 be6:	88 23       	and	r24, r24
 be8:	69 f4       	brne	.+26     	; 0xc04 <hal_led_toggle_state+0x36>
  {
    if (GPIO_STATE_SUCCESS == mcal_gpio_pin_toggle(
 bea:	ea 81       	ldd	r30, Y+2	; 0x02
 bec:	fb 81       	ldd	r31, Y+3	; 0x03
 bee:	80 81       	ld	r24, Z
 bf0:	ea 81       	ldd	r30, Y+2	; 0x02
 bf2:	fb 81       	ldd	r31, Y+3	; 0x03
 bf4:	91 81       	ldd	r25, Z+1	; 0x01
 bf6:	69 2f       	mov	r22, r25
 bf8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <mcal_gpio_pin_toggle>
 bfc:	88 23       	and	r24, r24
 bfe:	11 f0       	breq	.+4      	; 0xc04 <hal_led_toggle_state+0x36>
    {
      /* led value is written */
    }
    else
    {
      error = LED_GPIO_STATE_ERROR;
 c00:	82 e0       	ldi	r24, 0x02	; 2
 c02:	89 83       	std	Y+1, r24	; 0x01
    }
  }
  return error;
 c04:	89 81       	ldd	r24, Y+1	; 0x01
}
 c06:	0f 90       	pop	r0
 c08:	0f 90       	pop	r0
 c0a:	0f 90       	pop	r0
 c0c:	cf 91       	pop	r28
 c0e:	df 91       	pop	r29
 c10:	08 95       	ret

00000c12 <hal_led_get_state>:

led_error_t hal_led_get_state(led_t *the_led, u8_t *result)
{
 c12:	df 93       	push	r29
 c14:	cf 93       	push	r28
 c16:	cd b7       	in	r28, 0x3d	; 61
 c18:	de b7       	in	r29, 0x3e	; 62
 c1a:	27 97       	sbiw	r28, 0x07	; 7
 c1c:	0f b6       	in	r0, 0x3f	; 63
 c1e:	f8 94       	cli
 c20:	de bf       	out	0x3e, r29	; 62
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	cd bf       	out	0x3d, r28	; 61
 c26:	9c 83       	std	Y+4, r25	; 0x04
 c28:	8b 83       	std	Y+3, r24	; 0x03
 c2a:	7e 83       	std	Y+6, r23	; 0x06
 c2c:	6d 83       	std	Y+5, r22	; 0x05
  led_error_t error = LED_GPIO_STATE_SUCCESS;
 c2e:	19 82       	std	Y+1, r1	; 0x01

  u8_t pin;

  if (GPIO_STATE_SUCCESS == mcal_gpio_pin_read(
 c30:	eb 81       	ldd	r30, Y+3	; 0x03
 c32:	fc 81       	ldd	r31, Y+4	; 0x04
 c34:	80 81       	ld	r24, Z
 c36:	eb 81       	ldd	r30, Y+3	; 0x03
 c38:	fc 81       	ldd	r31, Y+4	; 0x04
 c3a:	91 81       	ldd	r25, Z+1	; 0x01
 c3c:	9e 01       	movw	r18, r28
 c3e:	2e 5f       	subi	r18, 0xFE	; 254
 c40:	3f 4f       	sbci	r19, 0xFF	; 255
 c42:	69 2f       	mov	r22, r25
 c44:	a9 01       	movw	r20, r18
 c46:	0e 94 32 05 	call	0xa64	; 0xa64 <mcal_gpio_pin_read>
 c4a:	88 23       	and	r24, r24
 c4c:	e9 f4       	brne	.+58     	; 0xc88 <hal_led_get_state+0x76>
                           the_led->base_addr,
                           the_led->pin_num, &pin))
  {
    if (the_led->wiring == CURRENT_SOURCING)
 c4e:	eb 81       	ldd	r30, Y+3	; 0x03
 c50:	fc 81       	ldd	r31, Y+4	; 0x04
 c52:	82 81       	ldd	r24, Z+2	; 0x02
 c54:	88 23       	and	r24, r24
 c56:	29 f4       	brne	.+10     	; 0xc62 <hal_led_get_state+0x50>
    {
      *result = pin;
 c58:	8a 81       	ldd	r24, Y+2	; 0x02
 c5a:	ed 81       	ldd	r30, Y+5	; 0x05
 c5c:	fe 81       	ldd	r31, Y+6	; 0x06
 c5e:	80 83       	st	Z, r24
 c60:	15 c0       	rjmp	.+42     	; 0xc8c <hal_led_get_state+0x7a>
    }
    else if (the_led->wiring == CURRENT_SINKING)
 c62:	eb 81       	ldd	r30, Y+3	; 0x03
 c64:	fc 81       	ldd	r31, Y+4	; 0x04
 c66:	82 81       	ldd	r24, Z+2	; 0x02
 c68:	81 30       	cpi	r24, 0x01	; 1
 c6a:	59 f4       	brne	.+22     	; 0xc82 <hal_led_get_state+0x70>
    {
      *result = !pin;
 c6c:	8a 81       	ldd	r24, Y+2	; 0x02
 c6e:	1f 82       	std	Y+7, r1	; 0x07
 c70:	88 23       	and	r24, r24
 c72:	11 f4       	brne	.+4      	; 0xc78 <hal_led_get_state+0x66>
 c74:	81 e0       	ldi	r24, 0x01	; 1
 c76:	8f 83       	std	Y+7, r24	; 0x07
 c78:	ed 81       	ldd	r30, Y+5	; 0x05
 c7a:	fe 81       	ldd	r31, Y+6	; 0x06
 c7c:	8f 81       	ldd	r24, Y+7	; 0x07
 c7e:	80 83       	st	Z, r24
 c80:	05 c0       	rjmp	.+10     	; 0xc8c <hal_led_get_state+0x7a>
    }
    else
    {
      error = LED_GPIO_INVALID_CURRENT;
 c82:	81 e0       	ldi	r24, 0x01	; 1
 c84:	89 83       	std	Y+1, r24	; 0x01
 c86:	02 c0       	rjmp	.+4      	; 0xc8c <hal_led_get_state+0x7a>
    }
  }
  else
  {
    error = LED_GPIO_STATE_ERROR;
 c88:	82 e0       	ldi	r24, 0x02	; 2
 c8a:	89 83       	std	Y+1, r24	; 0x01
  }

  return error;
 c8c:	89 81       	ldd	r24, Y+1	; 0x01
 c8e:	27 96       	adiw	r28, 0x07	; 7
 c90:	0f b6       	in	r0, 0x3f	; 63
 c92:	f8 94       	cli
 c94:	de bf       	out	0x3e, r29	; 62
 c96:	0f be       	out	0x3f, r0	; 63
 c98:	cd bf       	out	0x3d, r28	; 61
 c9a:	cf 91       	pop	r28
 c9c:	df 91       	pop	r29
 c9e:	08 95       	ret

00000ca0 <hal_button_init>:
/*************************************************************************/
/*                     Functions Implementation                          */
/*************************************************************************/

button_error_t hal_button_init(button_t *the_button)
{
 ca0:	df 93       	push	r29
 ca2:	cf 93       	push	r28
 ca4:	00 d0       	rcall	.+0      	; 0xca6 <hal_button_init+0x6>
 ca6:	00 d0       	rcall	.+0      	; 0xca8 <hal_button_init+0x8>
 ca8:	0f 92       	push	r0
 caa:	cd b7       	in	r28, 0x3d	; 61
 cac:	de b7       	in	r29, 0x3e	; 62
 cae:	9b 83       	std	Y+3, r25	; 0x03
 cb0:	8a 83       	std	Y+2, r24	; 0x02
    button_error_t error = BUTTON_GPIO_STATE_SUCCESS;
 cb2:	19 82       	std	Y+1, r1	; 0x01

    switch (the_button->connection)
 cb4:	ea 81       	ldd	r30, Y+2	; 0x02
 cb6:	fb 81       	ldd	r31, Y+3	; 0x03
 cb8:	82 81       	ldd	r24, Z+2	; 0x02
 cba:	28 2f       	mov	r18, r24
 cbc:	30 e0       	ldi	r19, 0x00	; 0
 cbe:	3d 83       	std	Y+5, r19	; 0x05
 cc0:	2c 83       	std	Y+4, r18	; 0x04
 cc2:	8c 81       	ldd	r24, Y+4	; 0x04
 cc4:	9d 81       	ldd	r25, Y+5	; 0x05
 cc6:	00 97       	sbiw	r24, 0x00	; 0
 cc8:	31 f0       	breq	.+12     	; 0xcd6 <hal_button_init+0x36>
 cca:	2c 81       	ldd	r18, Y+4	; 0x04
 ccc:	3d 81       	ldd	r19, Y+5	; 0x05
 cce:	21 30       	cpi	r18, 0x01	; 1
 cd0:	31 05       	cpc	r19, r1
 cd2:	81 f0       	breq	.+32     	; 0xcf4 <hal_button_init+0x54>
 cd4:	1e c0       	rjmp	.+60     	; 0xd12 <hal_button_init+0x72>
    {
    case PULLUP_CONNECTION:
        if (GPIO_STATE_SUCCESS == mcal_gpio_pin_init(
 cd6:	ea 81       	ldd	r30, Y+2	; 0x02
 cd8:	fb 81       	ldd	r31, Y+3	; 0x03
 cda:	80 81       	ld	r24, Z
 cdc:	ea 81       	ldd	r30, Y+2	; 0x02
 cde:	fb 81       	ldd	r31, Y+3	; 0x03
 ce0:	91 81       	ldd	r25, Z+1	; 0x01
 ce2:	69 2f       	mov	r22, r25
 ce4:	40 e0       	ldi	r20, 0x00	; 0
 ce6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <mcal_gpio_pin_init>
 cea:	88 23       	and	r24, r24
 cec:	a1 f0       	breq	.+40     	; 0xd16 <hal_button_init+0x76>
        {
            /* button initialized */
        }
        else
        {
            error = BUTTON_GPIO_STATE_ERROR;
 cee:	82 e0       	ldi	r24, 0x02	; 2
 cf0:	89 83       	std	Y+1, r24	; 0x01
 cf2:	11 c0       	rjmp	.+34     	; 0xd16 <hal_button_init+0x76>
        }
        break;

    case PULLDOWN_CONNECTION:
        if (GPIO_STATE_SUCCESS == mcal_gpio_pin_init(
 cf4:	ea 81       	ldd	r30, Y+2	; 0x02
 cf6:	fb 81       	ldd	r31, Y+3	; 0x03
 cf8:	80 81       	ld	r24, Z
 cfa:	ea 81       	ldd	r30, Y+2	; 0x02
 cfc:	fb 81       	ldd	r31, Y+3	; 0x03
 cfe:	91 81       	ldd	r25, Z+1	; 0x01
 d00:	69 2f       	mov	r22, r25
 d02:	41 e0       	ldi	r20, 0x01	; 1
 d04:	0e 94 e6 03 	call	0x7cc	; 0x7cc <mcal_gpio_pin_init>
 d08:	88 23       	and	r24, r24
 d0a:	29 f0       	breq	.+10     	; 0xd16 <hal_button_init+0x76>
        {
            /* button initialized */
        }
        else
        {
            error = BUTTON_GPIO_STATE_ERROR;
 d0c:	82 e0       	ldi	r24, 0x02	; 2
 d0e:	89 83       	std	Y+1, r24	; 0x01
 d10:	02 c0       	rjmp	.+4      	; 0xd16 <hal_button_init+0x76>
        }
        break;

    default:
        error = BUTTON_GPIO_INVALID_CONNECTION;
 d12:	81 e0       	ldi	r24, 0x01	; 1
 d14:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return error;
 d16:	89 81       	ldd	r24, Y+1	; 0x01
}
 d18:	0f 90       	pop	r0
 d1a:	0f 90       	pop	r0
 d1c:	0f 90       	pop	r0
 d1e:	0f 90       	pop	r0
 d20:	0f 90       	pop	r0
 d22:	cf 91       	pop	r28
 d24:	df 91       	pop	r29
 d26:	08 95       	ret

00000d28 <hal_button_get_state>:

button_error_t hal_button_get_state(
    button_t *the_button,
    button_states_t *result)
{
 d28:	df 93       	push	r29
 d2a:	cf 93       	push	r28
 d2c:	cd b7       	in	r28, 0x3d	; 61
 d2e:	de b7       	in	r29, 0x3e	; 62
 d30:	27 97       	sbiw	r28, 0x07	; 7
 d32:	0f b6       	in	r0, 0x3f	; 63
 d34:	f8 94       	cli
 d36:	de bf       	out	0x3e, r29	; 62
 d38:	0f be       	out	0x3f, r0	; 63
 d3a:	cd bf       	out	0x3d, r28	; 61
 d3c:	9c 83       	std	Y+4, r25	; 0x04
 d3e:	8b 83       	std	Y+3, r24	; 0x03
 d40:	7e 83       	std	Y+6, r23	; 0x06
 d42:	6d 83       	std	Y+5, r22	; 0x05
    button_error_t error = BUTTON_GPIO_STATE_SUCCESS;
 d44:	19 82       	std	Y+1, r1	; 0x01

    button_states_t states;

    if (GPIO_STATE_SUCCESS == mcal_gpio_pin_read(
 d46:	eb 81       	ldd	r30, Y+3	; 0x03
 d48:	fc 81       	ldd	r31, Y+4	; 0x04
 d4a:	80 81       	ld	r24, Z
 d4c:	eb 81       	ldd	r30, Y+3	; 0x03
 d4e:	fc 81       	ldd	r31, Y+4	; 0x04
 d50:	91 81       	ldd	r25, Z+1	; 0x01
 d52:	9e 01       	movw	r18, r28
 d54:	2e 5f       	subi	r18, 0xFE	; 254
 d56:	3f 4f       	sbci	r19, 0xFF	; 255
 d58:	69 2f       	mov	r22, r25
 d5a:	a9 01       	movw	r20, r18
 d5c:	0e 94 32 05 	call	0xa64	; 0xa64 <mcal_gpio_pin_read>
 d60:	88 23       	and	r24, r24
 d62:	e9 f4       	brne	.+58     	; 0xd9e <hal_button_get_state+0x76>
                             the_button->base_addr,
                             the_button->pin_num, &states))
    {
        if (the_button->connection == PULLDOWN_CONNECTION)
 d64:	eb 81       	ldd	r30, Y+3	; 0x03
 d66:	fc 81       	ldd	r31, Y+4	; 0x04
 d68:	82 81       	ldd	r24, Z+2	; 0x02
 d6a:	81 30       	cpi	r24, 0x01	; 1
 d6c:	29 f4       	brne	.+10     	; 0xd78 <hal_button_get_state+0x50>
        {
            *result = (button_states_t)states;
 d6e:	8a 81       	ldd	r24, Y+2	; 0x02
 d70:	ed 81       	ldd	r30, Y+5	; 0x05
 d72:	fe 81       	ldd	r31, Y+6	; 0x06
 d74:	80 83       	st	Z, r24
 d76:	15 c0       	rjmp	.+42     	; 0xda2 <hal_button_get_state+0x7a>
        }
        else if (the_button->connection == PULLUP_CONNECTION)
 d78:	eb 81       	ldd	r30, Y+3	; 0x03
 d7a:	fc 81       	ldd	r31, Y+4	; 0x04
 d7c:	82 81       	ldd	r24, Z+2	; 0x02
 d7e:	88 23       	and	r24, r24
 d80:	59 f4       	brne	.+22     	; 0xd98 <hal_button_get_state+0x70>
        {
            *result = (button_states_t)(!states);
 d82:	8a 81       	ldd	r24, Y+2	; 0x02
 d84:	1f 82       	std	Y+7, r1	; 0x07
 d86:	88 23       	and	r24, r24
 d88:	11 f4       	brne	.+4      	; 0xd8e <hal_button_get_state+0x66>
 d8a:	81 e0       	ldi	r24, 0x01	; 1
 d8c:	8f 83       	std	Y+7, r24	; 0x07
 d8e:	ed 81       	ldd	r30, Y+5	; 0x05
 d90:	fe 81       	ldd	r31, Y+6	; 0x06
 d92:	8f 81       	ldd	r24, Y+7	; 0x07
 d94:	80 83       	st	Z, r24
 d96:	05 c0       	rjmp	.+10     	; 0xda2 <hal_button_get_state+0x7a>
        }
        else
        {
            error = BUTTON_GPIO_INVALID_CONNECTION;
 d98:	81 e0       	ldi	r24, 0x01	; 1
 d9a:	89 83       	std	Y+1, r24	; 0x01
 d9c:	02 c0       	rjmp	.+4      	; 0xda2 <hal_button_get_state+0x7a>
        }
    }
    else
    {
        error = BUTTON_GPIO_STATE_ERROR;
 d9e:	82 e0       	ldi	r24, 0x02	; 2
 da0:	89 83       	std	Y+1, r24	; 0x01
    }

    return error;
 da2:	89 81       	ldd	r24, Y+1	; 0x01
 da4:	27 96       	adiw	r28, 0x07	; 7
 da6:	0f b6       	in	r0, 0x3f	; 63
 da8:	f8 94       	cli
 daa:	de bf       	out	0x3e, r29	; 62
 dac:	0f be       	out	0x3f, r0	; 63
 dae:	cd bf       	out	0x3d, r28	; 61
 db0:	cf 91       	pop	r28
 db2:	df 91       	pop	r29
 db4:	08 95       	ret

00000db6 <main>:
} operationMode;
/*************************************************************************/
/*                               Main test                               */
/*************************************************************************/
int main(void)
{
 db6:	df 93       	push	r29
 db8:	cf 93       	push	r28
 dba:	00 d0       	rcall	.+0      	; 0xdbc <main+0x6>
 dbc:	0f 92       	push	r0
 dbe:	cd b7       	in	r28, 0x3d	; 61
 dc0:	de b7       	in	r29, 0x3e	; 62
  operationMode mode = GPIO_PROGRAM;
 dc2:	81 e0       	ldi	r24, 0x01	; 1
 dc4:	89 83       	std	Y+1, r24	; 0x01

  switch (mode)
 dc6:	89 81       	ldd	r24, Y+1	; 0x01
 dc8:	28 2f       	mov	r18, r24
 dca:	30 e0       	ldi	r19, 0x00	; 0
 dcc:	3b 83       	std	Y+3, r19	; 0x03
 dce:	2a 83       	std	Y+2, r18	; 0x02
 dd0:	8a 81       	ldd	r24, Y+2	; 0x02
 dd2:	9b 81       	ldd	r25, Y+3	; 0x03
 dd4:	81 30       	cpi	r24, 0x01	; 1
 dd6:	91 05       	cpc	r25, r1
 dd8:	61 f0       	breq	.+24     	; 0xdf2 <main+0x3c>
 dda:	2a 81       	ldd	r18, Y+2	; 0x02
 ddc:	3b 81       	ldd	r19, Y+3	; 0x03
 dde:	22 30       	cpi	r18, 0x02	; 2
 de0:	31 05       	cpc	r19, r1
 de2:	51 f0       	breq	.+20     	; 0xdf8 <main+0x42>
 de4:	8a 81       	ldd	r24, Y+2	; 0x02
 de6:	9b 81       	ldd	r25, Y+3	; 0x03
 de8:	00 97       	sbiw	r24, 0x00	; 0
 dea:	41 f4       	brne	.+16     	; 0xdfc <main+0x46>
  {
  case PORT_PROGRAM:
  {
    execute_port_program();
 dec:	0e 94 3e 00 	call	0x7c	; 0x7c <execute_port_program>
 df0:	05 c0       	rjmp	.+10     	; 0xdfc <main+0x46>
    break;
  }

  case GPIO_PROGRAM:
  {
    execute_gpio_program();
 df2:	0e 94 69 00 	call	0xd2	; 0xd2 <execute_gpio_program>
 df6:	02 c0       	rjmp	.+4      	; 0xdfc <main+0x46>
    break;
  }

  case INTERRUPT_PROGRAM:
  {
    execute_interrupt_program();
 df8:	0e 94 c9 00 	call	0x192	; 0x192 <execute_interrupt_program>
  {
    /* do nothing */
  }
  }

  return 0;
 dfc:	80 e0       	ldi	r24, 0x00	; 0
 dfe:	90 e0       	ldi	r25, 0x00	; 0
}
 e00:	0f 90       	pop	r0
 e02:	0f 90       	pop	r0
 e04:	0f 90       	pop	r0
 e06:	cf 91       	pop	r28
 e08:	df 91       	pop	r29
 e0a:	08 95       	ret

00000e0c <_exit>:
 e0c:	f8 94       	cli

00000e0e <__stop_program>:
 e0e:	ff cf       	rjmp	.-2      	; 0xe0e <__stop_program>
